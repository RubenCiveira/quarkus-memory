package org.acme.features.market.place.domain.model;

import java.util.Optional;

import org.acme.features.market.merchant.domain.model.MerchantReference;
import org.acme.features.market.place.domain.model.valueobject.PlaceMerchantVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceNameVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceOpeningDateVO;
import org.acme.features.market.place.domain.model.valueobject.PlacePhotoVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceUidVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceVersionVO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class PlaceUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test Place contruction")
  void test_place_builder() {
    Place entity = Place.builder().uid(PlaceUidVO.from("one")).name(PlaceNameVO.from("one"))
        .merchant(PlaceMerchantVO.from(MerchantReference.of("one"))).photo(PlacePhotoVO.from(null))
        .openingDate(PlaceOpeningDateVO.from(null)).version(PlaceVersionVO.from(1)).build();
    Assertions.assertEquals("one", entity.getUid().getValue());
    Assertions.assertEquals("one", entity.getUidValue());
    Assertions.assertEquals("one", entity.getName().getValue());
    Assertions.assertEquals("one", entity.getNameValue());
    Assertions.assertEquals(MerchantReference.of("one"), entity.getMerchant().getValue());
    Assertions.assertEquals(MerchantReference.of("one"), entity.getMerchantValue());
    Assertions.assertEquals(null, entity.getPhoto().getValue().orElse(null));
    Assertions.assertEquals(null, entity.getPhotoValue().orElse(null));
    Assertions.assertEquals(null, entity.getOpeningDate().getValue().orElse(null));
    Assertions.assertEquals(null, entity.getOpeningDateValue().orElse(null));
    Assertions.assertEquals(1, entity.getVersion().getValue().orElse(null));
    Assertions.assertEquals(1, entity.getVersionValue().orElse(null));
    Assertions.assertEquals("two", entity.withUidValue("two").getUidValue());
    Assertions.assertEquals("two", entity.withNameValue("two").getNameValue());
    Assertions.assertEquals(MerchantReference.of("two"),
        entity.withMerchantValue(MerchantReference.of("two")).getMerchantValue());
    Assertions.assertNull(entity.withPhotoValue(Optional.empty()).getPhotoValue().orElse(null));
    Assertions.assertNull(
        entity.withOpeningDateValue(Optional.empty()).getOpeningDateValue().orElse(null));
    Assertions.assertEquals(2,
        entity.withVersionValue(Optional.of(2)).getVersionValue().orElse(null));
    Assertions.assertNull(entity.withVersionValue(Optional.empty()).getVersionValue().orElse(null));
    Assertions.assertNull(entity.withEmptyVersion().getVersionValue().orElse(null));
    Assertions.assertEquals(entity,
        Place.builder().uidValue("one").nameValue("one").merchantValue(MerchantReference.of("one"))
            .photoValue(null).openingDateValue(null).versionValue(1).build());
  }
}
