package org.acme.features.market.place.application;

import java.util.Optional;

import org.acme.features.market.merchant.domain.model.MerchantReference;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.valueobject.PlaceMerchantVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceNameVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceOpeningDateVO;
import org.acme.features.market.place.domain.model.valueobject.PlacePhotoVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceUidVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceVersionVO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class PlaceDtoUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_place_dto_builder() {
    Place entity = Place.builder().uid(PlaceUidVO.from("one")).name(PlaceNameVO.from("one"))
        .merchant(PlaceMerchantVO.from(MerchantReference.of("one"))).photo(PlacePhotoVO.from(null))
        .openingDate(PlaceOpeningDateVO.from(null)).version(PlaceVersionVO.from(1)).build();
    Place fixRef = Place.builder().uid(PlaceUidVO.from("two")).name(PlaceNameVO.from("two"))
        .merchant(PlaceMerchantVO.from(MerchantReference.of("two"))).photo(PlacePhotoVO.from(null))
        .openingDate(PlaceOpeningDateVO.from(null)).version(PlaceVersionVO.from(2)).build();
    Place other;
    PlaceDto dto = PlaceDto.from(entity);
    Assertions.assertEquals("one", dto.getUid().getValue());
    Assertions.assertEquals("one", dto.getName().getValue());
    Assertions.assertEquals(MerchantReference.of("one"), dto.getMerchant().getValue());
    Assertions.assertEquals(null, dto.getPhoto().getValue().orElse(null));
    Assertions.assertEquals(null, dto.getOpeningDate().getValue().orElse(null));
    Assertions.assertEquals(1, dto.getVersion().getValue().orElse(null));
    other = dto.toEntityBuilder(Optional.empty()).build();
    dto.hideField("-");
    dto.fixField("-", fixRef);
    Assertions.assertEquals("one", other.getUid().getValue());
    Assertions.assertEquals("one", other.getName().getValue());
    Assertions.assertEquals(MerchantReference.of("one"), other.getMerchant().getValue());
    Assertions.assertEquals(null, other.getPhoto().getValue().orElse(null));
    Assertions.assertEquals(null, other.getOpeningDate().getValue().orElse(null));
    Assertions.assertEquals(1, other.getVersion().getValue().orElse(null));
    dto.fixField("uid", fixRef);
    dto.fixField("name", fixRef);
    dto.fixField("merchant", fixRef);
    dto.fixField("photo", fixRef);
    dto.fixField("openingDate", fixRef);
    dto.fixField("version", fixRef);
    other = dto.toEntityBuilder(Optional.empty()).build();
    Assertions.assertEquals("two", other.getUid().getValue());
    Assertions.assertEquals("two", other.getName().getValue());
    Assertions.assertEquals(MerchantReference.of("two"), other.getMerchant().getValue());
    Assertions.assertEquals(null, other.getPhoto().getValue().orElse(null));
    Assertions.assertEquals(null, other.getOpeningDate().getValue().orElse(null));
    Assertions.assertEquals(2, other.getVersion().getValue().orElse(null));
    dto.hideField("uid");
    dto.hideField("name");
    dto.hideField("merchant");
    dto.hideField("photo");
    dto.hideField("openingDate");
    dto.hideField("version");
    Assertions.assertNull(dto.getUid());
    Assertions.assertNull(dto.getName());
    Assertions.assertNull(dto.getMerchant());
    Assertions.assertNull(dto.getPhoto());
    Assertions.assertNull(dto.getOpeningDate());
    Assertions.assertNull(dto.getVersion());
    dto = PlaceDto.from(entity);
    Assertions.assertEquals("one", dto.getUid().getValue());
    Assertions.assertEquals("one", dto.getName().getValue());
    Assertions.assertEquals(MerchantReference.of("one"), dto.getMerchant().getValue());
    Assertions.assertEquals(null, dto.getPhoto().getValue().orElse(null));
    Assertions.assertEquals(null, dto.getOpeningDate().getValue().orElse(null));
    Assertions.assertEquals(1, dto.getVersion().getValue().orElse(null));
    dto.fixField("uid");
    dto.fixField("name");
    dto.fixField("merchant");
    dto.fixField("photo");
    dto.fixField("openingDate");
    dto.fixField("version");
    Assertions.assertNull(dto.getUid());
    Assertions.assertNull(dto.getName());
    Assertions.assertNull(dto.getMerchant());
    Assertions.assertNull(dto.getPhoto());
    Assertions.assertNull(dto.getOpeningDate());
    Assertions.assertNull(dto.getVersion());
  }
}
