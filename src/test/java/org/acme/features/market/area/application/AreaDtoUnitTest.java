package org.acme.features.market.area.application;

import java.util.Optional;

import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.valueobject.AreaNameVO;
import org.acme.features.market.area.domain.model.valueobject.AreaPlaceVO;
import org.acme.features.market.area.domain.model.valueobject.AreaUidVO;
import org.acme.features.market.area.domain.model.valueobject.AreaVersionVO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class AreaDtoUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_area_dto_builder() {
    Area entity = Area.builder().uid(AreaUidVO.from("one")).name(AreaNameVO.from("one"))
        .place(AreaPlaceVO.from(null)).version(AreaVersionVO.from(1)).build();
    Area fixRef = Area.builder().uid(AreaUidVO.from("two")).name(AreaNameVO.from("two"))
        .place(AreaPlaceVO.from(null)).version(AreaVersionVO.from(2)).build();
    Area other;
    AreaDto dto = AreaDto.from(entity);
    Assertions.assertEquals("one", dto.getUid());
    Assertions.assertEquals("one", dto.getName());
    Assertions.assertEquals(null, dto.getPlace());
    Assertions.assertEquals(1, dto.getVersion());
    other = dto.toEntityBuilder(Optional.empty()).build();
    dto.hideField("-");
    dto.fixField("-", fixRef);
    Assertions.assertEquals("one", other.getUid().getValue());
    Assertions.assertEquals("one", other.getName().getValue());
    Assertions.assertEquals(null, other.getPlace().getValue());
    Assertions.assertEquals(1, other.getVersion().getValue().orElse(null));
    dto.fixField("uid", fixRef);
    dto.fixField("name", fixRef);
    dto.fixField("place", fixRef);
    dto.fixField("version", fixRef);
    other = dto.toEntityBuilder(Optional.empty()).build();
    Assertions.assertEquals("two", other.getUid().getValue());
    Assertions.assertEquals("two", other.getName().getValue());
    Assertions.assertEquals(null, other.getPlace().getValue());
    Assertions.assertEquals(2, other.getVersion().getValue().orElse(null));
    dto.hideField("uid");
    dto.hideField("name");
    dto.hideField("place");
    dto.hideField("version");
    Assertions.assertNull(dto.getUid());
    Assertions.assertNull(dto.getName());
    Assertions.assertNull(dto.getPlace());
    Assertions.assertNull(dto.getVersion());
    dto = AreaDto.from(entity);
    Assertions.assertEquals("one", dto.getUid());
    Assertions.assertEquals("one", dto.getName());
    Assertions.assertEquals(null, dto.getPlace());
    Assertions.assertEquals(1, dto.getVersion());
    dto.fixField("uid");
    dto.fixField("name");
    dto.fixField("place");
    dto.fixField("version");
    Assertions.assertNull(dto.getUid());
    Assertions.assertNull(dto.getName());
    Assertions.assertNull(dto.getPlace());
    Assertions.assertNull(dto.getVersion());
  }
}
