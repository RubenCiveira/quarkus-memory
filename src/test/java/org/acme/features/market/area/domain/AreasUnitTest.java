package org.acme.features.market.area.domain;

import java.util.List;
import java.util.Optional;

import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.Area.AreaBuilder;
import org.acme.features.market.area.domain.model.valueobject.AreaNameVO;
import org.acme.features.market.area.domain.model.valueobject.AreaPlaceVO;
import org.acme.features.market.area.domain.model.valueobject.AreaUidVO;
import org.acme.features.market.area.domain.model.valueobject.AreaVersionVO;
import org.acme.features.market.area.domain.rule.AreaActionType;
import org.acme.features.market.area.domain.rule.AreaBuilderRule;
import org.acme.features.market.area.domain.rule.AreaRule;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import jakarta.enterprise.inject.Instance;

class AreasUnitTest {

  /**
   * @autogenerated AggregateGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_areas_clean() {
    AreaRule entityRule = Mockito.mock(AreaRule.class);
    AreaBuilderRule builderRule = Mockito.mock(AreaBuilderRule.class);
    @SuppressWarnings("unchecked")
    Instance<AreaRule> entityRules = Mockito.mock(Instance.class);
    @SuppressWarnings("unchecked")
    Instance<AreaBuilderRule> builderRules = Mockito.mock(Instance.class);
    Mockito.when(entityRules.stream()).thenReturn(List.of(entityRule).stream());
    Mockito.when(builderRules.stream()).thenReturn(List.of(builderRule).stream());
    Mockito.when(entityRule.supports(Mockito.any())).thenReturn(true);
    Mockito.when(builderRule.supports(Mockito.any())).thenReturn(true);
    Mockito
        .when(
            entityRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Mockito.when(
        builderRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Areas instance = new Areas(entityRules, builderRules);
    Area one = Area.builder().uid(AreaUidVO.from("one")).name(AreaNameVO.from("one"))
        .place(AreaPlaceVO.from(null)).version(AreaVersionVO.from(1)).build();
    instance.clean(one);
    Mockito.verify(entityRule).apply(Mockito.eq(AreaActionType.DELETE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.of(one)}));
  }

  /**
   * @autogenerated AggregateGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_areas_initilize() {
    AreaRule entityRule = Mockito.mock(AreaRule.class);
    AreaBuilderRule builderRule = Mockito.mock(AreaBuilderRule.class);
    @SuppressWarnings("unchecked")
    Instance<AreaRule> entityRules = Mockito.mock(Instance.class);
    @SuppressWarnings("unchecked")
    Instance<AreaBuilderRule> builderRules = Mockito.mock(Instance.class);
    Mockito.when(entityRules.stream()).thenReturn(List.of(entityRule).stream());
    Mockito.when(builderRules.stream()).thenReturn(List.of(builderRule).stream());
    Mockito.when(entityRule.supports(Mockito.any())).thenReturn(true);
    Mockito.when(builderRule.supports(Mockito.any())).thenReturn(true);
    Mockito
        .when(
            entityRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Mockito.when(
        builderRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Areas instance = new Areas(entityRules, builderRules);
    Area one = Area.builder().uid(AreaUidVO.from("one")).name(AreaNameVO.from("one"))
        .place(AreaPlaceVO.from(null)).version(AreaVersionVO.from(1)).build();
    AreaBuilder oneBuilder = one.toBuilder();
    instance.initialize(oneBuilder);
    Mockito.verify(builderRule).apply(Mockito.eq(AreaActionType.CREATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.empty()}));
    Mockito.verify(entityRule).apply(Mockito.eq(AreaActionType.CREATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.empty()}));
  }

  /**
   * @autogenerated AggregateGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_areas_modify() {
    AreaRule entityRule = Mockito.mock(AreaRule.class);
    AreaBuilderRule builderRule = Mockito.mock(AreaBuilderRule.class);
    @SuppressWarnings("unchecked")
    Instance<AreaRule> entityRules = Mockito.mock(Instance.class);
    @SuppressWarnings("unchecked")
    Instance<AreaBuilderRule> builderRules = Mockito.mock(Instance.class);
    Mockito.when(entityRules.stream()).thenReturn(List.of(entityRule).stream());
    Mockito.when(builderRules.stream()).thenReturn(List.of(builderRule).stream());
    Mockito.when(entityRule.supports(Mockito.any())).thenReturn(true);
    Mockito.when(builderRule.supports(Mockito.any())).thenReturn(true);
    Mockito
        .when(
            entityRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Mockito.when(
        builderRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Areas instance = new Areas(entityRules, builderRules);
    Area one = Area.builder().uid(AreaUidVO.from("one")).name(AreaNameVO.from("one"))
        .place(AreaPlaceVO.from(null)).version(AreaVersionVO.from(1)).build();
    Area other = Area.builder().uid(AreaUidVO.from("two")).name(AreaNameVO.from("two"))
        .place(AreaPlaceVO.from(null)).version(AreaVersionVO.from(2)).build();
    AreaBuilder otherBuilder = other.toBuilder();
    instance.modify(one, otherBuilder);
    Mockito.verify(builderRule).apply(Mockito.eq(AreaActionType.UPDATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.of(one)}));
    Mockito.verify(entityRule).apply(Mockito.eq(AreaActionType.UPDATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.of(one)}));
  }
}
