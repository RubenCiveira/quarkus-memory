package org.acme.features.market.area.domain.model;

import java.util.Optional;

import org.acme.features.market.area.domain.model.valueobject.AreaNameVO;
import org.acme.features.market.area.domain.model.valueobject.AreaPlaceVO;
import org.acme.features.market.area.domain.model.valueobject.AreaUidVO;
import org.acme.features.market.area.domain.model.valueobject.AreaVersionVO;
import org.acme.features.market.place.domain.model.PlaceReference;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class AreaUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test Area contruction")
  void test_area_builder() {
    Area entity = Area.builder().uid(AreaUidVO.from("one")).name(AreaNameVO.from("one"))
        .place(AreaPlaceVO.from(PlaceReference.of("one"))).version(AreaVersionVO.from(1)).build();
    Assertions.assertEquals("one", entity.getUid().getValue());
    Assertions.assertEquals("one", entity.getUidValue());
    Assertions.assertEquals("one", entity.getName().getValue());
    Assertions.assertEquals("one", entity.getNameValue());
    Assertions.assertEquals(PlaceReference.of("one"), entity.getPlace().getValue());
    Assertions.assertEquals(PlaceReference.of("one"), entity.getPlaceValue());
    Assertions.assertEquals(1, entity.getVersion().getValue().orElse(null));
    Assertions.assertEquals(1, entity.getVersionValue().orElse(null));
    Assertions.assertEquals("two", entity.withUidValue("two").getUidValue());
    Assertions.assertEquals("two", entity.withNameValue("two").getNameValue());
    Assertions.assertEquals(PlaceReference.of("two"),
        entity.withPlaceValue(PlaceReference.of("two")).getPlaceValue());
    Assertions.assertEquals(2,
        entity.withVersionValue(Optional.of(2)).getVersionValue().orElse(null));
    Assertions.assertNull(entity.withVersionValue(Optional.empty()).getVersionValue().orElse(null));
    Assertions.assertNull(entity.withEmptyVersion().getVersionValue().orElse(null));
    Assertions.assertEquals(entity, Area.builder().uidValue("one").nameValue("one")
        .placeValue(PlaceReference.of("one")).versionValue(1).build());
  }
}
