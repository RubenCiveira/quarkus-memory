package org.acme.features.market.fruit.domain.interaction;

import org.acme.features.market.fruit.domain.model.Fruit;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class FruitDtoUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_fruit_dto_builder() {
    Fruit entity = Fruit.builder().uidValue("one").nameValue("one").versionValue(1).build();
    Fruit fixRef = Fruit.builder().uidValue("two").nameValue("two").versionValue(2).build();
    Fruit other;
    FruitDto dto = FruitDto.from(entity);
    Assertions.assertEquals("one", dto.getUid());
    Assertions.assertEquals("one", dto.getName());
    Assertions.assertEquals(1, dto.getVersion());
    other = dto.toEntity();
    dto.hide("-");
    dto.fix("-", fixRef);
    Assertions.assertEquals("one", other.getUid().getValue());
    Assertions.assertEquals("one", other.getName().getValue());
    Assertions.assertEquals(1, other.getVersion().getValue().orElse(null));
    dto.fix("uid", fixRef);
    dto.fix("name", fixRef);
    dto.fix("version", fixRef);
    other = dto.toEntity();
    Assertions.assertEquals("two", other.getUid().getValue());
    Assertions.assertEquals("two", other.getName().getValue());
    Assertions.assertEquals(2, other.getVersion().getValue().orElse(null));
    dto.hide("uid");
    dto.hide("name");
    dto.hide("version");
    Assertions.assertNull(dto.getUid());
    Assertions.assertNull(dto.getName());
    Assertions.assertNull(dto.getVersion());
  }
}
