package org.acme.features.market.merchant.domain;

import java.util.List;
import java.util.Optional;

import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.Merchant.MerchantBuilder;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantEnabledVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantKeyVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantNameVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantUidVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantVersionVO;
import org.acme.features.market.merchant.domain.rule.MerchantActionType;
import org.acme.features.market.merchant.domain.rule.MerchantBuilderRule;
import org.acme.features.market.merchant.domain.rule.MerchantRule;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

import jakarta.enterprise.inject.Instance;

class MerchantsUnitTest {

  /**
   * @autogenerated AggregateGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_merchants_clean() {
    MerchantRule entityRule = Mockito.mock(MerchantRule.class);
    MerchantBuilderRule builderRule = Mockito.mock(MerchantBuilderRule.class);
    @SuppressWarnings("unchecked")
    Instance<MerchantRule> entityRules = Mockito.mock(Instance.class);
    @SuppressWarnings("unchecked")
    Instance<MerchantBuilderRule> builderRules = Mockito.mock(Instance.class);
    Mockito.when(entityRules.stream()).thenReturn(List.of(entityRule).stream());
    Mockito.when(builderRules.stream()).thenReturn(List.of(builderRule).stream());
    Mockito.when(entityRule.supports(Mockito.any())).thenReturn(true);
    Mockito.when(builderRule.supports(Mockito.any())).thenReturn(true);
    Mockito
        .when(
            entityRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Mockito.when(
        builderRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Merchants instance = new Merchants(entityRules, builderRules);
    Merchant one = Merchant.builder().uid(MerchantUidVO.from("one"))
        .name(MerchantNameVO.from("one")).enabled(MerchantEnabledVO.from(true))
        .key(MerchantKeyVO.from("one")).version(MerchantVersionVO.from(1)).build();
    instance.clean(one);
    Mockito.verify(entityRule).apply(Mockito.eq(MerchantActionType.DELETE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.of(one)}));
  }

  /**
   * @autogenerated AggregateGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_merchants_initilize() {
    MerchantRule entityRule = Mockito.mock(MerchantRule.class);
    MerchantBuilderRule builderRule = Mockito.mock(MerchantBuilderRule.class);
    @SuppressWarnings("unchecked")
    Instance<MerchantRule> entityRules = Mockito.mock(Instance.class);
    @SuppressWarnings("unchecked")
    Instance<MerchantBuilderRule> builderRules = Mockito.mock(Instance.class);
    Mockito.when(entityRules.stream()).thenReturn(List.of(entityRule).stream());
    Mockito.when(builderRules.stream()).thenReturn(List.of(builderRule).stream());
    Mockito.when(entityRule.supports(Mockito.any())).thenReturn(true);
    Mockito.when(builderRule.supports(Mockito.any())).thenReturn(true);
    Mockito
        .when(
            entityRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Mockito.when(
        builderRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Merchants instance = new Merchants(entityRules, builderRules);
    Merchant one = Merchant.builder().uid(MerchantUidVO.from("one"))
        .name(MerchantNameVO.from("one")).enabled(MerchantEnabledVO.from(true))
        .key(MerchantKeyVO.from("one")).version(MerchantVersionVO.from(1)).build();
    MerchantBuilder oneBuilder = one.toBuilder();
    instance.initialize(oneBuilder);
    Mockito.verify(builderRule).apply(Mockito.eq(MerchantActionType.CREATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.empty()}));
    Mockito.verify(entityRule).apply(Mockito.eq(MerchantActionType.CREATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.empty()}));
  }

  /**
   * @autogenerated AggregateGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_merchants_modify() {
    MerchantRule entityRule = Mockito.mock(MerchantRule.class);
    MerchantBuilderRule builderRule = Mockito.mock(MerchantBuilderRule.class);
    @SuppressWarnings("unchecked")
    Instance<MerchantRule> entityRules = Mockito.mock(Instance.class);
    @SuppressWarnings("unchecked")
    Instance<MerchantBuilderRule> builderRules = Mockito.mock(Instance.class);
    Mockito.when(entityRules.stream()).thenReturn(List.of(entityRule).stream());
    Mockito.when(builderRules.stream()).thenReturn(List.of(builderRule).stream());
    Mockito.when(entityRule.supports(Mockito.any())).thenReturn(true);
    Mockito.when(builderRule.supports(Mockito.any())).thenReturn(true);
    Mockito
        .when(
            entityRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Mockito.when(
        builderRule.apply(Mockito.any(), Mockito.any(), Mockito.any(), (Object[]) Mockito.any()))
        .then(call -> call.getArgument(1));
    Merchants instance = new Merchants(entityRules, builderRules);
    Merchant one = Merchant.builder().uid(MerchantUidVO.from("one"))
        .name(MerchantNameVO.from("one")).enabled(MerchantEnabledVO.from(true))
        .key(MerchantKeyVO.from("one")).version(MerchantVersionVO.from(1)).build();
    Merchant other = Merchant.builder().uid(MerchantUidVO.from("two"))
        .name(MerchantNameVO.from("two")).enabled(MerchantEnabledVO.from(false))
        .key(MerchantKeyVO.from("two")).version(MerchantVersionVO.from(2)).build();
    MerchantBuilder otherBuilder = other.toBuilder();
    instance.modify(one, otherBuilder);
    Mockito.verify(builderRule).apply(Mockito.eq(MerchantActionType.UPDATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.of(one)}));
    Mockito.verify(entityRule).apply(Mockito.eq(MerchantActionType.UPDATE), Mockito.any(),
        Mockito.any(), Mockito.eq(new Object[] {Optional.of(one)}));
  }
}
