package org.acme.features.market.merchant.application;

import java.util.Optional;

import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantEnabledVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantKeyVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantNameVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantUidVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantVersionVO;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

class MerchantDtoUnitTest {

  /**
   * @autogenerated ValueObjectGenerator
   */
  @Test
  @DisplayName("Test a entity reference contruction")
  void test_merchant_dto_builder() {
    Merchant entity = Merchant.builder().uid(MerchantUidVO.from("one"))
        .name(MerchantNameVO.from("one")).enabled(MerchantEnabledVO.from(true))
        .key(MerchantKeyVO.from("one")).version(MerchantVersionVO.from(1)).build();
    Merchant fixRef = Merchant.builder().uid(MerchantUidVO.from("two"))
        .name(MerchantNameVO.from("two")).enabled(MerchantEnabledVO.from(false))
        .key(MerchantKeyVO.from("two")).version(MerchantVersionVO.from(2)).build();
    Merchant other;
    MerchantDto dto = MerchantDto.from(entity);
    Assertions.assertEquals("one", dto.getUid());
    Assertions.assertEquals("one", dto.getName());
    Assertions.assertEquals(true, dto.getEnabled());
    Assertions.assertEquals("one", dto.getKey());
    Assertions.assertEquals(1, dto.getVersion());
    other = dto.toEntityBuilder(Optional.empty()).build();
    dto.hideField("-");
    dto.fixField("-", fixRef);
    Assertions.assertEquals("one", other.getUid().getValue());
    Assertions.assertEquals("one", other.getName().getValue());
    Assertions.assertEquals(true, other.getEnabled().getValue());
    Assertions.assertEquals("one", other.getKey().getValue().orElse(null));
    Assertions.assertEquals(1, other.getVersion().getValue().orElse(null));
    dto.fixField("uid", fixRef);
    dto.fixField("name", fixRef);
    dto.fixField("enabled", fixRef);
    dto.fixField("key", fixRef);
    dto.fixField("version", fixRef);
    other = dto.toEntityBuilder(Optional.empty()).build();
    Assertions.assertEquals("two", other.getUid().getValue());
    Assertions.assertEquals("two", other.getName().getValue());
    Assertions.assertEquals(false, other.getEnabled().getValue());
    Assertions.assertEquals("two", other.getKey().getValue().orElse(null));
    Assertions.assertEquals(2, other.getVersion().getValue().orElse(null));
    dto.hideField("uid");
    dto.hideField("name");
    dto.hideField("enabled");
    dto.hideField("key");
    dto.hideField("version");
    Assertions.assertNull(dto.getUid());
    Assertions.assertNull(dto.getName());
    Assertions.assertNull(dto.getEnabled());
    Assertions.assertNull(dto.getKey());
    Assertions.assertNull(dto.getVersion());
    dto = MerchantDto.from(entity);
    Assertions.assertEquals("one", dto.getUid());
    Assertions.assertEquals("one", dto.getName());
    Assertions.assertEquals(true, dto.getEnabled());
    Assertions.assertEquals("one", dto.getKey());
    Assertions.assertEquals(1, dto.getVersion());
    dto.fixField("uid");
    dto.fixField("name");
    dto.fixField("enabled");
    dto.fixField("key");
    dto.fixField("version");
    Assertions.assertNull(dto.getUid());
    Assertions.assertNull(dto.getName());
    Assertions.assertNull(dto.getEnabled());
    Assertions.assertNull(dto.getKey());
    Assertions.assertNull(dto.getVersion());
  }
}
