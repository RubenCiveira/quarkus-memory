/* @autogenerated */
package org.acme.common.infrastructure.connector.munity;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;
import java.util.Map;
import java.util.function.Consumer;

import org.acme.common.connector.RemoteConnection;
import org.acme.common.connector.RemoteQuery;

import io.vertx.mutiny.ext.web.client.HttpRequest;
import jakarta.ws.rs.core.MediaType;
import lombok.extern.slf4j.Slf4j;

@Slf4j
public class MunityWebQuery implements RemoteQuery {
  private final HttpRequest<?> client;
  private final Object body;

  public MunityWebQuery(HttpRequest<?> client, String target, Object body) {
    super();
    if (null == body) {
      client.putHeader("Content-Type", MediaType.APPLICATION_JSON);
    }
    client = client.putHeader("Accept", MediaType.APPLICATION_JSON);
    try {
      URI url = new URI(target);
      client = client.port(url.getPort()).host(url.getHost());
    } catch (URISyntaxException e) {
      log.warn("Unable to parte {} as url", target);
    }
    this.body = body;
    this.client = client;
  }

  @Override
  public RemoteQuery header(String name, String value) {
    client.putHeader(name, value);
    return this;
  }

  @Override
  public RemoteQuery headers(String name, List<String> values) {
    client.putHeader(name, values);
    return this;
  }

  @Override
  public RemoteQuery header(Map<String, List<String>> headers) {
    headers.forEach(this::headers);
    return this;
  }

  @Override
  public <T> RemoteConnection processor(Class<T> type, Consumer<T> consumer) {
    return new MunityWebConnection(
        (null == body ? client.send() : client.sendJson(body)).onItem().transform(item -> {
          consumer.accept((T) item.bodyAsJson(type));
          return "";
        }));
  }

  @Override
  public RemoteConnection processor(Runnable runnable) {
    return new MunityWebConnection(
        (null == body ? client.send() : client.sendJson(body)).onItem().transform(item -> {
          runnable.run();
          return "";
        }));
  }
}
