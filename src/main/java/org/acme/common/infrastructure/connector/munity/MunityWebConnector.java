/* @autogenerated */
package org.acme.common.infrastructure.connector.munity;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;

import org.acme.common.connector.RemoteConnection;
import org.acme.common.connector.RemoteConnector;
import org.acme.common.connector.RemoteQuery;

import io.smallrye.mutiny.Uni;
import io.vertx.mutiny.core.Vertx;
import io.vertx.mutiny.ext.web.client.WebClient;

public class MunityWebConnector implements RemoteConnector {
  private final WebClient client;

  public MunityWebConnector() {
    Vertx vertx = Vertx.vertx();
    client = WebClient.create(vertx);
  }

  @Override
  public RemoteQuery get(String target) {
    return new MunityWebQuery(client.get(target), target, null);
  }

  @Override
  public RemoteQuery delete(String target) {
    return new MunityWebQuery(client.delete(target), target, null);
  }

  @Override
  public RemoteQuery post(String target, Object body) {
    return new MunityWebQuery(client.post(target), target, body);
  }

  @Override
  public RemoteQuery put(String target, Object body) {
    return new MunityWebQuery(client.put(target), target, body);
  }

  @Override
  public RemoteQuery patch(String target, Object body) {
    return new MunityWebQuery(client.patch(target), target, body);
  }

  @Override
  public void send(RemoteConnection... request) {
    send(Arrays.asList(request));
  }

  @Override
  public void send(List<RemoteConnection> request) {
    if (request.size() == 1) {
      System.out.println("SEND ONE");
      map(request.get(0)).await().indefinitely();
    } else if (!request.isEmpty()) {
      System.out.println("SEND MULTIPLE");
      Uni.combine().all().unis(map(request)).with(result -> "").await().indefinitely();
    }
  }

  @Override
  public void send(Stream<RemoteConnection> request) {
    send(request.toList());
  }

  private Uni<String> map(RemoteConnection conn) {
    return ((MunityWebConnection) conn).buffer();
  }

  private List<Uni<String>> map(List<RemoteConnection> conn) {
    return conn.stream().map(this::map).toList();
  }
}
