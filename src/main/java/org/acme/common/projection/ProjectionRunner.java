/* @autogenerated */
package org.acme.common.projection;

import java.util.List;
import java.util.Map;
import java.util.Optional;

import org.acme.common.connector.RemoteConnector;

import com.fasterxml.jackson.databind.ObjectMapper;

import jakarta.enterprise.context.ApplicationScoped;
import lombok.RequiredArgsConstructor;

@ApplicationScoped
@RequiredArgsConstructor
public class ProjectionRunner {
  private final ObjectMapper mapper;
  private final RemoteConnector connector;

  @SuppressWarnings("unchecked")
  public List<Map<String, Object>> list(ExecutionPlan plan, Map<String, String> params,
      Map<String, List<String>> headers) {
    return list(plan, Map.class, params, headers).stream().map(map -> (Map<String, Object>) map)
        .toList();
  }

  public <T> List<T> list(ExecutionPlan plan, Class<T> type, Map<String, String> params,
      Map<String, List<String>> headers) {
    return plan.getTree().byId(plan.getPath())
        .map(node -> plan.execute(node, type, connector, mapper, params, headers))
        .orElseGet(List::of);
  }

  @SuppressWarnings("unchecked")
  public Optional<Map<String, Object>> retrieve(ExecutionPlan plan, Map<String, String> params,
      Map<String, List<String>> headers) {
    return retrieve(plan, Map.class, params, headers).map(map -> (Map<String, Object>) map);
  }

  public <T> Optional<T> retrieve(ExecutionPlan plan, Class<T> type, Map<String, String> params,
      Map<String, List<String>> headers) {
    return plan.getTree().byId(plan.getPath()).flatMap(
        node -> plan.execute(node, type, connector, mapper, params, headers).stream().findFirst());
  }
}
