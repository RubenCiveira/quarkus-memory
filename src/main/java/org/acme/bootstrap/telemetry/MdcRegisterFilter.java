/* @autogenerated */
package org.acme.bootstrap.telemetry;

import org.acme.common.infrastructure.CurrentRequest;
import org.acme.common.security.Actor;
import org.acme.common.security.Connection;
import org.jboss.resteasy.reactive.server.ServerRequestFilter;
import org.jboss.resteasy.reactive.server.ServerResponseFilter;
import org.slf4j.MDC;
import io.opentelemetry.api.trace.Span;
import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MdcRegisterFilter {

  private static final String MDC_KEY_ACTOR = "actor";
  private static final String MDC_KEY_TENANT = "tenant";
  private static final String MDC_KEY_DEVICE = "device";

  private final CurrentRequest currentRequest;
  
  @ServerRequestFilter
  public void getRequestFilter() {
    Actor actor = currentRequest.getActor();
    Connection connection = currentRequest.getConnection();
    Span currentSpan = Span.current();
    if (currentSpan.getSpanContext().isValid()) {
      currentSpan.setAttribute(MDC_KEY_ACTOR, actor.getName().orElse("-"));
      currentSpan.setAttribute(MDC_KEY_TENANT, actor.getTenant().orElse("-"));
      currentSpan.setAttribute(MDC_KEY_DEVICE, connection.getRemoteDevice().orElse("-"));
    }
    MDC.put(MDC_KEY_ACTOR, actor.getName().orElse("-"));
    MDC.put(MDC_KEY_TENANT, actor.getTenant().orElse("-"));
    MDC.put(MDC_KEY_DEVICE, connection.getRemoteDevice().orElse("-"));
  }

  @ServerResponseFilter
  public void getResponseFilter() {
    MDC.remove(MDC_KEY_ACTOR);
    MDC.remove(MDC_KEY_TENANT);
    MDC.remove(MDC_KEY_DEVICE);
  }
}
