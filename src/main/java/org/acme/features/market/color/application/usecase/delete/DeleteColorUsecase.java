package org.acme.features.market.color.application.usecase.delete;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.color.application.service.ColorsVisibilityService;
import org.acme.features.market.color.application.usecase.delete.event.ColorDeleteAllowPipelineStageEvent;
import org.acme.features.market.color.domain.Colors;
import org.acme.features.market.color.domain.gateway.ColorCacheGateway;
import org.acme.features.market.color.domain.gateway.ColorWriteRepositoryGateway;
import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.ColorRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class DeleteColorUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Colors aggregate;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final ColorCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<ColorDeleteAllowPipelineStageEvent> deleteAllow;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final ColorWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final ColorsVisibilityService visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query, final ColorRef reference) {
    ColorDeleteAllowPipelineStageEvent base = ColorDeleteAllowPipelineStageEvent.build(query,
        Optional.of(reference), true, "Allowed by default");
    deleteAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    ColorDeleteAllowPipelineStageEvent base = ColorDeleteAllowPipelineStageEvent.build(query,
        Optional.empty(), true, "Allowed by default");
    deleteAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<ColorDeleteResult> delete(final ColorDeleteCommand command) {
    CompletionStage<Optional<Color>> updated =
        allow(command, command.getReference()).thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return visibility.retrieveVisible(command, command.getReference().getUidValue())
              .thenCompose(this::deleteIfIsPresent);
        });
    return updated.thenCompose(entity -> mapEntity(command, entity));
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param original
   * @return The slide with some values
   */
  private CompletionStage<Optional<Color>> deleteEntity(final Color original) {
    return aggregate.clean(original).thenCompose(color -> gateway.delete(color))
        .thenCompose(deleted -> cache.remove(deleted).thenApply(_ready -> Optional.of(deleted)));
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param result
   * @return The slide with some values
   */
  private CompletionStage<Optional<Color>> deleteIfIsPresent(final Optional<Color> result) {
    return result.map(this::deleteEntity)
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opcolor
   * @return The slide with some values
   */
  private CompletionStage<ColorDeleteResult> mapEntity(final ColorDeleteCommand command,
      final Optional<Color> opcolor) {
    return opcolor
        .map(color -> visibility.copyWithHidden(command, color)
            .thenApply(visible -> ColorDeleteResult.builder().command(command)
                .color(Optional.of(visible)).build()))
        .orElseGet(() -> CompletableFuture.completedStage(
            ColorDeleteResult.builder().command(command).color(Optional.empty()).build()));
  }
}
