package org.acme.features.market.color.infrastructure.driver.rest;

import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;

import org.acme.common.action.Interaction;
import org.acme.common.rest.CurrentRequest;
import org.acme.features.market.color.application.interaction.query.ColorAllowQuery;
import org.acme.features.market.color.application.interaction.query.ColorEntityAllowQuery;
import org.acme.features.market.color.application.usecase.CreateColorUsecase;
import org.acme.features.market.color.application.usecase.DeleteColorUsecase;
import org.acme.features.market.color.application.usecase.ListColorUsecase;
import org.acme.features.market.color.application.usecase.RetrieveColorUsecase;
import org.acme.features.market.color.application.usecase.UpdateColorUsecase;
import org.acme.features.market.color.application.usecase.service.ColorsVisibilityService;
import org.acme.features.market.color.domain.model.ColorReference;
import org.acme.generated.openapi.api.ColorAclApi;
import org.acme.generated.openapi.model.ColorAclFields;
import org.acme.generated.openapi.model.ColorAclGenericAllows;
import org.acme.generated.openapi.model.ColorAclSpecificAllows;
import org.acme.generated.openapi.model.ColorGenericAcl;
import org.acme.generated.openapi.model.ColorSpecificAcl;
import org.acme.generated.openapi.model.CommonAllow;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ColorAclController implements ColorAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final CreateColorUsecase create;

  /**
   * Color
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final DeleteColorUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ListColorUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RetrieveColorUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final UpdateColorUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ColorsVisibilityService visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response colorApiContextualAcl(final String uid) {
    return currentRequest.resolve(interaction -> {
      ColorEntityAllowQuery query =
          ColorEntityAllowQuery.builder().reference(ColorReference.of(uid)).build(interaction);
      ColorSpecificAcl response = new ColorSpecificAcl();
      response.setAllows(new ColorAclSpecificAllows());
      response.setFields(new ColorAclFields());
      return CompletableFuture
          .allOf(fixedFields(response.getFields(), query),
              hiddenFields(response.getFields(), query), updateAllows(response, query),
              deleteAllows(response, query), retrieveAllows(response, query))
          .thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response colorApiGenericAcl() {
    return currentRequest.resolve(interaction -> {
      ColorAllowQuery query = ColorAllowQuery.builder().build(interaction);
      ColorEntityAllowQuery entityQuery = ColorEntityAllowQuery.builder().build(interaction);
      ColorGenericAcl response = new ColorGenericAcl();
      response.setAllows(new ColorAclGenericAllows());
      response.setFields(new ColorAclFields());
      return CompletableFuture
          .allOf(fixedFields(response.getFields(), query),
              hiddenFields(response.getFields(), query), listAllows(response, query),
              createAllows(response, query), updateAllows(response, entityQuery),
              deleteAllows(response, entityQuery), retrieveAllows(response, entityQuery))
          .thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> createAllows(final ColorGenericAcl response,
      final ColorAllowQuery query) {
    return create.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setCreate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final ColorGenericAcl response,
      final ColorEntityAllowQuery query) {
    return delete.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final ColorSpecificAcl response,
      final ColorEntityAllowQuery query) {
    return delete.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> fixedFields(final ColorAclFields response,
      final Interaction query) {
    return visibility.fieldsToFix(query).getFixed()
        .thenAccept(fields -> response.setNoEditables(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> hiddenFields(final ColorAclFields response,
      final Interaction query) {
    return visibility.fieldsToHide(query).getHidden()
        .thenAccept(fields -> response.setNoVisibles(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> listAllows(final ColorGenericAcl response,
      final ColorAllowQuery query) {
    return list.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows()
            .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final ColorGenericAcl response,
      final ColorEntityAllowQuery query) {
    return retrieve.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final ColorSpecificAcl response,
      final ColorEntityAllowQuery query) {
    return retrieve.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final ColorGenericAcl response,
      final ColorEntityAllowQuery query) {
    return update.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final ColorSpecificAcl response,
      final ColorEntityAllowQuery query) {
    return update.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }
}
