package org.acme.features.market.color.application.usecase.list;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.color.application.ColorDto;
import org.acme.features.market.color.application.service.ColorsVisibilityService;
import org.acme.features.market.color.domain.model.Color;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ListColorUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<ColorListAllow> listAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final ColorsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public ColorListAllow allow(final Interaction query) {
    ColorListAllow base = ColorListAllow.build(query, true, "Allowed by default");
    listAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public ColorListResult list(final ColorListQuery query) {
    CompletionStage<List<Color>> future = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.listVisibles(query, query.getFilter(), query.getCursor());
    });
    return ColorListResult.builder().query(query)
        .colors(future.thenCompose(values -> mapList(query, values))).build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param colors
   * @return The slide with some values
   */
  private CompletionStage<List<ColorDto>> mapList(final ColorListQuery query,
      final List<Color> colors) {
    List<CompletableFuture<ColorDto>> futures =
        colors.stream().map(color -> visibility.copyWithHidden(query, color))
            .map(CompletionStage::toCompletableFuture).toList();
    return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
        .thenApply(voidResult -> futures.stream().map(CompletableFuture::join).toList());
  }
}
