package org.acme.features.market.color.domain.model.valueobject;

import java.util.Optional;

import org.acme.common.exception.ConstraintException;
import org.acme.common.validation.AbstractFailList;
import org.acme.common.validation.ConstraintFail;
import org.acme.common.validation.ConstraintFailList;
import org.acme.features.market.merchant.domain.model.MerchantRef;
import org.acme.features.market.merchant.domain.model.MerchantReference;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import lombok.With;

@Getter
@ToString
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class ColorMerchantVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static ColorMerchantVO empty() {
    return new ColorMerchantVO(null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param merchant
   * @return An empty instance
   */
  public static ColorMerchantVO from(final MerchantRef merchant) {
    return tryFrom(merchant);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param merchantUid
   * @return An empty instance
   */
  public static ColorMerchantVO fromReference(final String merchantUid) {
    return from(MerchantReference.of(merchantUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param merchant
   * @return An empty instance
   */
  public static ColorMerchantVO tryFrom(final Object merchant) {
    ConstraintFailList list = new ConstraintFailList();
    ColorMerchantVO result = tryFrom(merchant, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param merchant temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> ColorMerchantVO tryFrom(final Object merchant,
      final T fails) {
    if (null == merchant) {
      return new ColorMerchantVO(null);
    } else if (merchant instanceof MerchantRef) {
      return new ColorMerchantVO((MerchantRef) merchant);
    } else {
      fails.add(new ConstraintFail("wrong-type", "merchant", merchant.getClass(),
          "A MerchantRef type is expected for merchant"));
      return null;
    }
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param merchantUid
   * @return An empty instance
   */
  public static ColorMerchantVO tryFromReference(final String merchantUid) {
    return tryFrom(MerchantReference.of(merchantUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param merchantUid
   * @param fails Error list
   * @return An empty instance
   */
  public static ColorMerchantVO tryFromReference(final String merchantUid,
      final ConstraintFailList fails) {
    return tryFrom(MerchantReference.of(merchantUid), fails);
  }

  /**
   * El merchant de color
   *
   * @autogenerated ValueObjectGenerator
   */
  private final MerchantRef value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<String> getReferenceValue() {
    return Optional.ofNullable(value).map(MerchantRef::getUidValue);
  }

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<MerchantRef> getValue() {
    return Optional.ofNullable(value);
  }
}
