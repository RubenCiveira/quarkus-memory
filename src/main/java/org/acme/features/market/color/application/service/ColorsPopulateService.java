package org.acme.features.market.color.application.service;

import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.validation.AbstractFailList;
import org.acme.common.validation.ConstraintFail;
import org.acme.features.market.color.application.ColorDto;
import org.acme.features.market.color.application.ColorPopulateResult;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.model.valueobject.ColorNameVO;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ColorsPopulateService {

  /**
   * @autogenerated PopulateServiceGenerator
   */
  private final ColorsVisibilityService colorVisibles;

  /**
   * @autogenerated PopulateServiceGenerator
   * @param interaction
   * @param map
   * @param fails
   * @return
   */
  public CompletionStage<Optional<ColorPopulateResult>> populateInto(Interaction interaction,
      Map<String, String> map, AbstractFailList fails) {
    AbstractFailList constraints = new AbstractFailList();
    ColorFilter.ColorFilterBuilder filterBuilder = ColorFilter.builder();
    Optional<String> hasName = Optional.ofNullable(map.get("name"));
    if (hasName.isPresent()) {
      filterBuilder = filterBuilder.name(hasName.get());
    } else {
      constraints.add(new ConstraintFail("name-required", "The name is required", null));
    }
    return colorVisibles.listCachedVisibles(interaction, filterBuilder.build(),
        ColorCursor.builder().limit(1).build()).thenApply(results -> {
          ColorDto.ColorDtoBuilder builder = ColorDto.builder();
          Optional.ofNullable(map.get("Name")).map(value -> ColorNameVO.tryFrom(value, constraints))
              .ifPresent(builder::name);
          if (constraints.isEmpty()) {
            return Optional.of(ColorPopulateResult.builder().original(results.first().orElse(null))
                .dto(builder.build()).build());
          } else {
            fails.add(constraints);
            return Optional.empty();
          }
        });
  }
}
