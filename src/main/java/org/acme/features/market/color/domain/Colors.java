package org.acme.features.market.color.domain;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.Color.ColorBuilder;
import org.acme.features.market.color.domain.model.rule.ColorBuildFormulaPipeline;
import org.acme.features.market.color.domain.model.rule.ColorCreateRulePipeline;
import org.acme.features.market.color.domain.model.rule.ColorDeleteRulePipeline;
import org.acme.features.market.color.domain.model.rule.ColorUpdateRulePipeline;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class Colors {

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<ColorBuildFormulaPipeline> buildingFormulas;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<ColorCreateRulePipeline> creatingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<ColorDeleteRulePipeline> deletingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<ColorUpdateRulePipeline> updatingRules;

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    Set<String> fields = new HashSet<>();
    buildingFormulas.forEach(formula -> fields.addAll(formula.fields()));
    return fields;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Color clean(final Color entity) {
    return ColorDeleteRulePipeline.fire(deletingRules.iterator(), entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Color initialize(final ColorBuilder builder) {
    return ColorCreateRulePipeline.fire(creatingRules.iterator(),
        build(builder, Optional.empty(), null).build());
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Color modify(final Color base, final ColorBuilder builder) {
    return ColorUpdateRulePipeline.fire(updatingRules.iterator(),
        build(builder, Optional.of(base), null).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @param original a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private ColorBuilder build(final ColorBuilder builder, final Optional<Color> original,
      final String ignore) {
    return ColorBuildFormulaPipeline.fire(buildingFormulas.iterator(), builder, original);
  }
}
