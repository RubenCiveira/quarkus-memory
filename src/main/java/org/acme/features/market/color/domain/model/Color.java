package org.acme.features.market.color.domain.model;

import java.util.Optional;

import org.acme.features.market.color.domain.model.valueobject.ColorMerchantVO;
import org.acme.features.market.color.domain.model.valueobject.ColorNameVO;
import org.acme.features.market.color.domain.model.valueobject.ColorUidVO;
import org.acme.features.market.color.domain.model.valueobject.ColorVersionVO;
import org.acme.features.market.merchant.domain.model.MerchantRef;

import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;

@Getter
@ToString
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Color implements ColorRef {

  /**
   * @autogenerated EntityGenerator
   */
  public static class ColorBuilder {

    /**
     * @autogenerated EntityGenerator
     * @param merchant
     * @return
     */
    public ColorBuilder merchantReferenceValue(final String merchant) {
      return merchant(ColorMerchantVO.fromReference(merchant));
    }

    /**
     * @autogenerated EntityGenerator
     * @param merchant
     * @return
     */
    public ColorBuilder merchantValue(final MerchantRef merchant) {
      return merchant(ColorMerchantVO.from(merchant));
    }

    /**
     * @autogenerated EntityGenerator
     * @param name
     * @return
     */
    public ColorBuilder nameValue(final String name) {
      return name(ColorNameVO.from(name));
    }

    /**
     * @autogenerated EntityGenerator
     * @param uid
     * @return
     */
    public ColorBuilder uidValue(final String uid) {
      return uid(ColorUidVO.from(uid));
    }

    /**
     * @autogenerated EntityGenerator
     * @param version
     * @return
     */
    public ColorBuilder versionValue(final Integer version) {
      return version(ColorVersionVO.from(version));
    }
  }

  /**
   * El merchant de color
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private ColorMerchantVO merchant = ColorMerchantVO.empty();

  /**
   * El name de color
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private ColorNameVO name;

  /**
   * A number to identify the db record
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private ColorUidVO uid;

  /**
   * Campo con el n√∫mero de version de color para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private ColorVersionVO version = ColorVersionVO.empty();

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getMerchantReferenceValue() {
    return getMerchant().getReferenceValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<MerchantRef> getMerchantValue() {
    return getMerchant().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getNameValue() {
    return getName().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getUidValue() {
    return getUid().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Color withEmptyMerchant() {
    return withMerchant(ColorMerchantVO.empty());
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Color withEmptyVersion() {
    return withVersion(ColorVersionVO.empty());
  }

  /**
   * @autogenerated EntityGenerator
   * @param merchant
   * @return
   */
  public Color withMerchantReferenceValue(final String merchant) {
    return withMerchant(ColorMerchantVO.fromReference(merchant));
  }

  /**
   * @autogenerated EntityGenerator
   * @param merchant
   * @return
   */
  public Color withMerchantReferenceValue(final Optional<String> merchant) {
    return merchant.isPresent() ? withMerchant(ColorMerchantVO.fromReference(merchant.get()))
        : withEmptyMerchant();
  }

  /**
   * @autogenerated EntityGenerator
   * @param merchant
   * @return
   */
  public Color withMerchantValue(final MerchantRef merchant) {
    return withMerchant(ColorMerchantVO.from(merchant));
  }

  /**
   * @autogenerated EntityGenerator
   * @param merchant
   * @return
   */
  public Color withMerchantValue(final Optional<MerchantRef> merchant) {
    return merchant.isPresent() ? withMerchant(ColorMerchantVO.from(merchant.get()))
        : withEmptyMerchant();
  }

  /**
   * @autogenerated EntityGenerator
   * @param name
   * @return
   */
  public Color withNameValue(final String name) {
    return withName(ColorNameVO.from(name));
  }

  /**
   * @autogenerated EntityGenerator
   * @param uid
   * @return
   */
  public Color withUidValue(final String uid) {
    return withUid(ColorUidVO.from(uid));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Color withVersionValue(final Integer version) {
    return withVersion(ColorVersionVO.from(version));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Color withVersionValue(final Optional<Integer> version) {
    return version.isPresent() ? withVersion(ColorVersionVO.from(version.get()))
        : withEmptyVersion();
  }
}
