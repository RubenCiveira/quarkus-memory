package org.acme.features.market.color.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import org.acme.common.algorithms.Slider;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.model.Color;

class ColorSlider extends Slider<Color> {

  /**
   * @autogenerated SlideGenerator
   */
  private final ColorCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final ColorFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<ColorFilter, ColorCursor, Iterator<Color>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  ColorSlider(final Iterator<Color> multi, final int limit,
      final BiFunction<ColorFilter, ColorCursor, Iterator<Color>> gateway, final ColorFilter filter,
      final ColorCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param colors
   * @param limit
   * @return
   */
  @Override
  public Iterator<Color> next(List<Color> colors, int limit) {
    Color last = colors.get(colors.size() - 1);
    ColorCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
