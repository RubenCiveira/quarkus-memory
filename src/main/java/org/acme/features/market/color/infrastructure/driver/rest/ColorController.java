package org.acme.features.market.color.infrastructure.driver.rest;

import java.util.List;
import java.util.Optional;

import org.acme.common.rest.CurrentRequest;
import org.acme.common.security.Actor;
import org.acme.common.security.Connection;
import org.acme.features.market.color.application.interaction.ColorDto;
import org.acme.features.market.color.application.interaction.command.ColorCreateCommand;
import org.acme.features.market.color.application.interaction.command.ColorDeleteCommand;
import org.acme.features.market.color.application.interaction.command.ColorUpdateCommand;
import org.acme.features.market.color.application.interaction.query.ColorListQuery;
import org.acme.features.market.color.application.interaction.query.ColorRetrieveQuery;
import org.acme.features.market.color.application.interaction.result.ColorCreateResult;
import org.acme.features.market.color.application.interaction.result.ColorDeleteResult;
import org.acme.features.market.color.application.interaction.result.ColorListResult;
import org.acme.features.market.color.application.interaction.result.ColorRetrieveResult;
import org.acme.features.market.color.application.interaction.result.ColorUpdateResult;
import org.acme.features.market.color.application.usecase.CreateColorUsecase;
import org.acme.features.market.color.application.usecase.DeleteColorUsecase;
import org.acme.features.market.color.application.usecase.ListColorUsecase;
import org.acme.features.market.color.application.usecase.RetrieveColorUsecase;
import org.acme.features.market.color.application.usecase.UpdateColorUsecase;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.model.ColorReference;
import org.acme.features.market.merchant.domain.model.MerchantReference;
import org.acme.generated.openapi.api.ColorApi;
import org.acme.generated.openapi.model.Color;
import org.acme.generated.openapi.model.ColorList;
import org.acme.generated.openapi.model.ColorListNextOffset;
import org.acme.generated.openapi.model.MerchantRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ColorController implements ColorApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final CreateColorUsecase create;

  /**
   * Color
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DeleteColorUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ListColorUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RetrieveColorUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UpdateColorUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param color
   * @return
   */
  @Override
  public Response colorApiCreate(Color color) {
    Actor actor = currentRequest.getActor();
    Connection connection = currentRequest.getConnection();
    ColorDto dto = toDomainModel(color);
    ColorCreateResult result = create
        .create(ColorCreateCommand.builder().actor(actor).connection(connection).dto(dto).build());
    return currentRequest.response(result.getColor().thenApply(res -> res.map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response colorApiDelete(final String uid) {
    Actor actor = currentRequest.getActor();
    Connection connection = currentRequest.getConnection();
    ColorDeleteResult result = delete.delete(ColorDeleteCommand.builder().actor(actor)
        .connection(connection).reference(ColorReference.of(uid)).build());
    return currentRequest.response(result.getColor().thenApply(res -> res.map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param uids
   * @param search
   * @param merchant
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response colorApiList(final String uid, final List<String> uids, final String search,
      final String merchant, final Integer limit, final String sinceUid) {
    ColorFilter.ColorFilterBuilder filter = ColorFilter.builder();
    ColorCursor.ColorCursorBuilder cursor = ColorCursor.builder();
    cursor = cursor.limit(limit);
    cursor = cursor.sinceUid(sinceUid);
    filter = filter.uid(uid);
    filter = filter.uids(uids);
    filter = filter.search(search);
    if (null != merchant) {
      filter = filter.merchant(MerchantReference.of(merchant));
    }
    Actor actor = currentRequest.getActor();
    Connection connection = currentRequest.getConnection();
    ColorListResult result = list.list(ColorListQuery.builder().actor(actor).connection(connection)
        .filter(filter.build()).cursor(cursor.build()).build());
    return currentRequest.response(result.getColors()
        .thenApply(colors -> new ColorList().content(toApiModel(colors)).next(next(colors))));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response colorApiRetrieve(final String uid) {
    Actor actor = currentRequest.getActor();
    Connection connection = currentRequest.getConnection();
    ColorRetrieveResult result = retrieve.retrieve(ColorRetrieveQuery.builder().actor(actor)
        .connection(connection).reference(ColorReference.of(uid)).build());
    return currentRequest.response(result.getColor().thenApply(res -> res.map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param color
   * @return
   */
  @Override
  public Response colorApiUpdate(final String uid, final Color color) {
    Actor actor = currentRequest.getActor();
    Connection connection = currentRequest.getConnection();
    ColorDto dto = toDomainModel(color);
    ColorUpdateResult result = update.update(ColorUpdateCommand.builder().actor(actor)
        .connection(connection).dto(dto).reference(ColorReference.of(uid)).build());
    return currentRequest.response(result.getColor().thenApply(res -> res.map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param list
   * @return
   */
  private ColorListNextOffset next(List<ColorDto> list) {
    if (list.isEmpty()) {
      return null;
    } else {
      ColorListNextOffset next = new ColorListNextOffset();
      ColorDto last = list.get(list.size() - 1);
      next.setSinceUid(last.getUid());
      return next;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param colors
   * @return
   */
  private List<Color> toApiModel(List<ColorDto> colors) {
    return colors.stream().map(this::toApiModel).toList();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private Color toApiModel(ColorDto dto) {
    Color color = new Color();
    color.setUid(dto.getUid());
    color.setName(dto.getName());
    color.setMerchant(new MerchantRef().$ref(dto.getMerchant()));
    color.setVersion(dto.getVersion());
    return color;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param color
   * @return
   */
  private ColorDto toDomainModel(Color color) {
    return ColorDto.builder().uid(color.getUid()).name(color.getName())
        .merchant(Optional.ofNullable(color.getMerchant()).map(MerchantRef::get$Ref).orElse(null))
        .version(color.getVersion()).build();
  }
}
