package org.acme.features.market.color.application.interaction;

import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.valueobject.ColorNameVO;
import org.acme.features.market.color.domain.model.valueobject.ColorUidVO;
import org.acme.features.market.color.domain.model.valueobject.ColorVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class ColorDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<ColorDto, Color>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid().getValue(), "name",
      (target, source) -> target.name = source == null ? null : source.getName().getValue(),
      "version", (target, source) -> target.version =
          source == null ? null : source.getVersion().getValue().orElse(null));

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<ColorDto>> toHide = Map.of("uid", dto -> dto.uid = null,
      "name", dto -> dto.name = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param color The entity with the values
   * @return A dto with the entity data
   */
  public static ColorDto from(final Color color) {
    return ColorDto.builder().uid(color.getUid().getValue()).name(color.getName().getValue())
        .version(color.getVersion().getValue().orElse(null)).build();
  }

  /**
   * El name de color
   *
   * @autogenerated EntityGenerator
   */
  private String name;

  /**
   * A number to identify the db record
   *
   * @autogenerated EntityGenerator
   */
  private String uid;

  /**
   * Campo con el n√∫mero de version de color para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  private Integer version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param color The field to hide
   */
  public void fix(final String field, final Color color) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, color);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fix(final String field) {
    fix(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hide(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @return The entity param with the new values
   */
  public Color.ColorBuilder toEntityBuilder() {
    return Color.builder().uid(ColorUidVO.from(uid)).name(ColorNameVO.from(name))
        .version(ColorVersionVO.from(version));
  }
}
