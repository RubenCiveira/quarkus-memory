package org.acme.features.market.color.application.interaction;

import java.util.Map;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.valueobject.ColorMerchantVO;
import org.acme.features.market.color.domain.model.valueobject.ColorNameVO;
import org.acme.features.market.color.domain.model.valueobject.ColorUidVO;
import org.acme.features.market.color.domain.model.valueobject.ColorVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class ColorDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<ColorDto, Color>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid(), "name",
      (target, source) -> target.name = source == null ? null : source.getName(), "merchant",
      (target, source) -> target.merchant = source == null ? null : source.getMerchant(), "version",
      (target, source) -> target.version = source == null ? null : source.getVersion());

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<ColorDto>> toHide =
      Map.of("uid", dto -> dto.uid = null, "name", dto -> dto.name = null, "merchant",
          dto -> dto.merchant = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param color The entity with the values
   * @return A dto with the entity data
   */
  public static ColorDto from(final Color color) {
    return ColorDto.builder().uid(color.getUid()).name(color.getName())
        .merchant(color.getMerchant()).version(color.getVersion()).build();
  }

  /**
   * @autogenerated EntityGenerator
   */
  private ColorMerchantVO merchant;

  /**
   * @autogenerated EntityGenerator
   */
  private ColorNameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  private ColorUidVO uid;

  /**
   * @autogenerated EntityGenerator
   */
  private ColorVersionVO version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param color The field to hide
   */
  public void fixField(final String field, final Color color) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, color);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fixField(final String field) {
    fixField(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hideField(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @param original
   * @return The entity param with the new values
   */
  public Color.ColorBuilder toEntityBuilder(final Optional<Color> original) {
    return Color.builder().uid(uidOrDefault(original)).name(nameOrDefault(original))
        .merchant(merchantOrDefault(original)).version(versionOrDefault(original));
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private ColorMerchantVO merchantOrDefault(final Optional<Color> original) {
    return null == merchant ? original.map(Color::getMerchant).orElse(null) : merchant;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private ColorNameVO nameOrDefault(final Optional<Color> original) {
    return null == name ? original.map(Color::getName).orElse(null) : name;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private ColorUidVO uidOrDefault(final Optional<Color> original) {
    return null == uid ? original.map(Color::getUid).orElse(null) : uid;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private ColorVersionVO versionOrDefault(final Optional<Color> original) {
    return null == version ? original.map(Color::getVersion).orElse(null) : version;
  }
}
