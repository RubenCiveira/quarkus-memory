package org.acme.features.market.color.application.usecase.create;

import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.color.application.ColorDto;
import org.acme.features.market.color.application.service.ColorsVisibilityService;
import org.acme.features.market.color.domain.Colors;
import org.acme.features.market.color.domain.gateway.ColorCacheGateway;
import org.acme.features.market.color.domain.gateway.ColorWriteRepositoryGateway;
import org.acme.features.market.color.domain.model.Color;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreateColorUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Colors aggregate;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final ColorCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<ColorCreateAllowPipelineEvent> createAllow;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final ColorWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final ColorsVisibilityService visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    ColorCreateAllowPipelineEvent base =
        ColorCreateAllowPipelineEvent.build(query, true, "Allowed by default");
    createAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public ColorDto create(final ColorCreateCommand query) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    ColorDto dto = visibility.copyWithFixed(query, query.getDto());
    Color entity = aggregate.initialize(dto.toEntityBuilder(Optional.empty()));
    Color created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUidValue()));
    cache.update(created);
    return visibility.copyWithHidden(query, created);
  }
}
