package org.acme.features.market.color.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.color.application.allow.ColorCreateAllow;
import org.acme.features.market.color.application.interaction.ColorDto;
import org.acme.features.market.color.application.interaction.command.ColorCreateCommand;
import org.acme.features.market.color.application.interaction.query.ColorAllowQuery;
import org.acme.features.market.color.application.interaction.result.ColorCreateResult;
import org.acme.features.market.color.application.usecase.service.ColorsVisibilityService;
import org.acme.features.market.color.domain.Colors;
import org.acme.features.market.color.domain.gateway.ColorWriteRepositoryGateway;
import org.acme.features.market.color.domain.model.Color;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreateColorUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Colors aggregate;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<ColorCreateAllow> createAllow;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final ColorWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final ColorsVisibilityService visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public ColorCreateAllow allow(final ColorAllowQuery query) {
    ColorCreateAllow base = ColorCreateAllow.build(true, "Allowed by default");
    createAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public ColorCreateResult create(final ColorCreateCommand query) {
    CompletionStage<Optional<Color>> create = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.copyWithFixed(query, query.getDto())
          .thenCompose(builder -> aggregate.initialize(builder.toEntityBuilder(Optional.empty()))
              .thenCompose(colorEntity -> createAndVerify(query, colorEntity)));
    });
    return ColorCreateResult.builder().command(query)
        .color(create.thenCompose(color -> mapEntity(query, color))).build();
  }

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  private ColorCreateAllow allow(final ColorCreateCommand query) {
    return allow(ColorAllowQuery.builder().build(query));
  }

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param colorEntity
   * @return
   */
  private CompletionStage<Optional<Color>> createAndVerify(final ColorCreateCommand query,
      final Color colorEntity) {
    return gateway.create(colorEntity,
        created -> visibility.checkVisibility(query, created.getUidValue()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opcolor
   * @return The slide with some values
   */
  private CompletionStage<Optional<ColorDto>> mapEntity(final ColorCreateCommand command,
      final Optional<Color> opcolor) {
    return opcolor.map(color -> visibility.copyWithHidden(command, color).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
