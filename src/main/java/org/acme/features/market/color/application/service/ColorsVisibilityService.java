package org.acme.features.market.color.application.service;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.features.market.color.application.ColorDto;
import org.acme.features.market.color.application.service.event.ColorFixedFieldsPipelineStageEvent;
import org.acme.features.market.color.application.service.event.ColorHiddenFieldsPipelineStageEvent;
import org.acme.features.market.color.application.service.event.ColorVisibilityQueryPipelineStageEvent;
import org.acme.features.market.color.application.service.event.ColorVisibleContentPipelineStageEvent;
import org.acme.features.market.color.domain.Colors;
import org.acme.features.market.color.domain.gateway.ColorCacheGateway;
import org.acme.features.market.color.domain.gateway.ColorCached;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.gateway.ColorReadRepositoryGateway;
import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.ColorRef;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ColorsVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Colors aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ColorCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ColorReadRepositoryGateway colorReadRepositoryGateway;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorFixedFieldsPipelineStageEvent> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorHiddenFieldsPipelineStageEvent> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorVisibilityQueryPipelineStageEvent> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorVisibleContentPipelineStageEvent> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ColorsFormulaService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MerchantsVisibilityService merchantsVisibilityService;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Boolean> checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).thenApply(Optional::isPresent);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<ColorDto> copyWithFixed(Interaction prev, Color original,
      ColorDto source) {
    return visiblesReferences(prev, source)
        .thenCompose(dto -> fieldsToFix(prev, original).getFixed().thenApply(fixeds -> {
          fixeds.forEach(field -> dto.fixField(field, original));
          return dto;
        })).thenCompose(fixed -> formula.copyWithFormulas(prev, original, fixed));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<ColorDto> copyWithFixed(Interaction prev, ColorDto source) {
    return visiblesReferences(prev, source)
        .thenCompose(dto -> fieldsToFix(prev).getFixed().thenApply(fixeds -> {
          fixeds.forEach(field -> dto.fixField(field));
          return dto;
        })).thenCompose(fixed -> formula.copyWithFormulas(prev, fixed));
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return The input dto with hidden values
   */
  public CompletionStage<ColorDto> copyWithHidden(Interaction prev, Color color) {
    return fieldsToHide(prev, color).getHidden().thenApply(hidden -> {
      ColorDto target = ColorDto.from(color);
      hidden.forEach(target::hideField);
      return target;
    });
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public ColorFixedFieldsPipelineStageEvent fieldsToFix(Interaction prev) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden().thenApply(hidden -> {
      Set<String> set = new HashSet<>(aggregate.calcultadFields());
      set.addAll(hidden);
      return set;
    });
    ColorFixedFieldsPipelineStageEvent value =
        ColorFixedFieldsPipelineStageEvent.builder().fixed(fields).interaction(prev).build();
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return initialsFixFields
   */
  public ColorFixedFieldsPipelineStageEvent fieldsToFix(Interaction prev, ColorRef color) {
    CompletionStage<Set<String>> fields = fieldsToFix(prev).getFixed()
        .thenCombine(fieldsToHide(prev, color).getHidden(), (set1, set2) -> {
          Set<String> set = new HashSet<>(set1);
          set.addAll(set2);
          return set;
        });
    ColorFixedFieldsPipelineStageEvent value = ColorFixedFieldsPipelineStageEvent.builder()
        .fixed(fields).color(color).interaction(prev).build();
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public ColorHiddenFieldsPipelineStageEvent fieldsToHide(Interaction prev) {
    CompletionStage<Set<String>> fields = CompletableFuture.completedFuture(Set.of());
    ColorHiddenFieldsPipelineStageEvent value =
        ColorHiddenFieldsPipelineStageEvent.builder().hidden(fields).interaction(prev).build();
    fireHide.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return initialsHideFields
   */
  public ColorHiddenFieldsPipelineStageEvent fieldsToHide(Interaction prev, ColorRef color) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden();
    ColorHiddenFieldsPipelineStageEvent value = ColorHiddenFieldsPipelineStageEvent.builder()
        .hidden(fields).color(color).interaction(prev).build();
    fireHide.fire(value);
    return value;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<ColorCached> listCachedVisibles(Interaction prev, ColorFilter filter,
      ColorCursor cursor) {
    return applyPreVisibilityFilter(prev, filter)
        .thenCompose(visfilter -> cache.retrieve(visfilter, cursor).thenCompose(cached -> {
          if (cached.isPresent()) {
            return CompletableFuture.completedStage(cached.get());
          } else {
            return queryItems(prev, filter, cursor).thenApply(values -> {
              cache.store(filter, cursor, values);
              return ColorCached.builder().value(values).since(OffsetDateTime.now()).build();
            });
          }
        }));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<List<Color>> listVisibles(Interaction prev, ColorFilter filter,
      ColorCursor cursor) {
    return applyPreVisibilityFilter(prev, filter)
        .thenCompose(visfilter -> queryItems(prev, visfilter, cursor));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<ColorCached> retrieveCachedVisible(Interaction prev, String uid) {
    return applyPreVisibilityFilter(prev, ColorFilter.builder().uid(uid).build())
        .thenCompose(filter -> {
          filter.setUid(uid);
          ColorCursor cursor = ColorCursor.builder().limit(1).build();
          return cache.retrieve(filter, cursor).thenCompose(cached -> {
            if (cached.isPresent()) {
              return CompletableFuture.completedStage(cached.get());
            } else {
              return queryItem(prev, uid, filter).thenApply(value -> {
                List<Color> values = value.map(List::of).orElseGet(List::of);
                cache.store(filter, cursor, values);
                return ColorCached.builder().value(values).since(OffsetDateTime.now()).build();
              });
            }
          });
        });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Optional<Color>> retrieveVisible(Interaction prev, String uid) {
    return applyPreVisibilityFilter(prev, ColorFilter.builder().uid(uid).build())
        .thenCompose(filter -> queryItem(prev, uid, filter));
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private CompletionStage<ColorFilter> applyPreVisibilityFilter(Interaction prev,
      ColorFilter filter) {
    ColorVisibilityQueryPipelineStageEvent visible = ColorVisibilityQueryPipelineStageEvent
        .builder().filter(CompletableFuture.completedFuture(filter)).interaction(prev).build();
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param colorRefs The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<List<Color>> evaluatePostVisibility(Interaction prev,
      List<Color> colorRefs) {
    ColorVisibleContentPipelineStageEvent list = ColorVisibleContentPipelineStageEvent.builder()
        .visibles(CompletableFuture.completedFuture(new ArrayList<>(colorRefs))).interaction(prev)
        .build();
    fireVisibleList.fire(list);
    return list.getVisibles();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param colorRef The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<Optional<Color>> evaluatePostVisibility(Interaction prev,
      Color colorRef) {
    return evaluatePostVisibility(prev, List.of(colorRef))
        .thenApply(list -> list.isEmpty() ? Optional.empty() : Optional.of(list.get(0)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<Optional<Color>> queryItem(Interaction prev, String uid,
      ColorFilter filter) {
    return colorReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .thenCompose(stored -> stored.map(retrieved -> evaluatePostVisibility(prev, retrieved))
            .orElseGet(() -> CompletableFuture.completedStage(Optional.empty())));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<List<Color>> queryItems(Interaction prev, ColorFilter filter,
      ColorCursor cursor) {
    return colorReadRepositoryGateway.list(filter, cursor).thenCompose(
        slide -> slide.filterAndFillAgain(values -> evaluatePostVisibility(prev, values)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<ColorDto> visiblesReferences(Interaction prev, ColorDto source) {
    List<CompletionStage<Boolean>> related = new ArrayList<>();
    if (null != source.getMerchant()) {
      source.getMerchant().getReferenceValue()
          .ifPresent(ref -> related.add(merchantsVisibilityService.checkVisibility(prev, ref)));
    }
    return CompletableFuture.allOf(related.toArray(new CompletableFuture[0]))
        .thenApply(_void -> source);
  }
}
