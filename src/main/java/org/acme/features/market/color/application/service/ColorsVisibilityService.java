package org.acme.features.market.color.application.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotFoundException;
import org.acme.features.market.color.application.ColorDto;
import org.acme.features.market.color.application.service.proposal.ColorFixedFieldsProposal;
import org.acme.features.market.color.application.service.proposal.ColorHiddenFieldsProposal;
import org.acme.features.market.color.application.service.proposal.ColorVisibilityQueryProposal;
import org.acme.features.market.color.application.service.proposal.ColorVisibleContentProposal;
import org.acme.features.market.color.domain.Colors;
import org.acme.features.market.color.domain.gateway.ColorCacheGateway;
import org.acme.features.market.color.domain.gateway.ColorCached;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.gateway.ColorReadRepositoryGateway;
import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.ColorRef;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ColorsVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Colors aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ColorCacheGateway cache;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ColorReadRepositoryGateway colorReadRepositoryGateway;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorFixedFieldsProposal> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorHiddenFieldsProposal> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorVisibilityQueryProposal> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorVisibleContentProposal> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ColorsCalculatorService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MerchantsVisibilityService merchantsVisibilityService;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return listVisibles(prev, ColorFilter.builder().uids(uids).build(),
        ColorCursor.builder().build()).isEmpty();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public ColorDto copyWithFixed(Interaction prev, ColorDto source, Color original) {
    ColorDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(field -> withReferences.fixField(field, original));
    return formula.copyWithFormulas(prev, withReferences, original);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public ColorDto copyWithFixed(Interaction prev, ColorDto source) {
    ColorDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(field -> withReferences.fixField(field));
    return formula.copyWithFormulas(prev, withReferences);
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return The input dto with hidden values
   */
  public ColorDto copyWithHidden(Interaction prev, Color color) {
    ColorDto target = ColorDto.from(color);
    fieldsToHide(prev, color).forEach(target::hideField);
    return target;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.calcultadFields());
    ColorFixedFieldsProposal value =
        ColorFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, ColorRef color) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, color));
    fields.addAll(aggregate.calcultadFields());
    ColorFixedFieldsProposal value =
        ColorFixedFieldsProposal.builder().fields(fields).color(color).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    ColorHiddenFieldsProposal value =
        ColorHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, ColorRef color) {
    Set<String> fields = new HashSet<>();
    ColorHiddenFieldsProposal value =
        ColorHiddenFieldsProposal.builder().fields(fields).color(color).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public ColorCached listCachedVisibles(Interaction prev, ColorFilter filter, ColorCursor cursor) {
    ColorFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<Color> listVisibles(Interaction prev, ColorFilter filter, ColorCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public ColorCached retrieveCachedVisible(Interaction prev, String uid) {
    ColorCursor cursor = ColorCursor.builder().limit(1).build();
    ColorFilter visibleFilter =
        applyPreVisibilityFilter(prev, ColorFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<Color> list = retrieveVisible(prev, uid).<List<Color>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<Color> retrieveVisible(Interaction prev, String uid) {
    ColorFilter filter = applyPreVisibilityFilter(prev, ColorFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private ColorFilter applyPreVisibilityFilter(Interaction prev, ColorFilter filter) {
    ColorVisibilityQueryProposal visible =
        ColorVisibilityQueryProposal.builder().filter(filter).interaction(prev).build();
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param colorRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, Color colorRef) {
    ColorVisibleContentProposal accesible = ColorVisibleContentProposal.builder().visible(true)
        .entity(colorRef).interaction(prev).build();
    fireVisibleList.fire(accesible);
    return accesible.getVisible();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<Color> queryItem(Interaction prev, String uid, ColorFilter filter) {
    return colorReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<Color> queryItems(Interaction prev, ColorFilter filter, ColorCursor cursor) {
    List<Color> list = new ArrayList<>();
    Iterator<Color> slide = colorReadRepositoryGateway.list(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private ColorDto visiblesReferences(Interaction prev, ColorDto source) {
    if (null != source.getMerchant()) {
      source.getMerchant().getReferenceValue().ifPresent(ref -> {
        boolean visible = merchantsVisibilityService.checkVisibility(prev, ref);
        if (!visible) {
          throw new NotFoundException("No merchant - " + ref);
        }
      });
    }
    return source;
  }
}
