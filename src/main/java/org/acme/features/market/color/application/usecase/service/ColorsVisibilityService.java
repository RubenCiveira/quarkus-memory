package org.acme.features.market.color.application.usecase.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.features.market.color.application.interaction.ColorDto;
import org.acme.features.market.color.application.interaction.visibility.ColorFixedFields;
import org.acme.features.market.color.application.interaction.visibility.ColorHiddenFields;
import org.acme.features.market.color.application.interaction.visibility.ColorVisibilityQuery;
import org.acme.features.market.color.application.interaction.visibility.ColorVisibleContent;
import org.acme.features.market.color.domain.Colors;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.gateway.ColorReadRepositoryGateway;
import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.ColorRef;
import org.acme.features.market.merchant.application.usecase.service.MerchantsVisibilityService;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ColorsVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Colors aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final ColorReadRepositoryGateway colorReadRepositoryGateway;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorFixedFields> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorHiddenFields> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorVisibilityQuery> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<ColorVisibleContent> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MerchantsVisibilityService merchantsVisibilityService;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Boolean> checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).thenApply(Optional::isPresent);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<ColorDto> copyWithFixed(Interaction prev, Color original,
      ColorDto source) {
    return visiblesReferences(prev, source)
        .thenCompose(dto -> fieldsToFix(prev, original).getFixed().thenApply(fixeds -> {
          fixeds.forEach(field -> dto.fixField(field, original));
          return dto;
        }));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<ColorDto> copyWithFixed(Interaction prev, ColorDto source) {
    return visiblesReferences(prev, source)
        .thenCompose(dto -> fieldsToFix(prev).getFixed().thenApply(fixeds -> {
          fixeds.forEach(field -> dto.fixField(field));
          return dto;
        }));
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return The input dto with hidden values
   */
  public CompletionStage<ColorDto> copyWithHidden(Interaction prev, Color color) {
    return fieldsToHide(prev, color).getHidden().thenApply(hidden -> {
      ColorDto target = ColorDto.from(color);
      hidden.forEach(target::hideField);
      return target;
    });
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public ColorFixedFields fieldsToFix(Interaction prev) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden().thenApply(hidden -> {
      Set<String> set = new HashSet<>(aggregate.calcultadFields());
      set.addAll(hidden);
      return set;
    });
    ColorFixedFields value = ColorFixedFields.builder().fixed(fields).build(prev);
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return initialsFixFields
   */
  public ColorFixedFields fieldsToFix(Interaction prev, ColorRef color) {
    CompletionStage<Set<String>> fields = fieldsToFix(prev).getFixed()
        .thenCombine(fieldsToHide(prev, color).getHidden(), (set1, set2) -> {
          Set<String> set = new HashSet<>(set1);
          set.addAll(set2);
          return set;
        });
    ColorFixedFields value = ColorFixedFields.builder().fixed(fields).color(color).build(prev);
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public ColorHiddenFields fieldsToHide(Interaction prev) {
    CompletionStage<Set<String>> fields = CompletableFuture.completedFuture(Set.of());
    ColorHiddenFields value = ColorHiddenFields.builder().hidden(fields).build(prev);
    fireHide.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param color
   * @return initialsHideFields
   */
  public ColorHiddenFields fieldsToHide(Interaction prev, ColorRef color) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden();
    ColorHiddenFields value = ColorHiddenFields.builder().hidden(fields).color(color).build(prev);
    fireHide.fire(value);
    return value;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<List<Color>> listVisibles(Interaction prev, ColorFilter filter,
      ColorCursor cursor) {
    return applyPreVisibilityFilter(prev, filter)
        .thenCompose(visfilter -> colorReadRepositoryGateway.list(visfilter, cursor)
            .filterAndFillAgain(values -> evaluatePostVisibility(prev, values)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Optional<Color>> retrieveVisible(Interaction prev, String uid) {
    return applyPreVisibilityFilter(prev, ColorFilter.builder().uid(uid).build())
        .thenCompose(filter -> colorReadRepositoryGateway.retrieve(uid, Optional.of(filter))
            .thenCompose(stored -> stored.map(retrieved -> evaluatePostVisibility(prev, retrieved))
                .orElseGet(() -> CompletableFuture.completedStage(Optional.empty()))));
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private CompletionStage<ColorFilter> applyPreVisibilityFilter(Interaction prev,
      ColorFilter filter) {
    ColorVisibilityQuery visible = ColorVisibilityQuery.builder()
        .filter(CompletableFuture.completedFuture(filter)).build(prev);
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param colorRefs The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<List<Color>> evaluatePostVisibility(Interaction prev,
      List<Color> colorRefs) {
    ColorVisibleContent list = ColorVisibleContent.builder()
        .visibles(CompletableFuture.completedFuture(new ArrayList<>(colorRefs))).build(prev);
    fireVisibleList.fire(list);
    return list.getVisibles();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param colorRef The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<Optional<Color>> evaluatePostVisibility(Interaction prev,
      Color colorRef) {
    return evaluatePostVisibility(prev, List.of(colorRef))
        .thenApply(list -> list.isEmpty() ? Optional.empty() : Optional.of(list.get(0)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<ColorDto> visiblesReferences(Interaction prev, ColorDto source) {
    List<CompletionStage<Boolean>> related = new ArrayList<>();
    if (null != source.getMerchant()) {
      source.getMerchant().getReferenceValue()
          .ifPresent(ref -> related.add(merchantsVisibilityService.checkVisibility(prev, ref)));
    }
    return CompletableFuture.allOf(related.toArray(new CompletableFuture[0]))
        .thenApply(_void -> source);
  }
}
