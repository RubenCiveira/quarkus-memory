package org.acme.features.market.color.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.acme.features.market.color.domain.gateway.ColorCacheGateway;
import org.acme.features.market.color.domain.gateway.ColorCached;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.model.Color;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequestScoped
@Slf4j
@RequiredArgsConstructor
public class ColorCacheGatewayAdapter implements ColorCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("color")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param color
   */
  @Override
  public void remove(final Color color) {
    log.trace("Invalidating color cache due to the removal of {}", color);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<ColorCached> retrieve(final ColorFilter filter, final ColorCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at color cache for the key {}", key);
    return cache.<String, ColorCached>get(key, k -> null).map(cached -> Optional.ofNullable(cached))
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param colors
   * @return
   */
  public ColorCached store(final ColorFilter filter, final ColorCursor cursor,
      final List<Color> colors) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache
        .<String, ColorCached>get(key,
            k -> ColorCached.builder().since(OffsetDateTime.now()).value(colors).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param color
   */
  @Override
  public void update(final Color color) {
    log.trace("Invalidating color cache due to the update of {}", color);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final ColorFilter filter, final ColorCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
