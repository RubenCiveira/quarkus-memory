package org.acme.features.market.color.infrastructure.repository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutionException;
import java.util.function.BiFunction;

import org.acme.common.action.Slide;
import org.acme.features.market.color.domain.gateway.ColorCursor;
import org.acme.features.market.color.domain.gateway.ColorFilter;
import org.acme.features.market.color.domain.model.Color;

class ColorSlice extends Slide<Color> {

  /**
   * @autogenerated SlideGenerator
   */
  private final CompletionStage<List<Color>> colors;

  /**
   * @autogenerated SlideGenerator
   */
  private final ColorCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final ColorFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<ColorFilter, ColorCursor, Slide<Color>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param limit
   * @param colors
   * @param gateway
   * @param filter
   * @param cursor
   */
  ColorSlice(final Optional<Integer> limit, final CompletionStage<List<Color>> colors,
      final BiFunction<ColorFilter, ColorCursor, Slide<Color>> gateway, final ColorFilter filter,
      final ColorCursor cursor) {
    super(limit);
    this.colors = colors;
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * color
   *
   * @autogenerated SlideGenerator
   * @return color
   */
  @Override
  public CompletionStage<List<Color>> get() {
    return colors;
  }

  /**
   * @autogenerated SlideGenerator
   * @param list
   * @param limit
   * @return
   */
  public Slide<Color> map(List<Color> list, int limit) {
    if (list.isEmpty()) {
      return this;
    } else {
      Color last = list.get(list.size() - 1);
      ColorCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
      return gateway.apply(this.filter, cr);
    }
  }

  /**
   * @autogenerated SlideGenerator
   * @param limit
   * @return
   */
  @Override
  public Slide<Color> next(int limit) {
    try {
      return colors.thenApply(list -> map(list, limit)).toCompletableFuture().get();
    } catch (InterruptedException | ExecutionException e) {
      throw new IllegalStateException("Unable to complete querying ", e);
    }
  }
}
