package org.acme.features.market.color.application.usecase.update;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.color.application.ColorDto;
import org.acme.features.market.color.application.service.ColorsVisibilityService;
import org.acme.features.market.color.application.usecase.update.event.ColorUpdateAllowPipelineStageEvent;
import org.acme.features.market.color.domain.Colors;
import org.acme.features.market.color.domain.gateway.ColorCacheGateway;
import org.acme.features.market.color.domain.gateway.ColorWriteRepositoryGateway;
import org.acme.features.market.color.domain.model.Color;
import org.acme.features.market.color.domain.model.ColorRef;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.StatusCode;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Scope;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class UpdateColorUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Colors aggregate;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ColorCacheGateway cache;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ColorWriteRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Tracer tracer;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<ColorUpdateAllowPipelineStageEvent> updateAllow;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final ColorsVisibilityService visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query, final ColorRef reference) {
    Span startSpan = tracer.spanBuilder("color-update-allow-specific").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      ColorUpdateAllowPipelineStageEvent base = ColorUpdateAllowPipelineStageEvent.build(query,
          Optional.of(reference), true, "Allowed by default");
      updateAllow.fire(base);
      return base.getDetail().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("allowed", val.isAllowed());
          startSpan.setAttribute("reason", val.getDescription());
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    Span startSpan = tracer.spanBuilder("color-update-allow-generic").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      ColorUpdateAllowPipelineStageEvent base = ColorUpdateAllowPipelineStageEvent.build(query,
          Optional.empty(), true, "Allowed by default");
      updateAllow.fire(base);
      return base.getDetail().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("allowed", val.isAllowed());
          startSpan.setAttribute("reason", val.getDescription());
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<ColorUpdateResult> update(final ColorUpdateCommand command) {
    Span startSpan = tracer.spanBuilder("color-update").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Optional<Color>> updated =
          allow(command, command.getReference()).thenCompose(detail -> {
            if (!detail.isAllowed()) {
              throw new NotAllowedException(detail.getDescription());
            }
            return visibility.copyWithFixed(command, command.getDto())
                .thenCompose(builder -> visibility
                    .retrieveVisible(command, command.getReference().getUidValue())
                    .thenCompose(op -> saveIfIsPresent(op, builder)));
          });
      return updated.thenCompose(entity -> mapEntity(command, entity)).whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opcolor
   * @return The slide with some values
   */
  private CompletionStage<ColorUpdateResult> mapEntity(final ColorUpdateCommand command,
      final Optional<Color> opcolor) {
    Span startSpan = tracer.spanBuilder("color-map-updated-entity").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return opcolor
          .map(color -> visibility.copyWithHidden(command, color)
              .thenApply(visible -> ColorUpdateResult.builder().command(command)
                  .color(Optional.of(visible)).build()))
          .orElseGet(() -> CompletableFuture.completedStage(
              ColorUpdateResult.builder().command(command).color(Optional.empty()).build()))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param original
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletionStage<Optional<Color>> saveEntity(final Color original, final ColorDto dto) {
    Span startSpan = tracer.spanBuilder("color-run-updated-entity").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return aggregate.modify(original, dto.toEntityBuilder(Optional.of(original)))
          .thenCompose(color -> gateway.update(original, color))
          .thenCompose(updated -> cache.update(updated).thenApply(_ready -> Optional.of(updated)))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param result
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletionStage<Optional<Color>> saveIfIsPresent(final Optional<Color> result,
      final ColorDto dto) {
    Span startSpan = tracer.spanBuilder("color-load-to-update-if-present").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return result.map(original -> saveEntity(original, dto))
          .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }
}
