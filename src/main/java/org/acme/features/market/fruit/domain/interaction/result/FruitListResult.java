package org.acme.features.market.fruit.domain.interaction.result;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.acme.common.action.Interaction;
import org.acme.features.market.fruit.domain.interaction.FruitDto;
import org.acme.features.market.fruit.domain.interaction.query.FruitListQuery;
import org.acme.features.market.fruit.domain.model.Fruit;
import io.quarkus.runtime.annotations.RegisterForReflection;
import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.experimental.SuperBuilder;

@Data
@SuperBuilder(toBuilder = true)
@RegisterForReflection
@Builder(toBuilder = true)
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class FruitListResult {

    /**
     * A new dto with a result list
     *
     * @autogenerated EntityGenerator
     * @param prev The source interaction responsible of generating the dto
     * @param fruits The list with values
     * @return A new dto with a result list
     */
    public static FruitListResult from(final FruitListQuery prev, final List<Fruit> fruits) {
        return FruitListResult.builder().fruits(new ArrayList<>(fruits.stream().map(FruitDto::from).toList())).query(prev).build();
    }

    /**
     * A new dto with a result list
     *
     * @autogenerated EntityGenerator
     * @param prev The source interaction responsible of generating the dto
     * @param fruits The list with values
     * @return A new dto with a result list
     */
    public static FruitListResult fromDto(final FruitListQuery prev, final List<FruitDto> fruits) {
        return FruitListResult.builder().fruits(new ArrayList<>(fruits)).query(prev).build();
    }

    /**
     * The result content list
     *
     * @autogenerated EntityGenerator
     */
    @NonNull
    private final List<FruitDto> fruits;

    private final FruitListQuery query;

    /**
     * Add elements form another result list, until a limit of the other list
     *
     * @autogenerated EntityGenerator
     * @param next The list used to get aditional elements
     * @param limit The max number of the next list to be taken
     */
    public void append(final FruitListResult next, final int limit) {
        this.fruits.addAll(next.size() > limit ? next.getFruits().subList(0, limit) : next.getFruits());
    }

    /**
     * @autogenerated EntityGenerator
     * @return
     */
    public Optional<FruitListQuery> getQuery() {
        return Optional.ofNullable(query);
    }

    /**
     * true if the result list is empty
     *
     * @autogenerated EntityGenerator
     * @return true if the result list is empty
     */
    public boolean isEmpty() {
        return fruits.isEmpty();
    }

    /**
     * the number of elements of the list
     *
     * @autogenerated EntityGenerator
     * @return the number of elements of the list
     */
    public int size() {
        return fruits.size();
    }
}
