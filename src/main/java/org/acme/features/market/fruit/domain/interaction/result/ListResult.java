package org.acme.features.market.fruit.domain.interaction.result;

import java.util.ArrayList;
import java.util.List;

import org.acme.common.action.Interaction;
import org.acme.features.market.fruit.domain.interaction.FruitDto;
import org.acme.features.market.fruit.domain.model.Fruit;

import io.quarkus.runtime.annotations.RegisterForReflection;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;

@Data
@SuperBuilder(toBuilder = true)
@EqualsAndHashCode(callSuper = true, onlyExplicitlyIncluded = true)
@RegisterForReflection
public class ListResult extends Interaction {

  /**
   * A new dto with a result list
   *
   * @autogenerated EntityGenerator
   * @param prev The source interaction responsible of generating the dto
   * @param fruits The list with values
   * @return A new dto with a result list
   */
  public static ListResult from(final Interaction prev, final List<Fruit> fruits) {
    return ListResult.builder()
        .fruits(new ArrayList<>(fruits.stream().map(FruitDto::from).toList())).build(prev);
  }

  /**
   * A new dto with a result list
   *
   * @autogenerated EntityGenerator
   * @param prev The source interaction responsible of generating the dto
   * @param fruits The list with values
   * @return A new dto with a result list
   */
  public static ListResult fromDto(final Interaction prev, final List<FruitDto> fruits) {
    return ListResult.builder().fruits(new ArrayList<>(fruits)).build(prev);
  }

  /**
   * The result content list
   *
   * @autogenerated EntityGenerator
   */
  private final List<FruitDto> fruits;

  /**
   * Add elements form another result list, until a limit of the other list
   *
   * @autogenerated EntityGenerator
   * @param next The list used to get aditional elements
   * @param limit The max number of the next list to be taken
   */
  public void append(final ListResult next, final int limit) {
    this.fruits.addAll(next.size() > limit ? next.getFruits().subList(0, limit) : next.getFruits());
  }

  /**
   * true if the result list is empty
   *
   * @autogenerated EntityGenerator
   * @return true if the result list is empty
   */
  public boolean isEmpty() {
    return fruits.isEmpty();
  }

  /**
   * the number of elements of the list
   *
   * @autogenerated EntityGenerator
   * @return the number of elements of the list
   */
  public int size() {
    return fruits.size();
  }
}
