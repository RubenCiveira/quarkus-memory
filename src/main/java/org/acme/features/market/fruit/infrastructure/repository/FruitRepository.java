package org.acme.features.market.fruit.infrastructure.repository;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.function.Function;

import javax.sql.DataSource;

import org.acme.common.action.Slide;
import org.acme.common.exception.ConstraintException;
import org.acme.common.sql.OptimistLockException;
import org.acme.common.sql.SqlCommand;
import org.acme.common.sql.SqlConverter;
import org.acme.common.sql.SqlOperator;
import org.acme.common.sql.SqlParameterValue;
import org.acme.common.sql.SqlSchematicQuery;
import org.acme.common.sql.SqlTemplate;
import org.acme.features.market.fruit.domain.gateway.FruitCursor;
import org.acme.features.market.fruit.domain.gateway.FruitFilter;
import org.acme.features.market.fruit.domain.model.Fruit;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequiredArgsConstructor
@Slf4j
public class FruitRepository {

  /**
   * @autogenerated RepositoryJdbcGenerator
   */
  private final DataSource datasource;

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public CompletableFuture<Optional<Fruit>> create(Fruit entity) {
    return runCreate(entity, null);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  public CompletableFuture<Optional<Fruit>> create(Fruit entity,
      Function<Fruit, CompletableFuture<Boolean>> verifier) {
    return runCreate(entity, verifier);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public CompletableFuture<Fruit> delete(Fruit entity) {
    try (SqlTemplate template = new SqlTemplate(datasource)) {
      SqlCommand sq = template.createSqlCommand("delete from \"fruit\" where \"uid\" = :uid");
      sq.with("uid", SqlParameterValue.of(entity.getUidValue()));
      if (0 == sq.execute()) {
        throw new IllegalArgumentException("No delete from");
      }
      return CompletableFuture.completedFuture(entity);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public CompletableFuture<Boolean> exists(String uid, Optional<FruitFilter> filter) {
    return retrieve(uid, filter).thenApply(Optional::isPresent);
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param template
   * @param filter
   * @return
   */
  public SqlSchematicQuery<Fruit> filteredQuery(SqlTemplate template, FruitFilter filter) {
    SqlSchematicQuery<Fruit> sq = template.createSqlSchematicQuery("fruit");
    sq.select("uid", "name", "version");
    filter.getUid().ifPresent(uid -> {
      sq.where("uid", SqlOperator.EQ, SqlParameterValue.of(uid));
    });
    return sq;
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Slide<Fruit> list(FruitFilter filter, FruitCursor cursor) {
    try (SqlTemplate template = new SqlTemplate(datasource)) {
      SqlSchematicQuery<Fruit> sq = filteredQuery(template, filter);
      cursor.getSinceUid()
          .ifPresent(since -> sq.where("uid", SqlOperator.GT, SqlParameterValue.of(since)));
      sq.orderAsc("uid");
      return new FruitSlice(cursor.getLimit(),
          CompletableFuture.completedFuture(sq.query(converter()).limit(cursor.getLimit())),
          this::list, filter, cursor);
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param uid
   * @param filter
   * @return
   */
  public CompletableFuture<Optional<Fruit>> retrieve(String uid, Optional<FruitFilter> filter) {
    try (SqlTemplate template = new SqlTemplate(datasource)) {
      FruitFilter readyFilter = filter.map(val -> val.withUid(uid))
          .orElseGet(() -> FruitFilter.builder().uid(uid).build());
      SqlSchematicQuery<Fruit> sq = filteredQuery(template, readyFilter);
      return CompletableFuture.completedFuture(sq.query(converter()).one());
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @return
   */
  public CompletableFuture<Fruit> update(Fruit entity) {
    try (SqlTemplate template = new SqlTemplate(datasource)) {
      int version = entity.getVersionValue().orElse(0);
      SqlCommand sq = template.createSqlCommand(
          "update \"fruit\" set  \"name\" = :name, \"version\" = \"version\" + 1 where \"uid\" = :uid and \"version\" = :version");
      sq.with("uid", SqlParameterValue.of(entity.getUidValue()));
      sq.with("name", SqlParameterValue.of(entity.getNameValue()));
      sq.with("version", entity.getVersionValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      if (0 == sq.execute()) {
        throw new OptimistLockException();
      }
      return CompletableFuture.completedFuture(entity.withVersionValue(version + 1));
    }
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @return
   */
  private SqlConverter<Fruit> converter() {
    return (row) -> {
      try {
        return Optional.of(Fruit.builder().uidValue(row.getString(1)).nameValue(row.getString(2))
            .versionValue(row.getInt(3)).build());
      } catch (ConstraintException ce) {
        log.error("Unable to map data for {}", row.getString(1), ce);
        return Optional.empty();
      }
    };
  }

  /**
   * @autogenerated RepositoryJdbcGenerator
   * @param entity
   * @param verifier
   * @return
   */
  private CompletableFuture<Optional<Fruit>> runCreate(Fruit entity,
      Function<Fruit, CompletableFuture<Boolean>> verifier) {
    try (SqlTemplate template = new SqlTemplate(datasource)) {
      SqlCommand sq = template.createSqlCommand(
          "insert into \"fruit\" ( \"uid\", \"name\", \"version\") values ( :uid, :name, :version)");
      sq.with("uid", SqlParameterValue.of(entity.getUidValue()));
      sq.with("name", SqlParameterValue.of(entity.getNameValue()));
      sq.with("version", entity.getVersionValue().map(SqlParameterValue::of)
          .orElseGet(SqlParameterValue::ofNullInteger));
      if (0 == sq.execute()) {
        throw new IllegalArgumentException("No insert into");
      }
      return verifier == null ? CompletableFuture.completedFuture(Optional.of(entity))
          : verifier.apply(entity).thenCompose(exists -> {
            if (exists) {
              return CompletableFuture.completedFuture(Optional.of(entity));
            } else {
              template.createSqlCommand("delete from \"fruit\" where \"uid\" = :uid")
                  .with("uid", SqlParameterValue.of(entity.getUidValue())).execute();
              return CompletableFuture.completedFuture(Optional.empty());
            }
          });
    }
  }
}
