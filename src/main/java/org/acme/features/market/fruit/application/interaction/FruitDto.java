package org.acme.features.market.fruit.application.interaction;

import java.util.Map;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.fruit.domain.model.Fruit;
import org.acme.features.market.fruit.domain.model.valueobject.FruitNameVO;
import org.acme.features.market.fruit.domain.model.valueobject.FruitUidVO;
import org.acme.features.market.fruit.domain.model.valueobject.FruitVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@With
@Builder(toBuilder = true)
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class FruitDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<FruitDto, Fruit>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid(), "name",
      (target, source) -> target.name = source == null ? null : source.getName(), "version",
      (target, source) -> target.version = source == null ? null : source.getVersion());

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<FruitDto>> toHide = Map.of("uid", dto -> dto.uid = null,
      "name", dto -> dto.name = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param fruit The entity with the values
   * @return A dto with the entity data
   */
  public static FruitDto from(final Fruit fruit) {
    return FruitDto.builder().uid(fruit.getUid()).name(fruit.getName()).version(fruit.getVersion())
        .build();
  }

  /**
   * @autogenerated EntityGenerator
   */
  private FruitNameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  private FruitUidVO uid;

  /**
   * @autogenerated EntityGenerator
   */
  private FruitVersionVO version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param fruit The field to hide
   */
  public void fixField(final String field, final Fruit fruit) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, fruit);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fixField(final String field) {
    fixField(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hideField(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @param original
   * @return The entity param with the new values
   */
  public Fruit.FruitBuilder toEntityBuilder(final Optional<Fruit> original) {
    return Fruit.builder().uid(uidOrDefault(original)).name(nameOrDefault(original))
        .version(versionOrDefault(original));
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private FruitNameVO nameOrDefault(final Optional<Fruit> original) {
    return null == name ? original.map(Fruit::getName).orElse(null) : name;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private FruitUidVO uidOrDefault(final Optional<Fruit> original) {
    return null == uid ? original.map(Fruit::getUid).orElse(null) : uid;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private FruitVersionVO versionOrDefault(final Optional<Fruit> original) {
    return null == version ? original.map(Fruit::getVersion).orElse(null) : version;
  }
}
