package org.acme.features.market.fruit.infrastructure.driver.rest;

import java.util.ArrayList;

import org.acme.common.action.Interaction;
import org.acme.common.infrastructure.CurrentRequest;
import org.acme.common.security.Allow;
import org.acme.features.market.fruit.application.service.FruitsVisibilityService;
import org.acme.features.market.fruit.application.usecase.create.CreateFruitUsecase;
import org.acme.features.market.fruit.application.usecase.delete.DeleteFruitUsecase;
import org.acme.features.market.fruit.application.usecase.list.ListFruitUsecase;
import org.acme.features.market.fruit.application.usecase.retrieve.RetrieveFruitUsecase;
import org.acme.features.market.fruit.application.usecase.update.UpdateFruitUsecase;
import org.acme.generated.openapi.api.FruitAclApi;
import org.acme.generated.openapi.model.CommonAllow;
import org.acme.generated.openapi.model.FruitAclFields;
import org.acme.generated.openapi.model.FruitAclGenericAllows;
import org.acme.generated.openapi.model.FruitAclSpecificAllows;
import org.acme.generated.openapi.model.FruitGenericAcl;
import org.acme.generated.openapi.model.FruitSpecificAcl;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class FruitAclController implements FruitAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final CreateFruitUsecase create;

  /**
   * Fruit
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final DeleteFruitUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ListFruitUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RetrieveFruitUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final UpdateFruitUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response fruitApiContextualAcl(final String uid) {
    Interaction interaction = currentRequest.interaction();
    FruitSpecificAcl response = new FruitSpecificAcl();
    response.setAllows(new FruitAclSpecificAllows());
    response.setFields(new FruitAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response fruitApiGenericAcl() {
    Interaction interaction = currentRequest.interaction();
    FruitGenericAcl response = new FruitGenericAcl();
    response.setAllows(new FruitAclGenericAllows());
    response.setFields(new FruitAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    listAllows(response, interaction);
    createAllows(response, interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void createAllows(final FruitGenericAcl response, final Interaction query) {
    Allow detail = create.allow(query);
    response.getAllows()
        .setCreate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final FruitGenericAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final FruitSpecificAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void fixedFields(final FruitAclFields response, final Interaction query) {
    visibility.fieldsToFix(query).forEach(field -> response.getNoEditables().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void hiddenFields(final FruitAclFields response, final Interaction query) {
    visibility.fieldsToHide(query).forEach(field -> response.getNoVisibles().add(field));;
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void listAllows(final FruitGenericAcl response, final Interaction query) {
    Allow detail = list.allow(query);
    response.getAllows()
        .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final FruitGenericAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final FruitSpecificAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final FruitGenericAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final FruitSpecificAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }
}
