package org.acme.features.market.fruit.application.usecase.retrieve;

import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.fruit.application.service.FruitsVisibilityService;
import org.acme.features.market.fruit.domain.gateway.FruitCached;
import org.acme.features.market.fruit.domain.model.FruitRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveFruitUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<FruitRetrieveAllow> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public FruitRetrieveAllow allow(final Interaction query, final FruitRef reference) {
    FruitRetrieveAllow base =
        FruitRetrieveAllow.build(query, Optional.of(reference), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public FruitRetrieveAllow allow(final Interaction query) {
    FruitRetrieveAllow base =
        FruitRetrieveAllow.build(query, Optional.empty(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<FruitRetrieveResult> retrieve(final FruitRetrieveQuery query) {
    CompletionStage<FruitCached> result =
        allow(query, query.getReference()).getDetail().thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return visibility.retrieveCachedVisible(query, query.getReference().getUidValue());
        });
    return result.thenCompose(op -> this.mapEntity(query, op));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opfruit
   * @return The slide with some values
   */
  private CompletionStage<FruitRetrieveResult> mapEntity(final FruitRetrieveQuery query,
      final FruitCached opfruit) {
    return opfruit.first()
        .map(fruit -> visibility.copyWithHidden(query, fruit)
            .thenApply(fruitWithHidden -> FruitRetrieveResult.builder().interaction(query)
                .fruit(Optional.of(fruitWithHidden)).since(opfruit.getSince()).build()))
        .orElseGet(() -> CompletableFuture.completedFuture(FruitRetrieveResult.builder()
            .interaction(query).fruit(Optional.empty()).since(OffsetDateTime.now()).build()));
  }
}
