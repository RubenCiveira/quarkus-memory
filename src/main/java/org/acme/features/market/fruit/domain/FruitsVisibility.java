package org.acme.features.market.fruit.domain;

import java.util.Set;

import org.acme.common.action.Interaction;
import org.acme.features.market.fruit.domain.interaction.FruitDto;
import org.acme.features.market.fruit.domain.interaction.FruitFilter;
import org.acme.features.market.fruit.domain.interaction.result.FixedFieldsResult;
import org.acme.features.market.fruit.domain.interaction.result.HiddenFieldsResult;
import org.acme.features.market.fruit.domain.model.Fruit;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class FruitsVisibility {

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityTraitGenerator
   */
  private final Event<FixedFieldsResult> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityTraitGenerator
   */
  private final Event<HiddenFieldsResult> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityTraitGenerator
   */
  private final Event<FruitFilter> fireVisibleFilter;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityTraitGenerator
   * @param prev The source interaction
   * @param target The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public Fruit copyWithfixed(Interaction prev, Fruit target, FruitDto source) {
    fieldsToFix(prev).getFixed().forEach(field -> source.fix(field, target));
    source.fillEntity(target);
    return target;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityTraitGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public FixedFieldsResult fieldsToFix(Interaction prev) {
    FixedFieldsResult value = FixedFieldsResult.builder().fixed(Set.of()).build(prev);
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityTraitGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public HiddenFieldsResult fieldsToHide(Interaction prev) {
    HiddenFieldsResult value = HiddenFieldsResult.builder().hidden(Set.of()).build(prev);
    fireHide.fire(value);
    return value;
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityTraitGenerator
   * @param prev The source interaction
   * @param target The source interaction
   * @return The input dto with hidden values
   */
  public FruitDto hide(Interaction prev, FruitDto target) {
    fieldsToHide(prev).getHidden().forEach(target::hide);
    return target;
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityTraitGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  public FruitFilter visibleFilter(Interaction prev, FruitFilter filter) {
    fireVisibleFilter.fire(filter);
    return filter;
  }
}
