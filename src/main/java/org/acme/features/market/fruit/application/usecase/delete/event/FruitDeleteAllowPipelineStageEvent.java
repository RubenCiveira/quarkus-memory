package org.acme.features.market.fruit.application.usecase.delete.event;

import java.util.Optional;
import org.acme.common.action.Interaction;
import org.acme.common.security.Allow;
import org.acme.common.security.AllowPipelineStageEvent;
import org.acme.features.market.fruit.domain.model.FruitRef;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.experimental.SuperBuilder;

@Data
@SuperBuilder(toBuilder = true)
@EqualsAndHashCode(callSuper = true, onlyExplicitlyIncluded = true)
public class FruitDeleteAllowPipelineStageEvent extends AllowPipelineStageEvent {

  /**
   * @autogenerated EntityGenerator
   * @param query
   * @param reference
   * @param allowed
   * @return
   */
  public static FruitDeleteAllowPipelineStageEvent build(final Interaction query,
      final Optional<FruitRef> reference, final boolean allowed) {
    return build(query, reference, allowed, null);
  }

  /**
   * @autogenerated EntityGenerator
   * @param query
   * @param reference
   * @param allowed
   * @param reason
   * @return
   */
  public static FruitDeleteAllowPipelineStageEvent build(final Interaction query,
      final Optional<FruitRef> reference, final boolean allowed, final String reason) {
    return FruitDeleteAllowPipelineStageEvent.builder().query(query)
        .reference(reference.orElse(null))
        .detail(Allow.builder().allowed(allowed).description(reason).build()).build();
  }

  /**
   * @autogenerated EntityGenerator
   */
  private final FruitRef reference;

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String actionName() {
    return "delete";
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<FruitRef> getReference() {
    return Optional.ofNullable(reference);
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String resourceName() {
    return "fruit";
  }
}
