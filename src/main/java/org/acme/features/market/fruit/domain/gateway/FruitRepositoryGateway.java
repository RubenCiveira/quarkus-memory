package org.acme.features.market.fruit.domain.gateway;

import java.util.Optional;
import java.util.function.Function;
import org.acme.common.action.Slide;
import org.acme.features.market.fruit.domain.interaction.FruitCursor;
import org.acme.features.market.fruit.domain.interaction.FruitDto;
import org.acme.features.market.fruit.domain.interaction.FruitFilter;
import org.acme.features.market.fruit.domain.model.Fruit;
import io.smallrye.mutiny.Uni;

public interface FruitRepositoryGateway {

    /**
     * The slide with some values
     *
     * @autogenerated ListTraitGenerator
     * @param filter a filter to retrieve only matching values
     * @param cursor a cursor to order and skip
     * @return The slide with some values
     */
    public Uni<Slide<Fruit>> list(FruitFilter filter, FruitCursor cursor);

    /**
     * Retrieve one single value
     *
     * @autogenerated RetrieveTraitGenerator
     * @param filter a filter to retrieve only matching values
     * @return Retrieve one single value
     */
    public Uni<Optional<Fruit>> retrieve(FruitFilter filter);

    /**
     * Retrieve one single value
     *
     * @autogenerated CreateTraitGenerator
     * @param entity a filter to retrieve only matching values
     * @return Retrieve one single value
     */
    Uni<Optional<Fruit>> create(Fruit entity);
    

    /**
     * Retrieve one single value
     *
     * @autogenerated CreateTraitGenerator
     * @param entity a filter to retrieve only matching values
     * @return Retrieve one single value
     */
    Uni<Optional<Fruit>> update(String uid, Fruit entity);

    /**
     * Retrieve one single value
     *
     * @autogenerated CreateTraitGenerator
     * @param entity a filter to retrieve only matching values
     * @return Retrieve one single value
     */
    Uni<Optional<Fruit>> createAndVerify(Fruit initilize, 
        Function<Fruit, Boolean> verificator);
}
