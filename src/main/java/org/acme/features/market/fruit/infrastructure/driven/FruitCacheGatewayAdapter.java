package org.acme.features.market.fruit.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.acme.features.market.fruit.domain.gateway.FruitCacheGateway;
import org.acme.features.market.fruit.domain.gateway.FruitCached;
import org.acme.features.market.fruit.domain.gateway.FruitCursor;
import org.acme.features.market.fruit.domain.gateway.FruitFilter;
import org.acme.features.market.fruit.domain.model.Fruit;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequestScoped
@Slf4j
@RequiredArgsConstructor
public class FruitCacheGatewayAdapter implements FruitCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("fruit")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param fruit
   */
  @Override
  public void remove(final Fruit fruit) {
    log.trace("Invalidating fruit cache due to the removal of {}", fruit);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<FruitCached> retrieve(final FruitFilter filter, final FruitCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at fruit cache for the key {}", key);
    return cache.<String, FruitCached>get(key, k -> null).map(cached -> Optional.ofNullable(cached))
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param fruits
   * @return
   */
  public FruitCached store(final FruitFilter filter, final FruitCursor cursor,
      final List<Fruit> fruits) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache
        .<String, FruitCached>get(key,
            k -> FruitCached.builder().since(OffsetDateTime.now()).value(fruits).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param fruit
   */
  @Override
  public void update(final Fruit fruit) {
    log.trace("Invalidating fruit cache due to the update of {}", fruit);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final FruitFilter filter, final FruitCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
