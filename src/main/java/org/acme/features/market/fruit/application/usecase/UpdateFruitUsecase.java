package org.acme.features.market.fruit.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.acme.features.market.fruit.application.interaction.FruitDto;
import org.acme.features.market.fruit.application.interaction.command.FruitUpdateCommand;
import org.acme.features.market.fruit.application.interaction.result.FruitUpdateResult;
import org.acme.features.market.fruit.application.usecase.service.FruitsVisibilityService;
import org.acme.features.market.fruit.domain.Fruits;
import org.acme.features.market.fruit.domain.gateway.FruitFilter;
import org.acme.features.market.fruit.domain.gateway.FruitRepositoryGateway;
import org.acme.features.market.fruit.domain.model.Fruit;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class UpdateFruitUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Fruits aggregate;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final FruitRepositoryGateway gateway;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public FruitUpdateResult update(final FruitUpdateCommand command) {
    FruitFilter filter = FruitFilter.builder().uid(command.getUid()).build();
    CompletableFuture<Optional<Fruit>> updated =
        gateway.retrieve(command.getUid(), Optional.of(visibility.visibleFilter(command, filter)))
            .thenCompose(op -> saveIfIsPresent(op, command.getDto()));
    return FruitUpdateResult.builder().command(command)
        .fruit(updated.thenApply(entity -> mapEntity(command, entity))).build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opfruit
   * @return The slide with some values
   */
  private Optional<FruitDto> mapEntity(final FruitUpdateCommand query,
      final Optional<Fruit> opfruit) {
    return opfruit.map(fruit -> visibility.hide(query, FruitDto.from(fruit)));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param original
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletableFuture<Optional<Fruit>> saveEntity(final Fruit original, final FruitDto dto) {
    Fruit fruit = aggregate.modify(original, dto.toEntityBuilder());
    return gateway.update(fruit).thenApply(Optional::of);
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param result
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletableFuture<Optional<Fruit>> saveIfIsPresent(final Optional<Fruit> result,
      final FruitDto dto) {
    return result.map(original -> saveEntity(original, dto))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
