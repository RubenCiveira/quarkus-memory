package org.acme.features.market.fruit.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.fruit.application.allow.FruitUpdateAllow;
import org.acme.features.market.fruit.application.interaction.FruitDto;
import org.acme.features.market.fruit.application.interaction.command.FruitUpdateCommand;
import org.acme.features.market.fruit.application.interaction.query.FruitEntityAllowQuery;
import org.acme.features.market.fruit.application.interaction.result.FruitUpdateResult;
import org.acme.features.market.fruit.application.usecase.service.FruitsVisibilityService;
import org.acme.features.market.fruit.domain.Fruits;
import org.acme.features.market.fruit.domain.gateway.FruitWriteRepositoryGateway;
import org.acme.features.market.fruit.domain.model.Fruit;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class UpdateFruitUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Fruits aggregate;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final FruitWriteRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<FruitUpdateAllow> updateAllow;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public FruitUpdateAllow allow(final FruitEntityAllowQuery query) {
    FruitUpdateAllow base =
        FruitUpdateAllow.build(query.getReference(), true, "Allowed by default");
    updateAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @return
   */
  public FruitUpdateAllow allow() {
    return null;
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public FruitUpdateResult update(final FruitUpdateCommand command) {
    CompletionStage<Optional<Fruit>> updated = allow(command).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.copyWithFixed(command, command.getDto()).thenCompose(
          builder -> visibility.retrieveVisible(command, command.getReference().getUidValue())
              .thenCompose(op -> saveIfIsPresent(op, builder)));
    });
    return FruitUpdateResult.builder().command(command)
        .fruit(updated.thenCompose(entity -> mapEntity(command, entity))).build();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  private FruitUpdateAllow allow(final FruitUpdateCommand query) {
    return allow(FruitEntityAllowQuery.builder().reference(query.getReference()).build(query));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opfruit
   * @return The slide with some values
   */
  private CompletionStage<Optional<FruitDto>> mapEntity(final FruitUpdateCommand command,
      final Optional<Fruit> opfruit) {
    return opfruit.map(fruit -> visibility.copyWithHidden(command, fruit).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param original
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletionStage<Optional<Fruit>> saveEntity(final Fruit original, final FruitDto dto) {
    return aggregate.modify(original, dto.toEntityBuilder(Optional.of(original)))
        .thenCompose(fruit -> gateway.update(original, fruit).thenApply(Optional::of));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param result
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletionStage<Optional<Fruit>> saveIfIsPresent(final Optional<Fruit> result,
      final FruitDto dto) {
    return result.map(original -> saveEntity(original, dto))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
