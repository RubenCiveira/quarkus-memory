package org.acme.features.market.fruit.application.usecase.create;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.fruit.application.service.FruitsVisibilityService;
import org.acme.features.market.fruit.domain.Fruits;
import org.acme.features.market.fruit.domain.gateway.FruitCacheGateway;
import org.acme.features.market.fruit.domain.gateway.FruitWriteRepositoryGateway;
import org.acme.features.market.fruit.domain.model.Fruit;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreateFruitUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Fruits aggregate;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final FruitCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<FruitCreateAllow> createAllow;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final FruitWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public FruitCreateAllow allow(final Interaction query) {
    FruitCreateAllow base = FruitCreateAllow.build(query, true, "Allowed by default");
    createAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<FruitCreateResult> create(final FruitCreateCommand query) {
    CompletionStage<Optional<Fruit>> create = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.copyWithFixed(query, query.getDto())
          .thenCompose(builder -> aggregate.initialize(builder.toEntityBuilder(Optional.empty()))
              .thenCompose(fruitEntity -> createAndVerify(query, fruitEntity)));
    });
    return create.thenCompose(fruit -> mapEntity(query, fruit));
  }

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param fruitEntity
   * @return
   */
  private CompletionStage<Optional<Fruit>> createAndVerify(final FruitCreateCommand query,
      final Fruit fruitEntity) {
    return gateway
        .create(fruitEntity, created -> visibility.checkVisibility(query, created.getUidValue()))
        .thenCompose(validated -> validated
            .map(created -> cache.update(created).thenApply(_ready -> Optional.of(created)))
            .orElseGet(() -> CompletableFuture.completedStage(Optional.empty())));
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opfruit
   * @return The slide with some values
   */
  private CompletionStage<FruitCreateResult> mapEntity(final FruitCreateCommand command,
      final Optional<Fruit> opfruit) {
    return opfruit
        .map(fruit -> visibility.copyWithHidden(command, fruit)
            .thenApply(visible -> FruitCreateResult.builder().command(command)
                .fruit(Optional.of(visible)).build()))
        .orElseGet(() -> CompletableFuture.completedStage(
            FruitCreateResult.builder().command(command).fruit(Optional.empty()).build()));
  }
}
