package org.acme.features.market.fruit.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;

import org.acme.features.market.fruit.application.interaction.FruitDto;
import org.acme.features.market.fruit.application.interaction.command.FruitCreateCommand;
import org.acme.features.market.fruit.application.interaction.result.FruitCreateResult;
import org.acme.features.market.fruit.application.usecase.service.FruitsVisibilityService;
import org.acme.features.market.fruit.domain.Fruits;
import org.acme.features.market.fruit.domain.gateway.FruitFilter;
import org.acme.features.market.fruit.domain.gateway.FruitWriteRepositoryGateway;
import org.acme.features.market.fruit.domain.model.Fruit;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreateFruitUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Fruits aggregate;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final FruitWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public FruitCreateResult create(final FruitCreateCommand query) {
    Fruit fruitEntity =
        aggregate.initialize(visibility.copyWithFixed(query, query.getDto()).toEntityBuilder());
    CompletableFuture<Optional<Fruit>> create = gateway.create(fruitEntity, (created) -> {
      FruitFilter filter = FruitFilter.builder().uid(created.getUidValue()).build();
      return gateway.exists(created.getUidValue(),
          Optional.of(visibility.visibleFilter(query, filter)));
    });
    return FruitCreateResult.builder().command(query)
        .fruit(create.thenApply(fruit -> mapEntity(query, fruit))).build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opfruit
   * @return The slide with some values
   */
  private Optional<FruitDto> mapEntity(final FruitCreateCommand query,
      final Optional<Fruit> opfruit) {
    return opfruit.map(fruit -> visibility.hide(query, FruitDto.from(fruit)));
  }
}
