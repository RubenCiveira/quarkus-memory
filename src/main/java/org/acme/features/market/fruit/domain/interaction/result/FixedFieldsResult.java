package org.acme.features.market.fruit.domain.interaction.result;

import java.util.LinkedHashSet;
import java.util.Set;
import java.util.stream.Stream;

import org.acme.common.action.Interaction;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.ToString;
import lombok.experimental.SuperBuilder;

@Getter
@ToString
@SuperBuilder(toBuilder = true)
@EqualsAndHashCode(callSuper = true, onlyExplicitlyIncluded = true)
public class FixedFieldsResult extends Interaction {

  /**
   * The list of fixed fields
   *
   * @autogenerated VisibilityTraitGenerator
   */
  private Set<String> fixed;

  /**
   * Add another field to the fixed list
   *
   * @autogenerated VisibilityTraitGenerator
   * @param field A field to add to fixed
   */
  public void add(final String field) {
    fixedEditable().add(field);
  }

  /**
   * The self instance to chain other calls
   *
   * @autogenerated VisibilityTraitGenerator
   * @param field A field to add to fixed
   * @return The self instance to chain other calls
   */
  public FixedFieldsResult and(final String field) {
    fixedEditable().add(field);
    return this;
  }

  /**
   * The iterable stream of fixed fields
   *
   * @autogenerated VisibilityTraitGenerator
   * @return The iterable stream of fixed fields
   */
  public Stream<String> getFixed() {
    return fixed.stream();
  }

  /**
   * The self instance to chain other calls
   *
   * @autogenerated VisibilityTraitGenerator
   * @param field A field to remote from fixed
   * @return The self instance to chain other calls
   */
  public FixedFieldsResult not(final String field) {
    fixedEditable().remove(field);
    return this;
  }

  /**
   * Remove one field from the fixed list
   *
   * @autogenerated VisibilityTraitGenerator
   * @param field A field to remote from fixed
   */
  public void remove(final String field) {
    fixedEditable().remove(field);
  }

  /**
   * The list ensured as an editable list
   *
   * @autogenerated VisibilityTraitGenerator
   * @return The list ensured as an editable list
   */
  private Set<String> fixedEditable() {
    if (!(fixed instanceof LinkedHashSet)) {
      fixed = new LinkedHashSet<>(fixed);
    }
    return fixed;
  }
}
