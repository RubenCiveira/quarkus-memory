package org.acme.features.market.fruit.domain.model;

import java.util.Optional;

import org.acme.common.exception.ConstraintException;
import org.acme.common.validation.ConstraintFail;
import org.acme.common.validation.ConstraintFailList;
import org.acme.features.market.fruit.domain.model.valueobject.FruitNameVO;
import org.acme.features.market.fruit.domain.model.valueobject.FruitUidVO;
import org.acme.features.market.fruit.domain.model.valueobject.FruitVersionVO;

import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;

@Getter
@ToString
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Fruit implements FruitRef {

  /**
   * @autogenerated EntityGenerator
   */
  public static class FruitBuilder {

    /**
     * @autogenerated EntityGenerator
     * @return
     */
    public Fruit buildValid() {
      ConstraintFailList list = new ConstraintFailList();
      if (null == uid) {
        list.add(new ConstraintFail("REQUIRED", "uid", null));
      }
      if (null == name) {
        list.add(new ConstraintFail("REQUIRED", "name", null));
      }
      if (list.hasErrors()) {
        throw new ConstraintException(list);
      }
      return build();
    }

    /**
     * @autogenerated EntityGenerator
     * @param name
     * @return
     */
    public FruitBuilder nameValue(final String name) {
      return name(FruitNameVO.from(name));
    }

    /**
     * @autogenerated EntityGenerator
     * @param uid
     * @return
     */
    public FruitBuilder uidValue(final String uid) {
      return uid(FruitUidVO.from(uid));
    }

    /**
     * @autogenerated EntityGenerator
     * @param version
     * @return
     */
    public FruitBuilder versionValue(final Integer version) {
      return version(FruitVersionVO.from(version));
    }
  }

  /**
   * El name de fruit
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private FruitNameVO name;

  /**
   * A number to identify the db record
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private FruitUidVO uid;

  /**
   * Campo con el n√∫mero de version de fruit para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private FruitVersionVO version = FruitVersionVO.empty();

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getNameValue() {
    return getName().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getUidValue() {
    return getUid().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Fruit withEmptyVersion() {
    return withVersion(FruitVersionVO.empty());
  }

  /**
   * @autogenerated EntityGenerator
   * @param name
   * @return
   */
  public Fruit withNameValue(final String name) {
    return withName(FruitNameVO.from(name));
  }

  /**
   * @autogenerated EntityGenerator
   * @param uid
   * @return
   */
  public Fruit withUidValue(final String uid) {
    return withUid(FruitUidVO.from(uid));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Fruit withVersionValue(final Integer version) {
    return withVersion(FruitVersionVO.from(version));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Fruit withVersionValue(final Optional<Integer> version) {
    return version.isPresent() ? withVersion(FruitVersionVO.from(version.get()))
        : withEmptyVersion();
  }
}
