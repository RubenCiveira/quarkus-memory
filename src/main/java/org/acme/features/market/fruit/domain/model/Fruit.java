package org.acme.features.market.fruit.domain.model;

import org.acme.features.market.fruit.domain.model.valueobject.FruitNameVO;
import org.acme.features.market.fruit.domain.model.valueobject.FruitVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NonNull;
import lombok.experimental.SuperBuilder;

@Data
@SuperBuilder(toBuilder = true)
@EqualsAndHashCode(callSuper = true, onlyExplicitlyIncluded = true)
public class Fruit extends FruitRef {

  /**
   * @autogenerated EntityGenerator
   */
  public abstract static class FruitBuilder<C extends Fruit, B extends FruitBuilder<C, B>>
      extends FruitRefBuilder<C, B> {

    /**
     * @autogenerated EntityGenerator
     * @param name The valueo to assign
     * @return
     */
    public B nameValue(final String name) {
      return name(FruitNameVO.from(name));
    }

    /**
     * @autogenerated EntityGenerator
     * @param version The valueo to assign
     * @return
     */
    public B versionValue(final Integer version) {
      return version(FruitVersionVO.from(version));
    }
  }

  /**
   * El name de fruit
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private FruitNameVO name;

  /**
   * Campo con el n√∫mero de version de fruit para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @Builder.Default
  private FruitVersionVO version = FruitVersionVO.empty();

  /**
   * @autogenerated EntityGenerator
   * @param name
   */
  public void setName(final String name) {
    this.name = FruitNameVO.from(name);
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   */
  public void setVersion(final Integer version) {
    this.version = FruitVersionVO.from(version);
  }
}
