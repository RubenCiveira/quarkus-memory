package org.acme.features.market.fruit.infrastructure.driver.rest;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.acme.common.rest.CurrentRequest;
import org.acme.features.market.fruit.application.FruitDto;
import org.acme.features.market.fruit.application.usecase.create.CreateFruitUsecase;
import org.acme.features.market.fruit.application.usecase.create.FruitCreateCommand;
import org.acme.features.market.fruit.application.usecase.delete.DeleteFruitUsecase;
import org.acme.features.market.fruit.application.usecase.delete.FruitDeleteCommand;
import org.acme.features.market.fruit.application.usecase.list.FruitListQuery;
import org.acme.features.market.fruit.application.usecase.list.ListFruitUsecase;
import org.acme.features.market.fruit.application.usecase.retrieve.FruitRetrieveQuery;
import org.acme.features.market.fruit.application.usecase.retrieve.RetrieveFruitUsecase;
import org.acme.features.market.fruit.application.usecase.update.FruitUpdateCommand;
import org.acme.features.market.fruit.application.usecase.update.UpdateFruitUsecase;
import org.acme.features.market.fruit.domain.gateway.FruitCursor;
import org.acme.features.market.fruit.domain.gateway.FruitFilter;
import org.acme.features.market.fruit.domain.model.FruitReference;
import org.acme.features.market.fruit.domain.model.valueobject.FruitNameVO;
import org.acme.features.market.fruit.domain.model.valueobject.FruitUidVO;
import org.acme.features.market.fruit.domain.model.valueobject.FruitVersionVO;
import org.acme.generated.openapi.api.FruitApi;
import org.acme.generated.openapi.model.Fruit;
import org.acme.generated.openapi.model.FruitList;
import org.acme.generated.openapi.model.FruitListNextOffset;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class FruitController implements FruitApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final CreateFruitUsecase create;

  /**
   * Fruit
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DeleteFruitUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ListFruitUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RetrieveFruitUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UpdateFruitUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param fruit
   * @return
   */
  @Override
  @Transactional
  public Response fruitApiCreate(Fruit fruit) {
    return currentRequest.resolve(interaction -> create
        .create(FruitCreateCommand.builder().dto(toDomainModel(fruit)).build(interaction))
        .thenApply(res -> res.getFruit().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response fruitApiDelete(final String uid) {
    return currentRequest.resolve(interaction -> delete
        .delete(FruitDeleteCommand.builder().reference(FruitReference.of(uid)).build(interaction))
        .thenApply(res -> res.getFruit().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param uids
   * @param search
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response fruitApiList(final String uid, final List<String> uids, final String search,
      final Integer limit, final String sinceUid) {
    return currentRequest.resolve(interaction -> {
      FruitFilter.FruitFilterBuilder filter = FruitFilter.builder();
      FruitCursor.FruitCursorBuilder cursor = FruitCursor.builder();
      cursor = cursor.limit(limit);
      cursor = cursor.sinceUid(sinceUid);
      filter = filter.uid(uid);
      filter = filter.uids(uids);
      filter = filter.search(search);
      return list.list(FruitListQuery.builder().filter(filter.build()).cursor(cursor.build())
          .build(interaction));
    }, value -> Response
        .ok(new FruitList().content(toApiModel(value.getFruits())).next(next(value.getFruits())))
        .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))
        .build());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response fruitApiRetrieve(final String uid) {
    return currentRequest.resolve(
        interaction -> retrieve.retrieve(
            FruitRetrieveQuery.builder().reference(FruitReference.of(uid)).build(interaction)),
        value -> value.getFruit()
            .map(fruit -> Response.ok(toApiModel(fruit)).header("Last-Modified",
                value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)))
            .orElseGet(() -> Response.status(404)).build());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param fruit
   * @return
   */
  @Override
  @Transactional
  public Response fruitApiUpdate(final String uid, final Fruit fruit) {
    return currentRequest.resolve(interaction -> update
        .update(FruitUpdateCommand.builder().dto(toDomainModel(fruit))
            .reference(FruitReference.of(uid)).build(interaction))
        .thenApply(res -> res.getFruit().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param list
   * @return
   */
  private FruitListNextOffset next(List<FruitDto> list) {
    if (list.isEmpty()) {
      return null;
    } else {
      FruitListNextOffset next = new FruitListNextOffset();
      FruitDto last = list.get(list.size() - 1);
      next.setSinceUid(last.getUid().getValue());
      return next;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param fruits
   * @return
   */
  private List<Fruit> toApiModel(List<FruitDto> fruits) {
    return fruits.stream().map(this::toApiModel).toList();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private Fruit toApiModel(FruitDto dto) {
    Fruit fruit = new Fruit();
    fruit.setUid(Optional.ofNullable(dto.getUid()).map(FruitUidVO::getValue).orElse(null));
    fruit.setName(Optional.ofNullable(dto.getName()).map(FruitNameVO::getValue).orElse(null));
    fruit.setVersion(
        Optional.ofNullable(dto.getVersion()).flatMap(FruitVersionVO::getValue).orElse(null));
    return fruit;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param fruit
   * @return
   */
  private FruitDto toDomainModel(Fruit fruit) {
    FruitDto.FruitDtoBuilder builder = FruitDto.builder();
    if (null != fruit.getUid()) {
      builder = builder.uid(FruitUidVO.from(fruit.getUid()));
    }
    if (null != fruit.getName()) {
      builder = builder.name(FruitNameVO.from(fruit.getName()));
    }
    if (null != fruit.getVersion()) {
      builder = builder.version(FruitVersionVO.from(fruit.getVersion()));
    } ;
    return builder.build();
  }
}
