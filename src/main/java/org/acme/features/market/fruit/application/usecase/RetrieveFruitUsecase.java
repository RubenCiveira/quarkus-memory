package org.acme.features.market.fruit.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.fruit.application.allow.FruitRetrieveAllow;
import org.acme.features.market.fruit.application.interaction.FruitDto;
import org.acme.features.market.fruit.application.interaction.query.FruitEntityAllowQuery;
import org.acme.features.market.fruit.application.interaction.query.FruitRetrieveQuery;
import org.acme.features.market.fruit.application.interaction.result.FruitRetrieveResult;
import org.acme.features.market.fruit.application.usecase.service.FruitsVisibilityService;
import org.acme.features.market.fruit.domain.model.Fruit;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveFruitUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<FruitRetrieveAllow> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public FruitRetrieveAllow allow(final FruitEntityAllowQuery query) {
    FruitRetrieveAllow base =
        FruitRetrieveAllow.build(query.getReference(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public FruitRetrieveResult retrieve(final FruitRetrieveQuery query) {
    CompletionStage<Optional<Fruit>> result = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.retrieveVisible(query, query.getReference().getUidValue());
    });
    return FruitRetrieveResult.builder().interaction(query)
        .fruit(result.thenCompose(op -> this.mapEntity(query, op))).build();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  private FruitRetrieveAllow allow(final FruitRetrieveQuery query) {
    return allow(FruitEntityAllowQuery.builder().reference(query.getReference()).build(query));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opfruit
   * @return The slide with some values
   */
  private CompletionStage<Optional<FruitDto>> mapEntity(final FruitRetrieveQuery query,
      final Optional<Fruit> opfruit) {
    return opfruit.map(fruit -> visibility.copyWithHidden(query, fruit).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
