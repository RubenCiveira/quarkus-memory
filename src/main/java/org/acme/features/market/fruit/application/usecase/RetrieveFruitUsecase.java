package org.acme.features.market.fruit.application.usecase;

import java.util.Optional;

import org.acme.features.market.fruit.application.interaction.FruitDto;
import org.acme.features.market.fruit.application.interaction.query.FruitRetrieveQuery;
import org.acme.features.market.fruit.application.interaction.result.FruitRetrieveResult;
import org.acme.features.market.fruit.application.usecase.service.FruitsVisibilityService;
import org.acme.features.market.fruit.domain.gateway.FruitFilter;
import org.acme.features.market.fruit.domain.gateway.FruitReadRepositoryGateway;
import org.acme.features.market.fruit.domain.model.Fruit;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveFruitUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final FruitReadRepositoryGateway gateway;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final FruitsVisibilityService visibility;

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public FruitRetrieveResult retrieve(final FruitRetrieveQuery query) {
    FruitFilter filter = FruitFilter.builder().uid(query.getUid()).build();
    return FruitRetrieveResult.builder().interaction(query)
        .fruit(
            gateway.retrieve(query.getUid(), Optional.of(visibility.visibleFilter(query, filter)))
                .thenApply(op -> this.mapEntity(query, op)))
        .build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opfruit
   * @return The slide with some values
   */
  private Optional<FruitDto> mapEntity(final FruitRetrieveQuery query,
      final Optional<Fruit> opfruit) {
    return opfruit.map(fruit -> visibility.hide(query, FruitDto.from(fruit)));
  }
}
