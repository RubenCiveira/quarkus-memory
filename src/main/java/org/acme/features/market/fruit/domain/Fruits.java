package org.acme.features.market.fruit.domain;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.acme.features.market.fruit.domain.model.Fruit;
import org.acme.features.market.fruit.domain.model.Fruit.FruitBuilder;
import org.acme.features.market.fruit.domain.model.rule.FruitBuildFormulaPipeline;
import org.acme.features.market.fruit.domain.model.rule.FruitCreateRulePipeline;
import org.acme.features.market.fruit.domain.model.rule.FruitDeleteRulePipeline;
import org.acme.features.market.fruit.domain.model.rule.FruitUpdateRulePipeline;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class Fruits {

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<FruitBuildFormulaPipeline> buildingFormulas;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<FruitCreateRulePipeline> creatingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<FruitDeleteRulePipeline> deletingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<FruitUpdateRulePipeline> updatingRules;

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    Set<String> fields = new HashSet<>();
    buildingFormulas.forEach(formula -> fields.addAll(formula.fields()));
    return fields;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit clean(final Fruit entity) {
    return FruitDeleteRulePipeline.fire(deletingRules.iterator(), entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit initialize(final FruitBuilder builder) {
    return FruitCreateRulePipeline.fire(creatingRules.iterator(),
        build(builder, Optional.empty(), null).build());
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit modify(final Fruit base, final FruitBuilder builder) {
    return FruitUpdateRulePipeline.fire(updatingRules.iterator(),
        build(builder, Optional.of(base), null).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @param original a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private FruitBuilder build(final FruitBuilder builder, final Optional<Fruit> original,
      final String ignore) {
    return FruitBuildFormulaPipeline.fire(buildingFormulas.iterator(), builder, original);
  }
}
