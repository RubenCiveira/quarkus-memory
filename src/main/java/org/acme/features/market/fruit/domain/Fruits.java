package org.acme.features.market.fruit.domain;

import org.acme.common.action.ParametrizedPipeline;
import org.acme.common.action.PriorityComparator;
import org.acme.features.market.fruit.domain.model.Fruit;
import org.acme.features.market.fruit.domain.model.Fruit.FruitBuilder;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import lombok.Getter;
import lombok.RequiredArgsConstructor;

@RequestScoped
public class Fruits {

  /**
   * @autogenerated AggregateGenerator
   */
  @Getter
  @RequiredArgsConstructor
  public enum ActionType {

    /**
     * @autogenerated AggregateGenerator
     */
    CREATE(true, false, false),
    /**
     * @autogenerated AggregateGenerator
     */
    UPDATE(false, false, true),
    /**
     * @autogenerated AggregateGenerator
     */
    DELETE(false, true, false);

    /**
     * @autogenerated AggregateGenerator
     */
    private final boolean create;

    /**
     * @autogenerated AggregateGenerator
     */
    private final boolean delete;

    /**
     * @autogenerated AggregateGenerator
     */
    private final boolean update;
  }

  /**
   * @autogenerated AggregateGenerator
   */
  private final ParametrizedPipeline<FruitBuilder, ActionType, Fruit> builderRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final ParametrizedPipeline<Fruit, ActionType, Fruit> rules;

  /**
   * @autogenerated AggregateGenerator
   * @param rules
   * @param builderRules
   */
  public Fruits(final Instance<FruitRule> rules, final Instance<FruitBuilderRule> builderRules) {
    this.rules = new ParametrizedPipeline<>(ActionType.values(), rules.stream().toList(),
        new PriorityComparator<>());
    this.builderRules = new ParametrizedPipeline<>(ActionType.values(),
        builderRules.stream().toList(), new PriorityComparator<>());
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit clean(final Fruit entity) {
    return rules.applyWithoutParams(ActionType.DELETE, entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit initialize(final FruitBuilder builder) {
    Fruit entity = this.builderRules.applyWithoutParams(ActionType.CREATE, builder).build();
    return rules.applyWithoutParams(ActionType.CREATE, entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit modify(final Fruit base, final FruitBuilder builder) {
    Fruit entity = this.builderRules.applyWithParams(ActionType.UPDATE, builder, base).build();
    return rules.applyWithoutParams(ActionType.UPDATE, entity);
  }
}
