package org.acme.features.market.fruit.domain;

import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.function.BiFunction;
import org.acme.common.action.ParametrizedFuturePipe;
import org.acme.common.action.PriorityComparator;
import org.acme.features.market.fruit.domain.model.Fruit;
import org.acme.features.market.fruit.domain.model.Fruit.FruitBuilder;
import org.acme.features.market.fruit.domain.rule.FruitActionType;
import org.acme.features.market.fruit.domain.rule.FruitBuilderRule;
import org.acme.features.market.fruit.domain.rule.FruitRule;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;

@RequestScoped
public class Fruits {

  /**
   * @autogenerated AggregateGenerator
   */
  private final ParametrizedFuturePipe<FruitBuilder, FruitActionType, Optional<Fruit>> builderRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final ParametrizedFuturePipe<Fruit, FruitActionType, Optional<Fruit>> rules;

  /**
   * @autogenerated AggregateGenerator
   */
  private Map<String, BiFunction<FruitBuilder, Optional<Fruit>, FruitBuilder>> calculatedFields =
      Map.of();

  /**
   * @autogenerated AggregateGenerator
   * @param rules
   * @param builderRules
   */
  public Fruits(final Instance<FruitRule> rules, final Instance<FruitBuilderRule> builderRules) {
    this.rules = new ParametrizedFuturePipe<>(FruitActionType.values(), rules.stream().toList(),
        new PriorityComparator<>());
    this.builderRules = new ParametrizedFuturePipe<>(FruitActionType.values(),
        builderRules.stream().toList(), new PriorityComparator<>());
  }

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    return calculatedFields.keySet();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit clean(final Fruit entity) {
    return rules.applyCurrent(FruitActionType.DELETE, entity, Optional.of(entity));
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit initialize(final FruitBuilder builder) {
    return applyModify(FruitActionType.CREATE, Optional.empty(), builder, null);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Fruit modify(final Fruit base, final FruitBuilder builder) {
    return applyModify(FruitActionType.UPDATE, Optional.of(base), builder, null);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param type
   * @param original a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private Fruit applyModify(final FruitActionType type,
      final Optional<Fruit> original, final FruitBuilder builder, final String ignore) {
    FruitBuilder ruledBuilder =
        this.builderRules.applyCurrent(type, builder, original);
    
    for (Entry<String, BiFunction<FruitBuilder, Optional<Fruit>, FruitBuilder>> entry : 
      calculatedFields.entrySet()) {
      if (!entry.getKey().equals(ignore)) {
        ruledBuilder = entry.getValue().apply(ruledBuilder, original);
      }
    }
    return rules.applyCurrent(type, ruledBuilder.buildValid(), original);
  }
}
