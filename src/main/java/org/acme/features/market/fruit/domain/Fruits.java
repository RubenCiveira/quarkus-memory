package org.acme.features.market.fruit.domain;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.acme.common.action.Interaction;
import org.acme.common.action.Slide;
import org.acme.features.market.fruit.domain.FruitsEvent;
import org.acme.features.market.fruit.domain.FruitsVisibility;
import org.acme.features.market.fruit.domain.gateway.FruitRepositoryGateway;
import org.acme.features.market.fruit.domain.interaction.FruitDto;
import org.acme.features.market.fruit.domain.interaction.FruitFilter;
import org.acme.features.market.fruit.domain.interaction.query.FruitListQuery;
import org.acme.features.market.fruit.domain.interaction.query.FruitRetrieveQuery;
import org.acme.features.market.fruit.domain.interaction.result.FruitListResult;
import org.acme.features.market.fruit.domain.interaction.result.FruitRetrieveResult;
import org.acme.features.market.fruit.domain.model.Fruit;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class Fruits {

  /**
   * The event source to allow customization
   *
   * @autogenerated ListTraitGenerator
   */
  private final FruitsEvent events;

  /**
   * The source of truth with the data
   *
   * @autogenerated RetrieveTraitGenerator
   */
  private final FruitRepositoryGateway gateway;

  /**
   * The event source for control editable and visible fields
   *
   * @autogenerated ListTraitGenerator
   */
  private final FruitsVisibility visibility;

  /**
   * The slide with some values
   *
   * @autogenerated CreateTraitGenerator
   * @param command
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  public Fruit initialize(final Interaction command, final FruitDto dto) {
    return dto.toEntity();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListTraitGenerator
   * @param query a filter to retrieve only matching values
   * @param slide
   * @return The slide with some values
   */
  public Uni<FruitListResult> prepareOutputValue(final FruitListQuery query,
      final Slide<Fruit> slide) {
    return slide
        .filterAndFill(query.getCursor().getLimit().orElse(null),
            fruits -> events.fireListResult(FruitListResult.from(query, fruits)).getFruits())
        .map(list -> FruitListResult.fromDto(query, list)).invoke(result -> result.getFruits()
            .forEach(fruit -> prepareOutputValue(query, Optional.of(fruit))));
  }

  /**
   * The self dto, with all the notifications and the data ready
   *
   * @autogenerated RetrieveTraitGenerator
   * @param query The interaction that provoques the list
   * @param Fruit The dto with all the values, to be prepared for user of the interaction
   * @return The self dto, with all the notifications and the data ready
   */
  public Optional<FruitDto> prepareOutputValue(final Interaction query,
      final Optional<FruitDto> Fruit) {
    Optional<FruitDto> hidded = Fruit.map(original -> visibility.hide(query, original));
    return events.fireFruitRetrieveResult(FruitRetrieveResult.fromDto(query, hidded)).getFruit();
  }
}
