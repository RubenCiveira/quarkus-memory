package org.acme.features.market.area.infrastructure.driven;

import java.util.Optional;

import org.acme.common.algorithms.Slider;
import org.acme.features.market.area.domain.gateway.AreaCursor;
import org.acme.features.market.area.domain.gateway.AreaFilter;
import org.acme.features.market.area.domain.gateway.AreaReadRepositoryGateway;
import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.AreaRef;
import org.acme.features.market.area.infrastructure.repository.AreaRepository;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class AreaReadGatewayAdapter implements AreaReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final AreaRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(AreaFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public Area enrich(AreaRef reference) {
    return repository.enrich(reference);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<AreaFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<Area> list(AreaFilter filter, AreaCursor cursor) {
    return repository.list(filter, cursor);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<Area> retrieve(String uid, Optional<AreaFilter> filter) {
    return repository.retrieve(uid, filter);
  }
}
