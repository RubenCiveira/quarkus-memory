package org.acme.features.market.area.domain;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.Area.AreaBuilder;
import org.acme.features.market.area.domain.model.rule.AreaBuildFormulaPipeline;
import org.acme.features.market.area.domain.model.rule.AreaCreateRulePipeline;
import org.acme.features.market.area.domain.model.rule.AreaDeleteRulePipeline;
import org.acme.features.market.area.domain.model.rule.AreaUpdateRulePipeline;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class Areas {

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<AreaBuildFormulaPipeline> buildingFormulas;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<AreaCreateRulePipeline> creatingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<AreaDeleteRulePipeline> deletingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<AreaUpdateRulePipeline> updatingRules;

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    Set<String> fields = new HashSet<>();
    buildingFormulas.forEach(formula -> fields.addAll(formula.fields()));
    return fields;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Area clean(final Area entity) {
    return AreaDeleteRulePipeline.fire(deletingRules.iterator(), entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Area initialize(final AreaBuilder builder) {
    return AreaCreateRulePipeline.fire(creatingRules.iterator(),
        build(builder, Optional.empty(), null).build());
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Area modify(final Area base, final AreaBuilder builder) {
    return AreaUpdateRulePipeline.fire(updatingRules.iterator(),
        build(builder, Optional.of(base), null).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @param original a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private AreaBuilder build(final AreaBuilder builder, final Optional<Area> original,
      final String ignore) {
    return AreaBuildFormulaPipeline.fire(buildingFormulas.iterator(), builder, original);
  }
}
