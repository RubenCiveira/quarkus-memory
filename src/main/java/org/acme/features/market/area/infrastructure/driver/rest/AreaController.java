package org.acme.features.market.area.infrastructure.driver.rest;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.acme.common.rest.CurrentRequest;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.usecase.create.AreaCreateCommand;
import org.acme.features.market.area.application.usecase.create.CreateAreaUsecase;
import org.acme.features.market.area.application.usecase.delete.AreaDeleteCommand;
import org.acme.features.market.area.application.usecase.delete.DeleteAreaUsecase;
import org.acme.features.market.area.application.usecase.list.AreaListQuery;
import org.acme.features.market.area.application.usecase.list.ListAreaUsecase;
import org.acme.features.market.area.application.usecase.retrieve.AreaRetrieveQuery;
import org.acme.features.market.area.application.usecase.retrieve.RetrieveAreaUsecase;
import org.acme.features.market.area.application.usecase.update.AreaUpdateCommand;
import org.acme.features.market.area.application.usecase.update.UpdateAreaUsecase;
import org.acme.features.market.area.domain.gateway.AreaCursor;
import org.acme.features.market.area.domain.gateway.AreaFilter;
import org.acme.features.market.area.domain.model.AreaReference;
import org.acme.features.market.area.domain.model.valueobject.AreaNameVO;
import org.acme.features.market.area.domain.model.valueobject.AreaPlaceVO;
import org.acme.features.market.area.domain.model.valueobject.AreaUidVO;
import org.acme.features.market.area.domain.model.valueobject.AreaVersionVO;
import org.acme.features.market.place.domain.model.PlaceReference;
import org.acme.generated.openapi.api.AreaApi;
import org.acme.generated.openapi.model.Area;
import org.acme.generated.openapi.model.AreaList;
import org.acme.generated.openapi.model.AreaListNextOffset;
import org.acme.generated.openapi.model.PlaceRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class AreaController implements AreaApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final CreateAreaUsecase create;

  /**
   * Area
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DeleteAreaUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ListAreaUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RetrieveAreaUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UpdateAreaUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param area
   * @return
   */
  @Override
  @Transactional
  public Response areaApiCreate(Area area) {
    return currentRequest.resolve(interaction -> create
        .create(AreaCreateCommand.builder().dto(toDomainModel(area)).build(interaction))
        .thenApply(res -> res.getArea().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response areaApiDelete(final String uid) {
    return currentRequest.resolve(interaction -> delete
        .delete(AreaDeleteCommand.builder().reference(AreaReference.of(uid)).build(interaction))
        .thenApply(res -> res.getArea().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param uids
   * @param search
   * @param place
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response areaApiList(final String uid, final List<String> uids, final String search,
      final String place, final Integer limit, final String sinceUid) {
    return currentRequest.resolve(interaction -> {
      AreaFilter.AreaFilterBuilder filter = AreaFilter.builder();
      AreaCursor.AreaCursorBuilder cursor = AreaCursor.builder();
      cursor = cursor.limit(limit);
      cursor = cursor.sinceUid(sinceUid);
      filter = filter.uid(uid);
      filter = filter.uids(uids);
      filter = filter.search(search);
      if (null != place) {
        filter = filter.place(PlaceReference.of(place));
      }
      return list.list(
          AreaListQuery.builder().filter(filter.build()).cursor(cursor.build()).build(interaction));
    }, value -> Response
        .ok(new AreaList().content(toApiModel(value.getAreas())).next(next(value.getAreas())))
        .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))
        .build());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response areaApiRetrieve(final String uid) {
    return currentRequest.resolve(
        interaction -> retrieve.retrieve(
            AreaRetrieveQuery.builder().reference(AreaReference.of(uid)).build(interaction)),
        value -> value.getArea()
            .map(area -> Response.ok(toApiModel(area)).header("Last-Modified",
                value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)))
            .orElseGet(() -> Response.status(404)).build());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param area
   * @return
   */
  @Override
  @Transactional
  public Response areaApiUpdate(final String uid, final Area area) {
    return currentRequest.resolve(interaction -> update
        .update(AreaUpdateCommand.builder().dto(toDomainModel(area))
            .reference(AreaReference.of(uid)).build(interaction))
        .thenApply(res -> res.getArea().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param list
   * @return
   */
  private AreaListNextOffset next(List<AreaDto> list) {
    if (list.isEmpty()) {
      return null;
    } else {
      AreaListNextOffset next = new AreaListNextOffset();
      AreaDto last = list.get(list.size() - 1);
      next.setSinceUid(last.getUid().getValue());
      return next;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param areas
   * @return
   */
  private List<Area> toApiModel(List<AreaDto> areas) {
    return areas.stream().map(this::toApiModel).toList();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private Area toApiModel(AreaDto dto) {
    Area area = new Area();
    area.setUid(Optional.ofNullable(dto.getUid()).map(AreaUidVO::getValue).orElse(null));
    area.setName(Optional.ofNullable(dto.getName()).map(AreaNameVO::getValue).orElse(null));
    area.setPlace(new PlaceRef().$ref(
        Optional.ofNullable(dto.getPlace()).map(AreaPlaceVO::getReferenceValue).orElse(null)));
    area.setVersion(
        Optional.ofNullable(dto.getVersion()).flatMap(AreaVersionVO::getValue).orElse(null));
    return area;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param area
   * @return
   */
  private AreaDto toDomainModel(Area area) {
    AreaDto.AreaDtoBuilder builder = AreaDto.builder();
    if (null != area.getUid()) {
      builder = builder.uid(AreaUidVO.from(area.getUid()));
    }
    if (null != area.getName()) {
      builder = builder.name(AreaNameVO.from(area.getName()));
    }
    if (null != area.getPlace()) {
      builder = builder.place(AreaPlaceVO
          .fromReference(Optional.ofNullable(area.getPlace()).map(PlaceRef::get$Ref).orElse(null)));
    }
    if (null != area.getVersion()) {
      builder = builder.version(AreaVersionVO.from(area.getVersion()));
    } ;
    return builder.build();
  }
}
