package org.acme.features.market.area.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

import org.acme.common.infrastructure.CurrentRequest;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.usecase.create.AreaCreateCommand;
import org.acme.features.market.area.application.usecase.create.CreateAreaUsecase;
import org.acme.features.market.area.application.usecase.delete.AreaDeleteCommand;
import org.acme.features.market.area.application.usecase.delete.DeleteAreaUsecase;
import org.acme.features.market.area.application.usecase.list.AreaListQuery;
import org.acme.features.market.area.application.usecase.list.ListAreaUsecase;
import org.acme.features.market.area.application.usecase.retrieve.AreaRetrieveQuery;
import org.acme.features.market.area.application.usecase.retrieve.RetrieveAreaUsecase;
import org.acme.features.market.area.application.usecase.update.AreaUpdateCommand;
import org.acme.features.market.area.application.usecase.update.UpdateAreaUsecase;
import org.acme.features.market.area.domain.gateway.AreaCursor;
import org.acme.features.market.area.domain.gateway.AreaFilter;
import org.acme.features.market.area.domain.gateway.AreaOrder;
import org.acme.features.market.area.domain.model.AreaReference;
import org.acme.features.market.area.domain.model.valueobject.AreaNameVO;
import org.acme.features.market.area.domain.model.valueobject.AreaPlaceVO;
import org.acme.features.market.area.domain.model.valueobject.AreaUidVO;
import org.acme.features.market.area.domain.model.valueobject.AreaVersionVO;
import org.acme.features.market.place.domain.model.PlaceReference;
import org.acme.generated.openapi.api.AreaApi;
import org.acme.generated.openapi.model.Area;
import org.acme.generated.openapi.model.AreaList;
import org.acme.generated.openapi.model.PlaceRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class AreaController implements AreaApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final CreateAreaUsecase create;

  /**
   * Area
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DeleteAreaUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ListAreaUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RetrieveAreaUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UpdateAreaUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param area
   * @return
   */
  @Override
  @Transactional
  public Response areaApiCreate(Area area) {
    AreaDto created = create.create(
        AreaCreateCommand.builder().dto(toDomainModel(area)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response areaApiDelete(final String uid) {
    AreaDto deleted = delete.delete(AreaDeleteCommand.builder().reference(AreaReference.of(uid))
        .build(currentRequest.interaction()));
    return Response.ok(toApiModel(deleted)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param uids
   * @param search
   * @param name
   * @param place
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response areaApiList(final String uid, final List<String> uids, final String search,
      final String name, final String place, final Integer limit, final String sinceUid,
      final String sinceName, final String order) {
    List<AreaOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    AreaFilter.AreaFilterBuilder filterBuilder = AreaFilter.builder();
    AreaCursor.AreaCursorBuilder cursorBuilder = AreaCursor.builder();
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    filterBuilder = filterBuilder.uid(uid);
    filterBuilder = filterBuilder.uids(uids);
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    if (null != place) {
      filterBuilder = filterBuilder.place(PlaceReference.of(place));
    }
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    AreaFilter filter = filterBuilder.build();
    AreaCursor cursor = cursorBuilder.build();
    List<AreaDto> listed = list.list(
        AreaListQuery.builder().filter(filter).cursor(cursor).build(currentRequest.interaction()));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(toListApiModel(listed, filter, cursor)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response areaApiRetrieve(final String uid) {
    AreaDto retrieved = retrieve.retrieve(AreaRetrieveQuery.builder()
        .reference(AreaReference.of(uid)).build(currentRequest.interaction()));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param area
   * @return
   */
  @Override
  @Transactional
  public Response areaApiUpdate(final String uid, final Area area) {
    AreaDto updated = update.update(AreaUpdateCommand.builder().dto(toDomainModel(area))
        .reference(AreaReference.of(uid)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private AreaOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return AreaOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return AreaOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private Area toApiModel(AreaDto dto) {
    Area area = new Area();
    area.setUid(Optional.ofNullable(dto.getUid()).map(AreaUidVO::getValue).orElse(null));
    area.setName(Optional.ofNullable(dto.getName()).map(AreaNameVO::getValue).orElse(null));
    area.setPlace(new PlaceRef().$ref(
        Optional.ofNullable(dto.getPlace()).map(AreaPlaceVO::getReferenceValue).orElse(null)));
    area.setVersion(
        Optional.ofNullable(dto.getVersion()).flatMap(AreaVersionVO::getValue).orElse(null));
    return area;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param area
   * @return
   */
  private AreaDto toDomainModel(Area area) {
    AreaDto.AreaDtoBuilder builder = AreaDto.builder();
    if (null != area.getUid()) {
      builder = builder.uid(AreaUidVO.from(area.getUid()));
    }
    if (null != area.getName()) {
      builder = builder.name(AreaNameVO.from(area.getName()));
    }
    if (null != area.getPlace()) {
      builder = builder.place(AreaPlaceVO
          .fromReference(Optional.ofNullable(area.getPlace()).map(PlaceRef::get$Ref).orElse(null)));
    }
    if (null != area.getVersion()) {
      builder = builder.version(AreaVersionVO.from(area.getVersion()));
    }
    return builder.build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param areas
   * @param filter
   * @param cursor
   * @return
   */
  private AreaList toListApiModel(List<AreaDto> areas, AreaFilter filter, AreaCursor cursor) {
    Optional<AreaDto> last =
        areas.isEmpty() ? Optional.empty() : Optional.of(areas.get(areas.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append("&uids=" + uidsValue);
      next.append("&uids=" + uidsValue);
      first.append("&uids=" + uidsValue);
    }
    filter.getUid().ifPresent(uid -> {
      String uidValue = URLEncoder.encode(uid, StandardCharsets.UTF_8);
      self.append("&uid=" + uidValue);
      next.append("&uid=" + uidValue);
      first.append("&uid=" + uidValue);
    });
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append("&search=" + searchValue);
      next.append("&search=" + searchValue);
      first.append("&search=" + searchValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append("&name=" + nameValue);
      next.append("&name=" + nameValue);
      first.append("&name=" + nameValue);
    });
    filter.getPlace().ifPresent(filterPlace -> {
      String placeValue =
          URLEncoder.encode(String.valueOf(filterPlace.getUidValue()), StandardCharsets.UTF_8);
      self.append("&place=" + placeValue);
      next.append("&place=" + placeValue);
      first.append("&place=" + placeValue);
    });
    cursor.getLimit().ifPresent(limit -> {
      self.append("&limit=" + limit);
      first.append("&limit=" + limit);
      next.append("&limit=" + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append("&since-uid=" + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      next.append(
          "&since-uid=" + URLEncoder.encode(lastDto.getUid().getValue(), StandardCharsets.UTF_8));
      cursor.getSinceName().ifPresent(sinceName -> next.append(
          "&since-name=" + URLEncoder.encode(lastDto.getUid().getValue(), StandardCharsets.UTF_8)));
    });
    return new AreaList().items(areas.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final AreaOrder order) {
    if (null == order) {
      return null;
    } else if (order == AreaOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == AreaOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
