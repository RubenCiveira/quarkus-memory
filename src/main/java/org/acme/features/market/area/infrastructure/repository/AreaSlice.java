package org.acme.features.market.area.infrastructure.repository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.function.BiFunction;

import org.acme.common.action.Slide;
import org.acme.features.market.area.domain.gateway.AreaCursor;
import org.acme.features.market.area.domain.gateway.AreaFilter;
import org.acme.features.market.area.domain.model.Area;

class AreaSlice extends Slide<Area> {

  /**
   * @autogenerated SlideGenerator
   */
  private final List<Area> areas;

  /**
   * @autogenerated SlideGenerator
   */
  private final AreaCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final AreaFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<AreaFilter, AreaCursor, CompletionStage<Slide<Area>>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param limit
   * @param areas
   * @param gateway
   * @param filter
   * @param cursor
   */
  AreaSlice(final Optional<Integer> limit, final List<Area> areas,
      final BiFunction<AreaFilter, AreaCursor, CompletionStage<Slide<Area>>> gateway,
      final AreaFilter filter, final AreaCursor cursor) {
    super(limit);
    this.areas = areas;
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * area
   *
   * @autogenerated SlideGenerator
   * @return area
   */
  @Override
  public List<Area> getList() {
    return areas;
  }

  /**
   * @autogenerated SlideGenerator
   * @param limit
   * @return
   */
  @Override
  public CompletionStage<Slide<Area>> loadNext(int limit) {
    if (areas.isEmpty()) {
      return CompletableFuture.completedStage(this);
    } else {
      Area last = areas.get(areas.size() - 1);
      AreaCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
      return gateway.apply(this.filter, cr);
    }
  }
}
