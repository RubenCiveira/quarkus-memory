package org.acme.features.market.area.application;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.Area.AreaBuilder;
import org.acme.features.market.area.domain.model.valueobject.AreaNameVO;
import org.acme.features.market.area.domain.model.valueobject.AreaPlaceVO;
import org.acme.features.market.area.domain.model.valueobject.AreaUidVO;
import org.acme.features.market.area.domain.model.valueobject.AreaVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class AreaDto {

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param area The entity with the values
   * @return A dto with the entity data
   */
  public static AreaDto from(final Area area) {
    return AreaDto.builder().uid(area.getUid()).name(area.getName()).place(area.getPlace())
        .version(area.getVersion()).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  private static Map<String, BiConsumer<AreaDto, Area>> toFixCallbacks() {
    Map<String, BiConsumer<AreaDto, Area>> map = new HashMap<>();
    map.put("uid", (target, source) -> target.uid = source == null ? null : source.getUid());
    map.put("name", (target, source) -> target.name = source == null ? null : source.getName());
    map.put("place", (target, source) -> target.place = source == null ? null : source.getPlace());
    map.put("version",
        (target, source) -> target.version = source == null ? null : source.getVersion());
    return map;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  private static Map<String, Consumer<AreaDto>> toHideCallbacks() {
    Map<String, Consumer<AreaDto>> map = new HashMap<>();
    map.put("uid", dto -> dto.uid = null);
    map.put("name", dto -> dto.name = null);
    map.put("place", dto -> dto.place = null);
    map.put("version", dto -> dto.version = null);
    return map;
  }

  /**
   * @autogenerated EntityGenerator
   */
  private AreaNameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  private AreaPlaceVO place;

  /**
   * @autogenerated EntityGenerator
   */
  private AreaUidVO uid;

  /**
   * @autogenerated EntityGenerator
   */
  private AreaVersionVO version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param area The field to hide
   */
  public void fixField(final String field, final Area area) {
    Map<String, BiConsumer<AreaDto, Area>> toFix = toFixCallbacks();
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, area);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fixField(final String field) {
    fixField(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hideField(final String field) {
    Map<String, Consumer<AreaDto>> toHide = toHideCallbacks();
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @param original
   * @return The entity param with the new values
   */
  public AreaBuilder toEntityBuilder(final Optional<Area> original) {
    AreaBuilder builder = Area.builder();
    builder = setUidOrDefault(builder, original);
    builder = setNameOrDefault(builder, original);
    builder = setPlaceOrDefault(builder, original);
    builder = setVersionOrDefault(builder, original);
    return builder;
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Area.AreaBuilder setNameOrDefault(final AreaBuilder builder,
      final Optional<Area> original) {
    AreaNameVO value = null == name ? original.map(Area::getName).orElse(null) : name;
    return null == value ? builder : builder.name(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Area.AreaBuilder setPlaceOrDefault(final AreaBuilder builder,
      final Optional<Area> original) {
    AreaPlaceVO value = null == place ? original.map(Area::getPlace).orElse(null) : place;
    return null == value ? builder : builder.place(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Area.AreaBuilder setUidOrDefault(final AreaBuilder builder,
      final Optional<Area> original) {
    AreaUidVO value = null == uid ? original.map(Area::getUid).orElse(null) : uid;
    return null == value ? builder : builder.uid(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Area.AreaBuilder setVersionOrDefault(final AreaBuilder builder,
      final Optional<Area> original) {
    AreaVersionVO value = null == version ? original.map(Area::getVersion).orElse(null) : version;
    return null == value ? builder : builder.version(value);
  }
}
