package org.acme.features.market.area.domain.model.valueobject;

import org.acme.common.exception.ConstraintException;
import org.acme.common.validation.ConstraintFail;
import org.acme.common.validation.ConstraintFailList;
import org.acme.features.market.place.domain.model.PlaceRef;
import org.acme.features.market.place.domain.model.PlaceReference;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import lombok.With;

@Getter
@ToString
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class AreaPlaceVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param place
   * @return An empty instance
   */
  public static AreaPlaceVO from(final PlaceRef place) {
    return tryFrom(place);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param placeUid
   * @return An empty instance
   */
  public static AreaPlaceVO fromReference(final String placeUid) {
    return from(PlaceReference.of(placeUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param place
   * @return An empty instance
   */
  public static AreaPlaceVO tryFrom(final Object place) {
    ConstraintFailList list = new ConstraintFailList();
    AreaPlaceVO result = tryFrom(place, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param place temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static AreaPlaceVO tryFrom(final Object place, final ConstraintFailList fails) {
    if (null == place) {
      fails.add(new ConstraintFail("not-null", "place", null, "Cant be null"));
      return null;
    } else if (place instanceof PlaceRef) {
      return new AreaPlaceVO((PlaceRef) place);
    } else {
      fails.add(new ConstraintFail("wrong-type", "place", place.getClass(),
          "A PlaceRef type is expected for place"));
      return null;
    }
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param placeUid
   * @return An empty instance
   */
  public static AreaPlaceVO tryFromReference(final String placeUid) {
    return tryFrom(PlaceReference.of(placeUid));
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param placeUid
   * @param fails Error list
   * @return An empty instance
   */
  public static AreaPlaceVO tryFromReference(final String placeUid,
      final ConstraintFailList fails) {
    return tryFrom(PlaceReference.of(placeUid), fails);
  }

  /**
   * El place de area
   *
   * @autogenerated ValueObjectGenerator
   */
  private final PlaceRef value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public String getReferenceValue() {
    return value.getUidValue();
  }

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public PlaceRef getValue() {
    return value;
  }
}
