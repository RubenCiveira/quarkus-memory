package org.acme.features.market.area.application.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotFoundException;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.service.proposal.AreaFixedFieldsProposal;
import org.acme.features.market.area.application.service.proposal.AreaHiddenFieldsProposal;
import org.acme.features.market.area.application.service.proposal.AreaVisibilityQueryProposal;
import org.acme.features.market.area.application.service.proposal.AreaVisibleContentProposal;
import org.acme.features.market.area.domain.Areas;
import org.acme.features.market.area.domain.gateway.AreaCacheGateway;
import org.acme.features.market.area.domain.gateway.AreaCached;
import org.acme.features.market.area.domain.gateway.AreaCursor;
import org.acme.features.market.area.domain.gateway.AreaFilter;
import org.acme.features.market.area.domain.gateway.AreaReadRepositoryGateway;
import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.AreaRef;
import org.acme.features.market.place.application.service.PlacesVisibilityService;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class AreasVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Areas aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreaReadRepositoryGateway areaReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreaCacheGateway cache;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaFixedFieldsProposal> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaHiddenFieldsProposal> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaVisibilityQueryProposal> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaVisibleContentProposal> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreasCalculatorService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final PlacesVisibilityService placesVisibilityService;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return listVisibles(prev, AreaFilter.builder().uids(uids).build(), AreaCursor.builder().build())
        .isEmpty();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public AreaDto copyWithFixed(Interaction prev, AreaDto source, Area original) {
    AreaDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(field -> withReferences.fixField(field, original));
    return formula.copyWithFormulas(prev, withReferences, original);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public AreaDto copyWithFixed(Interaction prev, AreaDto source) {
    AreaDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(field -> withReferences.fixField(field));
    return formula.copyWithFormulas(prev, withReferences);
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return The input dto with hidden values
   */
  public AreaDto copyWithHidden(Interaction prev, Area area) {
    AreaDto target = AreaDto.from(area);
    fieldsToHide(prev, area).forEach(target::hideField);
    return target;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.calcultadFields());
    AreaFixedFieldsProposal value =
        AreaFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, AreaRef area) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, area));
    fields.addAll(aggregate.calcultadFields());
    AreaFixedFieldsProposal value =
        AreaFixedFieldsProposal.builder().fields(fields).area(area).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    AreaHiddenFieldsProposal value =
        AreaHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, AreaRef area) {
    Set<String> fields = new HashSet<>();
    AreaHiddenFieldsProposal value =
        AreaHiddenFieldsProposal.builder().fields(fields).area(area).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public AreaCached listCachedVisibles(Interaction prev, AreaFilter filter, AreaCursor cursor) {
    AreaFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<Area> listVisibles(Interaction prev, AreaFilter filter, AreaCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public AreaCached retrieveCachedVisible(Interaction prev, String uid) {
    AreaCursor cursor = AreaCursor.builder().limit(1).build();
    AreaFilter visibleFilter =
        applyPreVisibilityFilter(prev, AreaFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<Area> list = retrieveVisible(prev, uid).<List<Area>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<Area> retrieveVisible(Interaction prev, String uid) {
    AreaFilter filter = applyPreVisibilityFilter(prev, AreaFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private AreaFilter applyPreVisibilityFilter(Interaction prev, AreaFilter filter) {
    AreaVisibilityQueryProposal visible =
        AreaVisibilityQueryProposal.builder().filter(filter).interaction(prev).build();
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param areaRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, Area areaRef) {
    AreaVisibleContentProposal accesible = AreaVisibleContentProposal.builder().visible(true)
        .entity(areaRef).interaction(prev).build();
    fireVisibleList.fire(accesible);
    return accesible.getVisible();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<Area> queryItem(Interaction prev, String uid, AreaFilter filter) {
    return areaReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<Area> queryItems(Interaction prev, AreaFilter filter, AreaCursor cursor) {
    List<Area> list = new ArrayList<>();
    Iterator<Area> slide = areaReadRepositoryGateway.list(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private AreaDto visiblesReferences(Interaction prev, AreaDto source) {
    if (null != source.getPlace()) {
      boolean visible =
          placesVisibilityService.checkVisibility(prev, source.getPlace().getReferenceValue());
      if (!visible) {
        throw new NotFoundException("No place - " + source.getPlace().getReferenceValue());
      }
    }
    return source;
  }
}
