package org.acme.features.market.area.application.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.service.event.AreaFixedFields;
import org.acme.features.market.area.application.service.event.AreaHiddenFields;
import org.acme.features.market.area.application.service.event.AreaVisibilityQuery;
import org.acme.features.market.area.application.service.event.AreaVisibleContent;
import org.acme.features.market.area.domain.Areas;
import org.acme.features.market.area.domain.gateway.AreaCursor;
import org.acme.features.market.area.domain.gateway.AreaFilter;
import org.acme.features.market.area.domain.gateway.AreaReadRepositoryGateway;
import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.AreaRef;
import org.acme.features.market.place.application.service.PlacesVisibilityService;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class AreasVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Areas aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreaReadRepositoryGateway areaReadRepositoryGateway;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaFixedFields> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaHiddenFields> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaVisibilityQuery> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaVisibleContent> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreasFormulaService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final PlacesVisibilityService placesVisibilityService;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Boolean> checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).thenApply(Optional::isPresent);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaDto> copyWithFixed(Interaction prev, Area original, AreaDto source) {
    return visiblesReferences(prev, source)
        .thenCompose(dto -> fieldsToFix(prev, original).getFixed().thenApply(fixeds -> {
          fixeds.forEach(field -> dto.fixField(field, original));
          return dto;
        })).thenCompose(fixed -> formula.copyWithFormulas(prev, original, fixed));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaDto> copyWithFixed(Interaction prev, AreaDto source) {
    return visiblesReferences(prev, source)
        .thenCompose(dto -> fieldsToFix(prev).getFixed().thenApply(fixeds -> {
          fixeds.forEach(field -> dto.fixField(field));
          return dto;
        })).thenCompose(fixed -> formula.copyWithFormulas(prev, fixed));
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return The input dto with hidden values
   */
  public CompletionStage<AreaDto> copyWithHidden(Interaction prev, Area area) {
    return fieldsToHide(prev, area).getHidden().thenApply(hidden -> {
      AreaDto target = AreaDto.from(area);
      hidden.forEach(target::hideField);
      return target;
    });
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public AreaFixedFields fieldsToFix(Interaction prev) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden().thenApply(hidden -> {
      Set<String> set = new HashSet<>(aggregate.calcultadFields());
      set.addAll(hidden);
      return set;
    });
    AreaFixedFields value = AreaFixedFields.builder().fixed(fields).build(prev);
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return initialsFixFields
   */
  public AreaFixedFields fieldsToFix(Interaction prev, AreaRef area) {
    CompletionStage<Set<String>> fields = fieldsToFix(prev).getFixed()
        .thenCombine(fieldsToHide(prev, area).getHidden(), (set1, set2) -> {
          Set<String> set = new HashSet<>(set1);
          set.addAll(set2);
          return set;
        });
    AreaFixedFields value = AreaFixedFields.builder().fixed(fields).area(area).build(prev);
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public AreaHiddenFields fieldsToHide(Interaction prev) {
    CompletionStage<Set<String>> fields = CompletableFuture.completedFuture(Set.of());
    AreaHiddenFields value = AreaHiddenFields.builder().hidden(fields).build(prev);
    fireHide.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return initialsHideFields
   */
  public AreaHiddenFields fieldsToHide(Interaction prev, AreaRef area) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden();
    AreaHiddenFields value = AreaHiddenFields.builder().hidden(fields).area(area).build(prev);
    fireHide.fire(value);
    return value;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<List<Area>> listVisibles(Interaction prev, AreaFilter filter,
      AreaCursor cursor) {
    return applyPreVisibilityFilter(prev, filter)
        .thenCompose(visfilter -> areaReadRepositoryGateway.list(visfilter, cursor)
            .filterAndFillAgain(values -> evaluatePostVisibility(prev, values)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Optional<Area>> retrieveVisible(Interaction prev, String uid) {
    return applyPreVisibilityFilter(prev, AreaFilter.builder().uid(uid).build())
        .thenCompose(filter -> areaReadRepositoryGateway.retrieve(uid, Optional.of(filter))
            .thenCompose(stored -> stored.map(retrieved -> evaluatePostVisibility(prev, retrieved))
                .orElseGet(() -> CompletableFuture.completedStage(Optional.empty()))));
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private CompletionStage<AreaFilter> applyPreVisibilityFilter(Interaction prev,
      AreaFilter filter) {
    AreaVisibilityQuery visible =
        AreaVisibilityQuery.builder().filter(CompletableFuture.completedFuture(filter)).build(prev);
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param areaRefs The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<List<Area>> evaluatePostVisibility(Interaction prev,
      List<Area> areaRefs) {
    AreaVisibleContent list = AreaVisibleContent.builder()
        .visibles(CompletableFuture.completedFuture(new ArrayList<>(areaRefs))).build(prev);
    fireVisibleList.fire(list);
    return list.getVisibles();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param areaRef The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<Optional<Area>> evaluatePostVisibility(Interaction prev, Area areaRef) {
    return evaluatePostVisibility(prev, List.of(areaRef))
        .thenApply(list -> list.isEmpty() ? Optional.empty() : Optional.of(list.get(0)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<AreaDto> visiblesReferences(Interaction prev, AreaDto source) {
    List<CompletionStage<Boolean>> related = new ArrayList<>();
    if (null != source.getPlace()) {
      related.add(
          placesVisibilityService.checkVisibility(prev, source.getPlace().getReferenceValue()));
    }
    return CompletableFuture.allOf(related.toArray(new CompletableFuture[0]))
        .thenApply(_void -> source);
  }
}
