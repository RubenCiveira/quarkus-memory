package org.acme.features.market.area.application.service;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotFoundException;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.service.event.AreaFixedFieldsPipelineStageEvent;
import org.acme.features.market.area.application.service.event.AreaHiddenFieldsPipelineStageEvent;
import org.acme.features.market.area.application.service.event.AreaVisibilityQueryPipelineStageEvent;
import org.acme.features.market.area.application.service.event.AreaVisibleContentPipelineStageEvent;
import org.acme.features.market.area.domain.Areas;
import org.acme.features.market.area.domain.gateway.AreaCacheGateway;
import org.acme.features.market.area.domain.gateway.AreaCached;
import org.acme.features.market.area.domain.gateway.AreaCursor;
import org.acme.features.market.area.domain.gateway.AreaFilter;
import org.acme.features.market.area.domain.gateway.AreaReadRepositoryGateway;
import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.AreaRef;
import org.acme.features.market.place.application.service.PlacesVisibilityService;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.StatusCode;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Scope;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class AreasVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Areas aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreaReadRepositoryGateway areaReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreaCacheGateway cache;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaFixedFieldsPipelineStageEvent> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaHiddenFieldsPipelineStageEvent> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaVisibilityQueryPipelineStageEvent> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<AreaVisibleContentPipelineStageEvent> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final AreasFormulaService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final PlacesVisibilityService placesVisibilityService;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Tracer tracer;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Boolean> checkVisibility(Interaction prev, String uid) {
    Span startSpan = tracer.spanBuilder("area-check-item-visbility").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return retrieveVisible(prev, uid).thenApply(Optional::isPresent).whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Boolean> checkVisibility(Interaction prev, List<String> uids) {
    Span startSpan = tracer.spanBuilder("area-check-item-visbility").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return listVisibles(prev, AreaFilter.builder().uids(uids).build(),
          AreaCursor.builder().build()).thenApply(list -> list.size() == uids.size())
              .whenComplete((val, ex) -> {
                if (null == ex) {
                  startSpan.setStatus(StatusCode.OK);
                } else {
                  startSpan.recordException(ex).setStatus(StatusCode.ERROR);
                }
                startSpan.end();
              });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaDto> copyWithFixed(Interaction prev, Area original, AreaDto source) {
    Span startSpan = tracer.spanBuilder("area-copy-existent-with-fixed").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return visiblesReferences(prev, source)
          .thenCompose(dto -> fieldsToFix(prev, original).thenApply(fixeds -> {
            fixeds.forEach(field -> dto.fixField(field, original));
            return dto;
          })).thenCompose(fixed -> formula.copyWithFormulas(prev, original, fixed))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaDto> copyWithFixed(Interaction prev, AreaDto source) {
    Span startSpan = tracer.spanBuilder("area-copy-new-with-fixed").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return visiblesReferences(prev, source)
          .thenCompose(dto -> fieldsToFix(prev).thenApply(fixeds -> {
            fixeds.forEach(field -> dto.fixField(field));
            return dto;
          })).thenCompose(fixed -> formula.copyWithFormulas(prev, fixed))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return The input dto with hidden values
   */
  public CompletionStage<AreaDto> copyWithHidden(Interaction prev, Area area) {
    Span startSpan = tracer.spanBuilder("area-copy-with-hidden").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return fieldsToHide(prev, area).thenApply(hidden -> {
        AreaDto target = AreaDto.from(area);
        hidden.forEach(target::hideField);
        return target;
      }).whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public CompletionStage<Set<String>> fieldsToFix(Interaction prev) {
    Span startSpan = tracer.spanBuilder("area-field-to-fix-for-new").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields = fieldsToHide(prev).thenApply(hidden -> {
        Set<String> set = new HashSet<>(aggregate.calcultadFields());
        set.addAll(hidden);
        return set;
      });
      AreaFixedFieldsPipelineStageEvent value =
          AreaFixedFieldsPipelineStageEvent.builder().fields(fields).query(prev).build();
      fireFix.fire(value);
      return value.getFields().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return initialsFixFields
   */
  public CompletionStage<Set<String>> fieldsToFix(Interaction prev, AreaRef area) {
    Span startSpan = tracer.spanBuilder("area-field-to-fix-for-existent").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields =
          fieldsToFix(prev).thenCombine(fieldsToHide(prev, area), (set1, set2) -> {
            Set<String> set = new HashSet<>(set1);
            set.addAll(set2);
            return set;
          });
      AreaFixedFieldsPipelineStageEvent value =
          AreaFixedFieldsPipelineStageEvent.builder().fields(fields).area(area).query(prev).build();
      fireFix.fire(value);
      return value.getFields().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public CompletionStage<Set<String>> fieldsToHide(Interaction prev) {
    Span startSpan = tracer.spanBuilder("area-field-to-hide-for-new").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields = CompletableFuture.completedFuture(Set.of());
      AreaHiddenFieldsPipelineStageEvent value =
          AreaHiddenFieldsPipelineStageEvent.builder().fields(fields).query(prev).build();
      fireHide.fire(value);
      return value.getFields().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param area
   * @return initialsHideFields
   */
  public CompletionStage<Set<String>> fieldsToHide(Interaction prev, AreaRef area) {
    Span startSpan = tracer.spanBuilder("area-field-to-hide-for-existent").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields = fieldsToHide(prev);
      AreaHiddenFieldsPipelineStageEvent value = AreaHiddenFieldsPipelineStageEvent.builder()
          .fields(fields).area(area).query(prev).build();
      fireHide.fire(value);
      return value.getFields().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaCached> listCachedVisibles(Interaction prev, AreaFilter filter,
      AreaCursor cursor) {
    Span startSpan = tracer.spanBuilder("area-list-cached-visible").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, filter)
          .thenCompose(visfilter -> cache.retrieve(visfilter, cursor).thenCompose(cached -> {
            if (cached.isPresent()) {
              startSpan.setAttribute("source", "cache");
              return CompletableFuture.completedStage(cached.get());
            } else {
              startSpan.setAttribute("source", "gateway");
              return queryItems(prev, filter, cursor).thenApply(values -> {
                cache.store(filter, cursor, values);
                return AreaCached.builder().value(values).since(OffsetDateTime.now()).build();
              });
            }
          })).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<List<Area>> listVisibles(Interaction prev, AreaFilter filter,
      AreaCursor cursor) {
    Span startSpan = tracer.spanBuilder("area-list-visibles").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, filter)
          .thenCompose(visfilter -> queryItems(prev, visfilter, cursor)).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaCached> retrieveCachedVisible(Interaction prev, String uid) {
    Span startSpan = tracer.spanBuilder("area-retrieve-cached-visible").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, AreaFilter.builder().uid(uid).build())
          .thenCompose(filter -> {
            filter.setUid(uid);
            AreaCursor cursor = AreaCursor.builder().limit(1).build();
            return cache.retrieve(filter, cursor).thenCompose(cached -> {
              if (cached.isPresent()) {
                startSpan.setAttribute("source", "cache");
                return CompletableFuture.completedStage(cached.get());
              } else {
                startSpan.setAttribute("source", "gateway");
                return queryItem(prev, uid, filter).thenApply(value -> {
                  List<Area> values = value.map(List::of).orElseGet(List::of);
                  cache.store(filter, cursor, values);
                  return AreaCached.builder().value(values).since(OffsetDateTime.now()).build();
                });
              }
            });
          }).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Optional<Area>> retrieveVisible(Interaction prev, String uid) {
    Span startSpan = tracer.spanBuilder("area-retrieve-visible").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, AreaFilter.builder().uid(uid).build())
          .thenCompose(filter -> queryItem(prev, uid, filter)).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private CompletionStage<AreaFilter> applyPreVisibilityFilter(Interaction prev,
      AreaFilter filter) {
    Span startSpan = tracer.spanBuilder("area-calculate-visible-filter").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      AreaVisibilityQueryPipelineStageEvent visible = AreaVisibilityQueryPipelineStageEvent
          .builder().filter(CompletableFuture.completedFuture(filter)).interaction(prev).build();
      fireVisibleFilter.fire(visible);
      return visible.getFilter().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param areaRefs The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<List<Area>> evaluatePostVisibility(Interaction prev,
      List<Area> areaRefs) {
    Span startSpan = tracer.spanBuilder("area-evaluate-liste-post-visibility").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      AreaVisibleContentPipelineStageEvent list = AreaVisibleContentPipelineStageEvent.builder()
          .visibles(CompletableFuture.completedFuture(new ArrayList<>(areaRefs))).interaction(prev)
          .build();
      fireVisibleList.fire(list);
      return list.getVisibles().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param areaRef The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<Optional<Area>> evaluatePostVisibility(Interaction prev, Area areaRef) {
    Span startSpan = tracer.spanBuilder("area-evaluate-item-post-visibility").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return evaluatePostVisibility(prev, List.of(areaRef))
          .thenApply(list -> list.isEmpty() ? Optional.<Area>empty() : Optional.of(list.get(0)))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<Optional<Area>> queryItem(Interaction prev, String uid,
      AreaFilter filter) {
    Span startSpan = tracer.spanBuilder("area-query-item").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return areaReadRepositoryGateway.retrieve(uid, Optional.of(filter))
          .thenCompose(stored -> stored.map(retrieved -> evaluatePostVisibility(prev, retrieved))
              .orElseGet(() -> CompletableFuture.completedStage(Optional.empty())))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<List<Area>> queryItems(Interaction prev, AreaFilter filter,
      AreaCursor cursor) {
    Span startSpan = tracer.spanBuilder("area-query-items").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return areaReadRepositoryGateway.list(filter, cursor)
          .thenCompose(
              slide -> slide.filterAndFillAgain(values -> evaluatePostVisibility(prev, values)))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<AreaDto> visiblesReferences(Interaction prev, AreaDto source) {
    Span startSpan = tracer.spanBuilder("area-visibles-reference").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      List<CompletionStage<Boolean>> related = new ArrayList<>();
      if (null != source.getPlace()) {
        related.add(
            placesVisibilityService.checkVisibility(prev, source.getPlace().getReferenceValue())
                .whenComplete((visible, fail) -> {
                  if (!visible) {
                    throw new NotFoundException(
                        "No place - " + source.getPlace().getReferenceValue());
                  }
                }));
      }
      return CompletableFuture.allOf(related.toArray(new CompletableFuture[0]))
          .thenApply(_void -> source).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }
}
