package org.acme.features.market.area.application.service;

import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.service.event.AreaFormulaBuilderPipelineStageEvent;
import org.acme.features.market.area.domain.model.Area;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.StatusCode;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Scope;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class AreasFormulaService {

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated FormulaServiceGenerator
   */
  private final Event<AreaFormulaBuilderPipelineStageEvent> formulaBuilder;

  /**
   * @autogenerated FormulaServiceGenerator
   */
  private final Tracer tracer;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated FormulaServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaDto> copyWithFormulas(Interaction prev, Area original,
      AreaDto source) {
    Span startSpan = tracer.spanBuilder("-copy-existent-with-formulas").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      AreaFormulaBuilderPipelineStageEvent formulas = AreaFormulaBuilderPipelineStageEvent.builder()
          .dto(CompletableFuture.completedFuture(source)).original(original).interaction(prev)
          .build();
      formulaBuilder.fire(formulas);
      return formulas.getDto().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated FormulaServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<AreaDto> copyWithFormulas(Interaction prev, AreaDto source) {
    Span startSpan = tracer.spanBuilder("-copy-new-with-formulas").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      AreaFormulaBuilderPipelineStageEvent formulas = AreaFormulaBuilderPipelineStageEvent.builder()
          .dto(CompletableFuture.completedFuture(source)).interaction(prev).build();
      formulaBuilder.fire(formulas);
      return formulas.getDto().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }
}
