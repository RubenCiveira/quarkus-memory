package org.acme.features.market.area.application.usecase.retrieve;

import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.area.application.service.AreasVisibilityService;
import org.acme.features.market.area.application.usecase.retrieve.event.AreaRetrieveAllowPipelineStageEvent;
import org.acme.features.market.area.domain.gateway.AreaCached;
import org.acme.features.market.area.domain.model.AreaRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveAreaUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<AreaRetrieveAllowPipelineStageEvent> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final AreasVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query, final AreaRef reference) {
    AreaRetrieveAllowPipelineStageEvent base = AreaRetrieveAllowPipelineStageEvent.build(query,
        Optional.of(reference), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    AreaRetrieveAllowPipelineStageEvent base = AreaRetrieveAllowPipelineStageEvent.build(query,
        Optional.empty(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<AreaRetrieveResult> retrieve(final AreaRetrieveQuery query) {
    CompletionStage<AreaCached> result = allow(query, query.getReference()).thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.retrieveCachedVisible(query, query.getReference().getUidValue());
    });
    return result.thenCompose(op -> this.mapEntity(query, op));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param oparea
   * @return The slide with some values
   */
  private CompletionStage<AreaRetrieveResult> mapEntity(final AreaRetrieveQuery query,
      final AreaCached oparea) {
    return oparea.first()
        .map(area -> visibility.copyWithHidden(query, area)
            .thenApply(areaWithHidden -> AreaRetrieveResult.builder().interaction(query)
                .area(Optional.of(areaWithHidden)).since(oparea.getSince()).build()))
        .orElseGet(() -> CompletableFuture.completedFuture(AreaRetrieveResult.builder()
            .interaction(query).area(Optional.empty()).since(OffsetDateTime.now()).build()));
  }
}
