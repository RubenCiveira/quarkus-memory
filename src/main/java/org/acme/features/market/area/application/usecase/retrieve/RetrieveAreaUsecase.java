package org.acme.features.market.area.application.usecase.retrieve;

import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.exception.NotFoundException;
import org.acme.common.security.Allow;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.service.AreasVisibilityService;
import org.acme.features.market.area.domain.gateway.AreaCached;
import org.acme.features.market.area.domain.model.AreaRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveAreaUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<AreaRetrieveAllowProposal> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final AreasVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final AreaRef reference) {
    AreaRetrieveAllowProposal base =
        AreaRetrieveAllowProposal.build(query, Optional.of(reference), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    AreaRetrieveAllowProposal base =
        AreaRetrieveAllowProposal.build(query, Optional.empty(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public AreaDto retrieve(final AreaRetrieveQuery query) {
    Allow detail = allow(query, query.getReference());
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    AreaCached retrieveCachedVisible =
        visibility.retrieveCachedVisible(query, query.getReference().getUidValue());
    return retrieveCachedVisible.first().map(first -> visibility.copyWithHidden(query, first))
        .orElseThrow(() -> new NotFoundException(""));
  }
}
