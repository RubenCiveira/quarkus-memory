package org.acme.features.market.area.application.usecase.retrieve;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.area.application.AreaDto;
import org.acme.features.market.area.application.service.AreasVisibilityService;
import org.acme.features.market.area.domain.model.Area;
import org.acme.features.market.area.domain.model.AreaRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveAreaUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<AreaRetrieveAllow> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final AreasVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public AreaRetrieveAllow allow(final Interaction query, final AreaRef reference) {
    AreaRetrieveAllow base =
        AreaRetrieveAllow.build(query, Optional.of(reference), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public AreaRetrieveAllow allow(final Interaction query) {
    AreaRetrieveAllow base =
        AreaRetrieveAllow.build(query, Optional.empty(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public AreaRetrieveResult retrieve(final AreaRetrieveQuery query) {
    CompletionStage<Optional<Area>> result =
        allow(query, query.getReference()).getDetail().thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return visibility.retrieveVisible(query, query.getReference().getUidValue());
        });
    return AreaRetrieveResult.builder().interaction(query)
        .area(result.thenCompose(op -> this.mapEntity(query, op))).build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param oparea
   * @return The slide with some values
   */
  private CompletionStage<Optional<AreaDto>> mapEntity(final AreaRetrieveQuery query,
      final Optional<Area> oparea) {
    return oparea.map(area -> visibility.copyWithHidden(query, area).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
