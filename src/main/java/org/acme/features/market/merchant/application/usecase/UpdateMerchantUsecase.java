package org.acme.features.market.merchant.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.merchant.application.allow.MerchantUpdateAllow;
import org.acme.features.market.merchant.application.interaction.MerchantDto;
import org.acme.features.market.merchant.application.interaction.command.MerchantUpdateCommand;
import org.acme.features.market.merchant.application.interaction.query.MerchantEntityAllowQuery;
import org.acme.features.market.merchant.application.interaction.result.MerchantUpdateResult;
import org.acme.features.market.merchant.application.usecase.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.Merchants;
import org.acme.features.market.merchant.domain.gateway.MerchantFilter;
import org.acme.features.market.merchant.domain.gateway.MerchantWriteRepositoryGateway;
import org.acme.features.market.merchant.domain.model.Merchant;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class UpdateMerchantUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Merchants aggregate;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final MerchantWriteRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<MerchantUpdateAllow> updateAllow;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public MerchantUpdateAllow allow(final MerchantEntityAllowQuery query) {
    MerchantUpdateAllow base =
        MerchantUpdateAllow.build(query.getReference(), true, "Allowed by default");
    updateAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @return
   */
  public MerchantUpdateAllow allow() {
    return null;
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantUpdateResult update(final MerchantUpdateCommand command) {
    CompletionStage<Optional<Merchant>> updated = allow(command).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.copyWithFixed(command, command.getDto()).thenCompose(builder -> {
        MerchantFilter filter =
            MerchantFilter.builder().uid(command.getReference().getUidValue()).build();
        return retrieve(command, filter).thenCompose(op -> saveIfIsPresent(op, builder));
      });
    });
    return MerchantUpdateResult.builder().command(command)
        .merchant(updated.thenCompose(entity -> mapEntity(command, entity))).build();
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  private MerchantUpdateAllow allow(final MerchantUpdateCommand query) {
    return allow(MerchantEntityAllowQuery.builder().reference(query.getReference()).build(query));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opmerchant
   * @return The slide with some values
   */
  private CompletionStage<Optional<MerchantDto>> mapEntity(final MerchantUpdateCommand command,
      final Optional<Merchant> opmerchant) {
    return opmerchant.map(merchant -> visibility.hide(command, merchant).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param filter a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletionStage<Optional<Merchant>> retrieve(final MerchantUpdateCommand command,
      final MerchantFilter filter) {
    return visibility.visibleFilter(command, filter).thenCompose(visibleFilter -> gateway
        .retrieve(command.getReference().getUidValue(), Optional.of(visibleFilter)));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param original
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletionStage<Optional<Merchant>> saveEntity(final Merchant original,
      final MerchantDto dto) {
    return aggregate.modify(original, dto.toEntityBuilder())
        .thenCompose(merchant -> gateway.update(merchant).thenApply(Optional::of));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param result
   * @param dto a filter to retrieve only matching values
   * @return The slide with some values
   */
  private CompletionStage<Optional<Merchant>> saveIfIsPresent(final Optional<Merchant> result,
      final MerchantDto dto) {
    return result.map(original -> saveEntity(original, dto))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
