package org.acme.features.market.merchant.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.merchant.application.allow.MerchantCreateAllow;
import org.acme.features.market.merchant.application.interaction.MerchantDto;
import org.acme.features.market.merchant.application.interaction.command.MerchantCreateCommand;
import org.acme.features.market.merchant.application.interaction.query.MerchantAllowQuery;
import org.acme.features.market.merchant.application.interaction.result.MerchantCreateResult;
import org.acme.features.market.merchant.application.usecase.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.Merchants;
import org.acme.features.market.merchant.domain.gateway.MerchantWriteRepositoryGateway;
import org.acme.features.market.merchant.domain.model.Merchant;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreateMerchantUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Merchants aggregate;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<MerchantCreateAllow> createAllow;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final MerchantWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public MerchantCreateAllow allow(final MerchantAllowQuery query) {
    MerchantCreateAllow base = MerchantCreateAllow.build(true, "Allowed by default");
    createAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantCreateResult create(final MerchantCreateCommand query) {
    CompletionStage<Optional<Merchant>> create = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.copyWithFixed(query, query.getDto())
          .thenCompose(builder -> aggregate.initialize(builder.toEntityBuilder(Optional.empty()))
              .thenCompose(merchantEntity -> createAndVerify(query, merchantEntity)));
    });
    return MerchantCreateResult.builder().command(query)
        .merchant(create.thenCompose(merchant -> mapEntity(query, merchant))).build();
  }

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  private MerchantCreateAllow allow(final MerchantCreateCommand query) {
    return allow(MerchantAllowQuery.builder().build(query));
  }

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param merchantEntity
   * @return
   */
  private CompletionStage<Optional<Merchant>> createAndVerify(final MerchantCreateCommand query,
      final Merchant merchantEntity) {
    return gateway.create(merchantEntity,
        created -> visibility.checkVisibility(query, created.getUidValue()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opmerchant
   * @return The slide with some values
   */
  private CompletionStage<Optional<MerchantDto>> mapEntity(final MerchantCreateCommand command,
      final Optional<Merchant> opmerchant) {
    return opmerchant
        .map(merchant -> visibility.copyWithHidden(command, merchant).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
