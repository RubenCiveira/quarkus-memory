package org.acme.features.market.merchant.domain.model;

import java.util.Optional;

import org.acme.common.exception.ConstraintException;
import org.acme.common.validation.ConstraintFail;
import org.acme.common.validation.ConstraintFailList;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantEnabledVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantKeyVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantNameVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantUidVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantVersionVO;

import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;

@Getter
@ToString
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Merchant implements MerchantRef {

  /**
   * @autogenerated EntityGenerator
   */
  public static class MerchantBuilder {

    /**
     * @autogenerated EntityGenerator
     * @return
     */
    public Merchant buildValid() {
      ConstraintFailList list = new ConstraintFailList();
      if (null == uid) {
        list.add(new ConstraintFail("REQUIRED", "uid", null));
      }
      if (null == name) {
        list.add(new ConstraintFail("REQUIRED", "name", null));
      }
      if (null == enabled) {
        list.add(new ConstraintFail("REQUIRED", "enabled", null));
      }
      if (list.hasErrors()) {
        throw new ConstraintException(list);
      }
      return build();
    }

    /**
     * @autogenerated EntityGenerator
     * @param enabled
     * @return
     */
    public MerchantBuilder enabledValue(final Boolean enabled) {
      return enabled(MerchantEnabledVO.from(enabled));
    }

    /**
     * @autogenerated EntityGenerator
     * @param key
     * @return
     */
    public MerchantBuilder keyValue(final String key) {
      return key(MerchantKeyVO.from(key));
    }

    /**
     * @autogenerated EntityGenerator
     * @param name
     * @return
     */
    public MerchantBuilder nameValue(final String name) {
      return name(MerchantNameVO.from(name));
    }

    /**
     * @autogenerated EntityGenerator
     * @param uid
     * @return
     */
    public MerchantBuilder uidValue(final String uid) {
      return uid(MerchantUidVO.from(uid));
    }

    /**
     * @autogenerated EntityGenerator
     * @param version
     * @return
     */
    public MerchantBuilder versionValue(final Integer version) {
      return version(MerchantVersionVO.from(version));
    }
  }

  /**
   * The indicator to allow the account be used without deleting it
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private MerchantEnabledVO enabled;

  /**
   * El key de merchant
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private MerchantKeyVO key = MerchantKeyVO.empty();

  /**
   * El name de merchant
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private MerchantNameVO name;

  /**
   * A number to identify the db record
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private MerchantUidVO uid;

  /**
   * Campo con el n√∫mero de version de merchant para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private MerchantVersionVO version = MerchantVersionVO.empty();

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Boolean getEnabledValue() {
    return getEnabled().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<String> getKeyValue() {
    return getKey().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getNameValue() {
    return getName().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getUidValue() {
    return getUid().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Merchant withEmptyKey() {
    return withKey(MerchantKeyVO.empty());
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Merchant withEmptyVersion() {
    return withVersion(MerchantVersionVO.empty());
  }

  /**
   * @autogenerated EntityGenerator
   * @param enabled
   * @return
   */
  public Merchant withEnabledValue(final Boolean enabled) {
    return withEnabled(MerchantEnabledVO.from(enabled));
  }

  /**
   * @autogenerated EntityGenerator
   * @param key
   * @return
   */
  public Merchant withKeyValue(final String key) {
    return withKey(MerchantKeyVO.from(key));
  }

  /**
   * @autogenerated EntityGenerator
   * @param key
   * @return
   */
  public Merchant withKeyValue(final Optional<String> key) {
    return key.isPresent() ? withKey(MerchantKeyVO.from(key.get())) : withEmptyKey();
  }

  /**
   * @autogenerated EntityGenerator
   * @param name
   * @return
   */
  public Merchant withNameValue(final String name) {
    return withName(MerchantNameVO.from(name));
  }

  /**
   * @autogenerated EntityGenerator
   * @param uid
   * @return
   */
  public Merchant withUidValue(final String uid) {
    return withUid(MerchantUidVO.from(uid));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Merchant withVersionValue(final Integer version) {
    return withVersion(MerchantVersionVO.from(version));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Merchant withVersionValue(final Optional<Integer> version) {
    return version.isPresent() ? withVersion(MerchantVersionVO.from(version.get()))
        : withEmptyVersion();
  }
}
