package org.acme.features.market.merchant.application.usecase.enable;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.merchant.application.MerchantDto;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.Merchants;
import org.acme.features.market.merchant.domain.gateway.MerchantWriteRepositoryGateway;
import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.MerchantRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class EnableMerchantUsecase {

  /**
   * @autogenerated ActionUsecaseGenerator
   */
  private final Merchants aggregate;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ActionUsecaseGenerator
   */
  private final Event<MerchantEnableAllow> enableAllow;

  /**
   * @autogenerated ActionUsecaseGenerator
   */
  private final MerchantWriteRepositoryGateway gateway;

  /**
   * @autogenerated ActionUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated ActionUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public MerchantEnableAllow allow(final Interaction query, final MerchantRef reference) {
    MerchantEnableAllow base =
        MerchantEnableAllow.build(query, Optional.of(reference), true, "Allowed by default");
    enableAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated ActionUsecaseGenerator
   * @param query
   * @return
   */
  public MerchantEnableAllow allow(final Interaction query) {
    MerchantEnableAllow base =
        MerchantEnableAllow.build(query, Optional.empty(), true, "Allowed by default");
    enableAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated ActionUsecaseGenerator
   * @return
   */
  public MerchantEnableAllow allow() {
    return null;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantEnableResult enable(final MerchantEnableCommand command) {
    CompletionStage<Optional<Merchant>> updated =
        allow(command, command.getReference()).getDetail().thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return visibility.retrieveVisible(command, command.getReference().getUidValue())
              .thenCompose(op -> enableIfIsPresent(op));
        });
    return MerchantEnableResult.builder().command(command)
        .merchant(updated.thenCompose(entity -> mapEntity(command, entity))).build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param original
   * @return The slide with some values
   */
  private CompletionStage<Optional<Merchant>> enableEntity(final Merchant original) {
    return aggregate.enable(original)
        .thenCompose(merchant -> gateway.update(original, merchant).thenApply(Optional::of));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param result
   * @return The slide with some values
   */
  private CompletionStage<Optional<Merchant>> enableIfIsPresent(final Optional<Merchant> result) {
    return result.map(original -> enableEntity(original))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opmerchant
   * @return The slide with some values
   */
  private CompletionStage<Optional<MerchantDto>> mapEntity(final MerchantEnableCommand command,
      final Optional<Merchant> opmerchant) {
    return opmerchant
        .map(merchant -> visibility.copyWithHidden(command, merchant).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
