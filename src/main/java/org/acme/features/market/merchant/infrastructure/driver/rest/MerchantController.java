package org.acme.features.market.merchant.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import org.acme.common.batch.BatchIdentificator;
import org.acme.common.batch.BatchProgress;
import org.acme.common.infrastructure.CurrentRequest;
import org.acme.features.market.merchant.application.MerchantDto;
import org.acme.features.market.merchant.application.usecase.create.CreateMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.create.MerchantCreateCommand;
import org.acme.features.market.merchant.application.usecase.delete.DeleteMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.delete.MerchantCheckBatchDeleteStatusQuery;
import org.acme.features.market.merchant.application.usecase.delete.MerchantDeleteAllInBatchCommand;
import org.acme.features.market.merchant.application.usecase.delete.MerchantDeleteCommand;
import org.acme.features.market.merchant.application.usecase.disable.DisableMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.disable.MerchantDisableCommand;
import org.acme.features.market.merchant.application.usecase.enable.EnableMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.enable.MerchantEnableCommand;
import org.acme.features.market.merchant.application.usecase.list.ListMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.list.MerchantListQuery;
import org.acme.features.market.merchant.application.usecase.retrieve.MerchantRetrieveQuery;
import org.acme.features.market.merchant.application.usecase.retrieve.RetrieveMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.update.MerchantUpdateCommand;
import org.acme.features.market.merchant.application.usecase.update.UpdateMerchantUsecase;
import org.acme.features.market.merchant.domain.gateway.MerchantCursor;
import org.acme.features.market.merchant.domain.gateway.MerchantFilter;
import org.acme.features.market.merchant.domain.gateway.MerchantOrder;
import org.acme.features.market.merchant.domain.model.MerchantReference;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantEnabledVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantKeyVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantNameVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantUidVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantVersionVO;
import org.acme.generated.openapi.api.MerchantApi;
import org.acme.generated.openapi.model.Merchant;
import org.acme.generated.openapi.model.MerchantList;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MerchantController implements MerchantApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final CreateMerchantUsecase create;

  /**
   * Merchant
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DeleteMerchantUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DisableMerchantUsecase disable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final EnableMerchantUsecase enable;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ListMerchantUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RetrieveMerchantUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UpdateMerchantUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param enabled
   * @param name
   * @return
   */
  @Override
  public Response merchantApiBatchDelete(final List<String> uids, final String search,
      final Boolean enabled, final String name) {
    MerchantFilter.MerchantFilterBuilder filterBuilder = MerchantFilter.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.enabled(enabled);
    filterBuilder = filterBuilder.name(name);
    MerchantFilter filter = filterBuilder.build();
    BatchIdentificator task = delete.delete(MerchantDeleteAllInBatchCommand.builder().filter(filter)
        .build(currentRequest.interaction()));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param batchId
   * @return
   */
  @Override
  public Response merchantApiBatchDeleteQuery(final String batchId) {
    BatchProgress task = delete.checkProgress(MerchantCheckBatchDeleteStatusQuery.builder()
        .taskId(batchId).build(currentRequest.interaction()));
    return Response.ok(task).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param merchant
   * @return
   */
  @Override
  @Transactional
  public Response merchantApiCreate(Merchant merchant) {
    MerchantDto created = create.create(MerchantCreateCommand.builder().dto(toDomainModel(merchant))
        .build(currentRequest.interaction()));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response merchantApiDelete(final String uid) {
    MerchantDto deleted = delete.delete(MerchantDeleteCommand.builder()
        .reference(MerchantReference.of(uid)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(deleted)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response merchantApiDisable(final String uid) {
    MerchantDto updated = disable.disable(MerchantDisableCommand.builder()
        .reference(MerchantReference.of(uid)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response merchantApiEnable(final String uid) {
    MerchantDto updated = enable.enable(MerchantEnableCommand.builder()
        .reference(MerchantReference.of(uid)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param enabled
   * @param name
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response merchantApiList(final List<String> uids, final String search,
      final Boolean enabled, final String name, final Integer limit, final String sinceUid,
      final String sinceName, final String order) {
    List<MerchantOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    MerchantFilter.MerchantFilterBuilder filterBuilder = MerchantFilter.builder();
    MerchantCursor.MerchantCursorBuilder cursorBuilder = MerchantCursor.builder();
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.enabled(enabled);
    filterBuilder = filterBuilder.name(name);
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    MerchantFilter filter = filterBuilder.build();
    MerchantCursor cursor = cursorBuilder.build();
    List<MerchantDto> listed = list.list(MerchantListQuery.builder().filter(filter).cursor(cursor)
        .build(currentRequest.interaction()));
    return currentRequest.cacheableResponse(listed, toListApiModel(listed, filter, cursor),
        "merchant-" + String.valueOf(("" + filter + cursor).hashCode()));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response merchantApiRetrieve(final String uid) {
    MerchantDto retrieved = retrieve.retrieve(MerchantRetrieveQuery.builder()
        .reference(MerchantReference.of(uid)).build(currentRequest.interaction()));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param merchant
   * @return
   */
  @Override
  @Transactional
  public Response merchantApiUpdate(final String uid, final Merchant merchant) {
    MerchantDto updated = update.update(MerchantUpdateCommand.builder().dto(toDomainModel(merchant))
        .reference(MerchantReference.of(uid)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private MerchantOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return MerchantOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return MerchantOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private Merchant toApiModel(MerchantDto dto) {
    Merchant merchant = new Merchant();
    merchant.setUid(Optional.ofNullable(dto.getUid()).map(MerchantUidVO::getValue).orElse(null));
    merchant.setName(Optional.ofNullable(dto.getName()).map(MerchantNameVO::getValue).orElse(null));
    merchant.setEnabled(
        Optional.ofNullable(dto.getEnabled()).map(MerchantEnabledVO::getValue).orElse(null));
    merchant
        .setKey(Optional.ofNullable(dto.getKey()).flatMap(MerchantKeyVO::getValue).orElse(null));
    merchant.setVersion(
        Optional.ofNullable(dto.getVersion()).flatMap(MerchantVersionVO::getValue).orElse(null));
    return merchant;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param merchant
   * @return
   */
  private MerchantDto toDomainModel(Merchant merchant) {
    MerchantDto.MerchantDtoBuilder builder = MerchantDto.builder();
    if (null != merchant.getUid()) {
      builder = builder.uid(MerchantUidVO.from(merchant.getUid()));
    }
    if (null != merchant.getName()) {
      builder = builder.name(MerchantNameVO.from(merchant.getName()));
    }
    if (null != merchant.getEnabled()) {
      builder = builder.enabled(MerchantEnabledVO.from(merchant.getEnabled()));
    }
    if (null != merchant.getKey()) {
      builder = builder.key(MerchantKeyVO.from(merchant.getKey()));
    }
    if (null != merchant.getVersion()) {
      builder = builder.version(MerchantVersionVO.from(merchant.getVersion()));
    }
    return builder.build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param merchants
   * @param filter
   * @param cursor
   * @return
   */
  private MerchantList toListApiModel(List<MerchantDto> merchants, MerchantFilter filter,
      MerchantCursor cursor) {
    Optional<MerchantDto> last =
        merchants.isEmpty() ? Optional.empty() : Optional.of(merchants.get(merchants.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append("&uids=" + uidsValue);
      next.append("&uids=" + uidsValue);
      first.append("&uids=" + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append("&search=" + searchValue);
      next.append("&search=" + searchValue);
      first.append("&search=" + searchValue);
    });
    filter.getEnabled().ifPresent(filterEnabled -> {
      String enabledValue = URLEncoder.encode(Boolean.TRUE.equals(filterEnabled) ? "true" : "false",
          StandardCharsets.UTF_8);
      self.append("&enabled=" + enabledValue);
      next.append("&enabled=" + enabledValue);
      first.append("&enabled=" + enabledValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append("&name=" + nameValue);
      next.append("&name=" + nameValue);
      first.append("&name=" + nameValue);
    });
    cursor.getLimit().ifPresent(limit -> {
      self.append("&limit=" + limit);
      first.append("&limit=" + limit);
      next.append("&limit=" + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append("&since-uid=" + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      next.append(
          "&since-uid=" + URLEncoder.encode(lastDto.getUid().getValue(), StandardCharsets.UTF_8));
      cursor.getSinceName().ifPresent(sinceName -> next.append(
          "&since-name=" + URLEncoder.encode(lastDto.getUid().getValue(), StandardCharsets.UTF_8)));
    });
    return new MerchantList().items(merchants.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final MerchantOrder order) {
    if (null == order) {
      return null;
    } else if (order == MerchantOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == MerchantOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
