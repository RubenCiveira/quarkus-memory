package org.acme.features.market.merchant.application.service;

import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.validation.AbstractFailList;
import org.acme.common.validation.ConstraintFail;
import org.acme.features.market.merchant.application.MerchantDto;
import org.acme.features.market.merchant.application.MerchantPopulateResult;
import org.acme.features.market.merchant.domain.gateway.MerchantCursor;
import org.acme.features.market.merchant.domain.gateway.MerchantFilter;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantEnabledVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantKeyVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantNameVO;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MerchantsPopulateService {

  /**
   * @autogenerated PopulateServiceGenerator
   */
  private final MerchantsVisibilityService merchantVisibles;

  /**
   * @autogenerated PopulateServiceGenerator
   * @param interaction
   * @param map
   * @param fails
   * @return
   */
  public CompletionStage<Optional<MerchantPopulateResult>> populateInto(Interaction interaction,
      Map<String, String> map, AbstractFailList fails) {
    AbstractFailList constraints = new AbstractFailList();
    MerchantFilter.MerchantFilterBuilder filterBuilder = MerchantFilter.builder();
    Optional<String> hasName = Optional.ofNullable(map.get("name"));
    if (hasName.isPresent()) {
      filterBuilder = filterBuilder.name(hasName.get());
    } else {
      constraints.add(new ConstraintFail("name-required", "The name is required", null));
    }
    return merchantVisibles.listCachedVisibles(interaction, filterBuilder.build(),
        MerchantCursor.builder().limit(1).build()).thenApply(results -> {
          MerchantDto.MerchantDtoBuilder builder = MerchantDto.builder();
          Optional.ofNullable(map.get("Name"))
              .map(value -> MerchantNameVO.tryFrom(value, constraints)).ifPresent(builder::name);
          Optional.ofNullable(map.get("Enabled"))
              .map(value -> MerchantEnabledVO.tryFrom(value, constraints))
              .ifPresent(builder::enabled);
          Optional.ofNullable(map.get("Key"))
              .map(value -> MerchantKeyVO.tryFrom(value, constraints)).ifPresent(builder::key);
          if (constraints.isEmpty()) {
            return Optional.of(MerchantPopulateResult.builder()
                .original(results.first().orElse(null)).dto(builder.build()).build());
          } else {
            fails.add(constraints);
            return Optional.empty();
          }
        });
  }
}
