package org.acme.features.market.merchant.application.usecase.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.features.market.merchant.application.interaction.MerchantDto;
import org.acme.features.market.merchant.application.interaction.visibility.MerchantFixedFields;
import org.acme.features.market.merchant.application.interaction.visibility.MerchantHiddenFields;
import org.acme.features.market.merchant.application.interaction.visibility.MerchantListableContent;
import org.acme.features.market.merchant.application.interaction.visibility.MerchantVisibleContent;
import org.acme.features.market.merchant.application.interaction.visibility.MerchantVisibleFilter;
import org.acme.features.market.merchant.domain.Merchants;
import org.acme.features.market.merchant.domain.gateway.MerchantFilter;
import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.MerchantRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MerchantsVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Merchants aggregate;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MerchantFixedFields> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MerchantHiddenFields> fireHide;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MerchantListableContent> fireListableList;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MerchantVisibleFilter> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MerchantVisibleContent> fireVisibleList;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<MerchantDto> copyWithFixed(Interaction prev, Merchant original,
      MerchantDto source) {
    return fieldsToFix(prev, original).getFixed().thenApply(fixeds -> {
      fixeds.forEach(field -> source.fix(field, original));
      return source;
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<MerchantDto> copyWithFixed(Interaction prev, MerchantDto source) {
    return fieldsToFix(prev).getFixed().thenApply(fixeds -> {
      fixeds.forEach(field -> source.fix(field));
      return source;
    });
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public MerchantFixedFields fieldsToFix(Interaction prev) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden().thenApply(hidden -> {
      Set<String> set = new HashSet<>(aggregate.calcultadFields());
      set.addAll(hidden);
      return set;
    });
    MerchantFixedFields value = MerchantFixedFields.builder().fixed(fields).build(prev);
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param merchant
   * @return initialsFixFields
   */
  public MerchantFixedFields fieldsToFix(Interaction prev, MerchantRef merchant) {
    CompletionStage<Set<String>> fields = fieldsToFix(prev).getFixed()
        .thenCombine(fieldsToHide(prev, merchant).getHidden(), (set1, set2) -> {
          Set<String> set = new HashSet<>(set1);
          set.addAll(set2);
          return set;
        });
    MerchantFixedFields value =
        MerchantFixedFields.builder().fixed(fields).merchant(merchant).build(prev);
    fireFix.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public MerchantHiddenFields fieldsToHide(Interaction prev) {
    CompletionStage<Set<String>> fields = CompletableFuture.completedFuture(Set.of());
    MerchantHiddenFields value = MerchantHiddenFields.builder().hidden(fields).build(prev);
    fireHide.fire(value);
    return value;
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param merchant
   * @return initialsHideFields
   */
  public MerchantHiddenFields fieldsToHide(Interaction prev, MerchantRef merchant) {
    CompletionStage<Set<String>> fields = fieldsToHide(prev).getHidden();
    MerchantHiddenFields value =
        MerchantHiddenFields.builder().hidden(fields).merchant(merchant).build(prev);
    fireHide.fire(value);
    return value;
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param merchant
   * @return The input dto with hidden values
   */
  public CompletionStage<MerchantDto> hide(Interaction prev, Merchant merchant) {
    return fieldsToHide(prev, merchant).getHidden().thenApply(hidden -> {
      MerchantDto target = MerchantDto.from(merchant);
      hidden.forEach(target::hide);
      return target;
    });
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param merchantRefs The source interaction
   * @return The input dto with hidden values
   */
  public CompletionStage<List<Merchant>> listableFilter(Interaction prev,
      List<Merchant> merchantRefs) {
    return visibleFilter(prev, merchantRefs).thenCompose(visibles -> {
      MerchantListableContent list = MerchantListableContent.builder()
          .listables(CompletableFuture.completedFuture(visibles)).build(prev);
      fireListableList.fire(list);
      return list.getListables();
    });
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param merchantRefs The source interaction
   * @return The input dto with hidden values
   */
  public CompletionStage<List<Merchant>> visibleFilter(Interaction prev,
      List<Merchant> merchantRefs) {
    MerchantVisibleContent list = MerchantVisibleContent.builder()
        .visibles(CompletableFuture.completedFuture(new ArrayList<>(merchantRefs))).build(prev);
    fireVisibleList.fire(list);
    return list.getVisibles();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param merchantRef The source interaction
   * @return The input dto with hidden values
   */
  public CompletionStage<Optional<Merchant>> visibleFilter(Interaction prev, Merchant merchantRef) {
    return visibleFilter(prev, List.of(merchantRef))
        .thenApply(list -> list.isEmpty() ? Optional.empty() : Optional.of(list.get(0)));
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  public CompletionStage<MerchantFilter> visibleFilter(Interaction prev, MerchantFilter filter) {
    MerchantVisibleFilter visible = MerchantVisibleFilter.builder()
        .filter(CompletableFuture.completedFuture(filter)).build(prev);
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }
}
