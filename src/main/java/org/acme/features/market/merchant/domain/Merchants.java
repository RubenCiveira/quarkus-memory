package org.acme.features.market.merchant.domain;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.Merchant.MerchantBuilder;
import org.acme.features.market.merchant.domain.model.rule.MerchantBuildFormulaPipeline;
import org.acme.features.market.merchant.domain.model.rule.MerchantCreateRulePipeline;
import org.acme.features.market.merchant.domain.model.rule.MerchantDeleteRulePipeline;
import org.acme.features.market.merchant.domain.model.rule.MerchantDisableRulePipeline;
import org.acme.features.market.merchant.domain.model.rule.MerchantEnableRulePipeline;
import org.acme.features.market.merchant.domain.model.rule.MerchantUpdateRulePipeline;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class Merchants {

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MerchantBuildFormulaPipeline> buildingFormulas;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MerchantCreateRulePipeline> creatingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MerchantDeleteRulePipeline> deletingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MerchantDisableRulePipeline> disableingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MerchantEnableRulePipeline> enableingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MerchantUpdateRulePipeline> updatingRules;

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    Set<String> fields = new HashSet<>();
    buildingFormulas.forEach(formula -> fields.addAll(formula.fields()));
    return fields;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Merchant clean(final Merchant entity) {
    return MerchantDeleteRulePipeline.fire(deletingRules.iterator(), entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public Merchant disable(final Merchant base) {
    return MerchantDisableRulePipeline.fire(disableingRules.iterator(),
        build(base.toBuilder(), Optional.of(base), "enabled").enabledValue(false).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @return The entity
   */
  public Merchant enable(final Merchant base) {
    return MerchantEnableRulePipeline.fire(enableingRules.iterator(),
        build(base.toBuilder(), Optional.of(base), "enabled").enabledValue(true).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Merchant initialize(final MerchantBuilder builder) {
    return MerchantCreateRulePipeline.fire(creatingRules.iterator(),
        build(builder, Optional.empty(), null).build());
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Merchant modify(final Merchant base, final MerchantBuilder builder) {
    return MerchantUpdateRulePipeline.fire(updatingRules.iterator(),
        build(builder, Optional.of(base), null).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @param original a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private MerchantBuilder build(final MerchantBuilder builder, final Optional<Merchant> original,
      final String ignore) {
    return MerchantBuildFormulaPipeline.fire(buildingFormulas.iterator(), builder, original);
  }
}
