package org.acme.features.market.merchant.domain.model.valueobject;

import java.util.Optional;

import org.acme.common.exception.ConstraintException;
import org.acme.common.validation.AbstractFailList;
import org.acme.common.validation.ConstraintFail;
import org.acme.common.validation.ConstraintFailList;

import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.RequiredArgsConstructor;
import lombok.ToString;
import lombok.With;

@Getter
@ToString
@RequiredArgsConstructor
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class MerchantKeyVO {

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @return An empty instance
   */
  public static MerchantKeyVO empty() {
    return new MerchantKeyVO(null);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param key
   * @return An empty instance
   */
  public static MerchantKeyVO from(final String key) {
    return tryFrom(key);
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param key
   * @return An empty instance
   */
  public static MerchantKeyVO tryFrom(final Object key) {
    ConstraintFailList list = new ConstraintFailList();
    MerchantKeyVO result = tryFrom(key, list);
    if (list.hasErrors()) {
      throw new ConstraintException(list);
    }
    return result;
  }

  /**
   * An empty instance
   *
   * @autogenerated ValueObjectGenerator
   * @param key temptative value
   * @param fails Error list
   * @return An empty instance
   */
  public static <T extends AbstractFailList> MerchantKeyVO tryFrom(final Object key,
      final T fails) {
    if (null == key) {
      return new MerchantKeyVO(null);
    } else if (key instanceof String) {
      return new MerchantKeyVO((String) key);
    } else {
      fails.add(new ConstraintFail("wrong-type", "key", key.getClass(),
          "A String type is expected for key"));
      return null;
    }
  }

  /**
   * El key de merchant
   *
   * @autogenerated ValueObjectGenerator
   */
  private final String value;

  /**
   * @autogenerated ValueObjectGenerator
   * @return
   */
  public Optional<String> getValue() {
    return Optional.ofNullable(value);
  }
}
