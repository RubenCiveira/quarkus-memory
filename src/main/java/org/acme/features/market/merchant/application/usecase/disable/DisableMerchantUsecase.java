package org.acme.features.market.merchant.application.usecase.disable;

import java.time.Duration;
import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.batch.BatchIdentificator;
import org.acme.common.batch.BatchProgress;
import org.acme.common.batch.BatchService;
import org.acme.common.batch.ExecutorByDeferSteps;
import org.acme.common.batch.ExecutorPlan;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.exception.NotFoundException;
import org.acme.common.security.Allow;
import org.acme.features.market.merchant.application.MerchantDto;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.Merchants;
import org.acme.features.market.merchant.domain.gateway.MerchantCacheGateway;
import org.acme.features.market.merchant.domain.gateway.MerchantWriteRepositoryGateway;
import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.MerchantRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class DisableMerchantUsecase {

  /**
   * @autogenerated ChActionUsecaseGenerator
   */
  private final Merchants aggregate;

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated ChActionUsecaseGenerator
   */
  private final MerchantCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ChActionUsecaseGenerator
   */
  private final Event<MerchantDisableAllowProposal> disableAllow;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ChActionUsecaseGenerator
   */
  private final Event<MerchantDisableEvent> eventEmitter;

  /**
   * @autogenerated ChActionUsecaseGenerator
   */
  private final MerchantWriteRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ChActionUsecaseGenerator
   */
  private final Event<MerchantDisableProposal> proposalEmitter;

  /**
   * @autogenerated ChActionUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated ChActionUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final MerchantRef reference) {
    MerchantDisableAllowProposal base = MerchantDisableAllowProposal.build(query,
        Optional.of(reference), true, "Allowed by default");
    disableAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ChActionUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    MerchantDisableAllowProposal base =
        MerchantDisableAllowProposal.build(query, Optional.empty(), true, "Allowed by default");
    disableAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final MerchantCheckBatchDisableStatusQuery query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * The slide with some values
   *
   * @autogenerated ChActionUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantDto disable(final MerchantDisableCommand command) {
    Allow detail = allow(command, command.getReference());
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    Merchant original = visibility.retrieveVisible(command, command.getReference().getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    MerchantDto filled = MerchantDto.from(aggregate.disable(original));
    MerchantDto modified =
        MerchantDisableProposal.resolveWith(proposalEmitter, command, filled, original);
    Merchant saved =
        gateway.update(original, modified.toEntityBuilder(Optional.of(original)).buildValid());
    cache.update(saved);
    MerchantDisableEvent.notifyWith(eventEmitter, command, saved);
    return visibility.copyWithHidden(command, saved);
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionChangeUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchIdentificator disable(final MerchantDisableAllInBatchCommand command) {
    Allow detail = allow(command);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    return batch.start(command.getActor().getName().orElse("-"), Duration.ofHours(6), ExecutorPlan
        .<MerchantDisableAllInBatchCommand>builder().params(command).name("disable-color")
        .executor(
            ExecutorByDeferSteps.<Merchant, Merchant, MerchantDisableAllInBatchCommand, DisableMerchantsInBatchExecutor.MerchantPaginableBatch>builder()
                .initializer(DisableMerchantsInBatchExecutor.class)
                .counter(DisableMerchantsInBatchExecutor.class)
                .descriptor(DisableMerchantsInBatchExecutor.class)
                .reader(DisableMerchantsInBatchExecutor.class)
                .processor(DisableMerchantsInBatchExecutor.class)
                .writer(DisableMerchantsInBatchExecutor.class)
                .finalizer(DisableMerchantsInBatchExecutor.class).build())
        .build());
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   * @param interaction
   * @param original
   * @return
   */
  Merchant disable(final Interaction interaction, final Merchant original) {
    MerchantDto filled = MerchantDto.from(aggregate.disable(original));
    MerchantDto modified =
        MerchantDisableProposal.resolveWith(proposalEmitter, interaction, filled, original);
    Merchant saved =
        gateway.update(original, modified.toEntityBuilder(Optional.of(original)).buildValid());
    MerchantDisableEvent.notifyWith(eventEmitter, interaction, saved);
    return saved;
  }

  /**
   * @autogenerated ActionChangeUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
