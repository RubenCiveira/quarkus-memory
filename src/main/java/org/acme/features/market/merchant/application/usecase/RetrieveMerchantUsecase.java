package org.acme.features.market.merchant.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.merchant.application.allow.MerchantRetrieveAllow;
import org.acme.features.market.merchant.application.interaction.MerchantDto;
import org.acme.features.market.merchant.application.interaction.query.MerchantEntityAllowQuery;
import org.acme.features.market.merchant.application.interaction.query.MerchantRetrieveQuery;
import org.acme.features.market.merchant.application.interaction.result.MerchantRetrieveResult;
import org.acme.features.market.merchant.application.usecase.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.gateway.MerchantFilter;
import org.acme.features.market.merchant.domain.gateway.MerchantReadRepositoryGateway;
import org.acme.features.market.merchant.domain.model.Merchant;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveMerchantUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final MerchantReadRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<MerchantRetrieveAllow> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public MerchantRetrieveAllow allow(final MerchantEntityAllowQuery query) {
    MerchantRetrieveAllow base =
        MerchantRetrieveAllow.build(query.getReference(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantRetrieveResult retrieve(final MerchantRetrieveQuery query) {
    CompletionStage<Optional<Merchant>> result = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      MerchantFilter filter =
          MerchantFilter.builder().uid(query.getReference().getUidValue()).build();
      return visibility.visibleFilter(query, filter).thenCompose(visibleFilter -> gateway
          .retrieve(query.getReference().getUidValue(), Optional.of(visibleFilter)));
    });
    return MerchantRetrieveResult.builder().interaction(query)
        .merchant(result.thenCompose(op -> this.mapEntity(query, op))).build();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  private MerchantRetrieveAllow allow(final MerchantRetrieveQuery query) {
    return allow(MerchantEntityAllowQuery.builder().reference(query.getReference()).build(query));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opmerchant
   * @return The slide with some values
   */
  private CompletionStage<Optional<MerchantDto>> mapEntity(final MerchantRetrieveQuery query,
      final Optional<Merchant> opmerchant) {
    return opmerchant.map(merchant -> visibility.hide(query, merchant).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
