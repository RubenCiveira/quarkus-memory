package org.acme.features.market.merchant.application.usecase.retrieve;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.merchant.application.MerchantDto;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.MerchantRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveMerchantUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<MerchantRetrieveAllow> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public MerchantRetrieveAllow allow(final Interaction query, final MerchantRef reference) {
    MerchantRetrieveAllow base =
        MerchantRetrieveAllow.build(query, Optional.of(reference), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public MerchantRetrieveAllow allow(final Interaction query) {
    MerchantRetrieveAllow base =
        MerchantRetrieveAllow.build(query, Optional.empty(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantRetrieveResult retrieve(final MerchantRetrieveQuery query) {
    CompletionStage<Optional<Merchant>> result =
        allow(query, query.getReference()).getDetail().thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return visibility.retrieveVisible(query, query.getReference().getUidValue());
        });
    return MerchantRetrieveResult.builder().interaction(query)
        .merchant(result.thenCompose(op -> this.mapEntity(query, op))).build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opmerchant
   * @return The slide with some values
   */
  private CompletionStage<Optional<MerchantDto>> mapEntity(final MerchantRetrieveQuery query,
      final Optional<Merchant> opmerchant) {
    return opmerchant
        .map(merchant -> visibility.copyWithHidden(query, merchant).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
