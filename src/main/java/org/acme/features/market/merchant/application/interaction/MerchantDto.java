package org.acme.features.market.merchant.application.interaction;

import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantEnabledVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantNameVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantUidVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class MerchantDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<MerchantDto, Merchant>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid().getValue(), "name",
      (target, source) -> target.name = source == null ? null : source.getName().getValue(),
      "enabled",
      (target, source) -> target.enabled = source == null ? null : source.getEnabled().getValue(),
      "version", (target, source) -> target.version =
          source == null ? null : source.getVersion().getValue().orElse(null));

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<MerchantDto>> toHide =
      Map.of("uid", dto -> dto.uid = null, "name", dto -> dto.name = null, "enabled",
          dto -> dto.enabled = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param merchant The entity with the values
   * @return A dto with the entity data
   */
  public static MerchantDto from(final Merchant merchant) {
    return MerchantDto.builder().uid(merchant.getUid().getValue())
        .name(merchant.getName().getValue()).enabled(merchant.getEnabled().getValue())
        .version(merchant.getVersion().getValue().orElse(null)).build();
  }

  /**
   * The indicator to allow the account be used without deleting it
   *
   * @autogenerated EntityGenerator
   */
  private Boolean enabled;

  /**
   * El name de merchant
   *
   * @autogenerated EntityGenerator
   */
  private String name;

  /**
   * A number to identify the db record
   *
   * @autogenerated EntityGenerator
   */
  private String uid;

  /**
   * Campo con el n√∫mero de version de merchant para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  private Integer version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param merchant The field to hide
   */
  public void fix(final String field, final Merchant merchant) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, merchant);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fix(final String field) {
    fix(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hide(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @return The entity param with the new values
   */
  public Merchant.MerchantBuilder toEntityBuilder() {
    return Merchant.builder().uid(MerchantUidVO.from(uid)).name(MerchantNameVO.from(name))
        .enabled(MerchantEnabledVO.from(enabled)).version(MerchantVersionVO.from(version));
  }
}
