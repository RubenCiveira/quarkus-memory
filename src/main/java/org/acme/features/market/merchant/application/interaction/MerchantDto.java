package org.acme.features.market.merchant.application.interaction;

import java.util.Map;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.merchant.domain.model.Merchant;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantEnabledVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantKeyVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantNameVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantUidVO;
import org.acme.features.market.merchant.domain.model.valueobject.MerchantVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class MerchantDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<MerchantDto, Merchant>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid(), "name",
      (target, source) -> target.name = source == null ? null : source.getName(), "enabled",
      (target, source) -> target.enabled = source == null ? null : source.getEnabled(), "key",
      (target, source) -> target.key = source == null ? null : source.getKey(), "version",
      (target, source) -> target.version = source == null ? null : source.getVersion());

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<MerchantDto>> toHide = Map.of("uid",
      dto -> dto.uid = null, "name", dto -> dto.name = null, "enabled", dto -> dto.enabled = null,
      "key", dto -> dto.key = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param merchant The entity with the values
   * @return A dto with the entity data
   */
  public static MerchantDto from(final Merchant merchant) {
    return MerchantDto.builder().uid(merchant.getUid()).name(merchant.getName())
        .enabled(merchant.getEnabled()).key(merchant.getKey()).version(merchant.getVersion())
        .build();
  }

  /**
   * @autogenerated EntityGenerator
   */
  private MerchantEnabledVO enabled;

  /**
   * @autogenerated EntityGenerator
   */
  private MerchantKeyVO key;

  /**
   * @autogenerated EntityGenerator
   */
  private MerchantNameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  private MerchantUidVO uid;

  /**
   * @autogenerated EntityGenerator
   */
  private MerchantVersionVO version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param merchant The field to hide
   */
  public void fixField(final String field, final Merchant merchant) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, merchant);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fixField(final String field) {
    fixField(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hideField(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @param original
   * @return The entity param with the new values
   */
  public Merchant.MerchantBuilder toEntityBuilder(final Optional<Merchant> original) {
    return Merchant.builder().uid(uidOrDefault(original)).name(nameOrDefault(original))
        .enabled(enabledOrDefault(original)).key(keyOrDefault(original))
        .version(versionOrDefault(original));
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private MerchantEnabledVO enabledOrDefault(final Optional<Merchant> original) {
    return null == enabled ? original.map(Merchant::getEnabled).orElse(null) : enabled;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private MerchantKeyVO keyOrDefault(final Optional<Merchant> original) {
    return null == key ? original.map(Merchant::getKey).orElse(null) : key;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private MerchantNameVO nameOrDefault(final Optional<Merchant> original) {
    return null == name ? original.map(Merchant::getName).orElse(null) : name;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private MerchantUidVO uidOrDefault(final Optional<Merchant> original) {
    return null == uid ? original.map(Merchant::getUid).orElse(null) : uid;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private MerchantVersionVO versionOrDefault(final Optional<Merchant> original) {
    return null == version ? original.map(Merchant::getVersion).orElse(null) : version;
  }
}
