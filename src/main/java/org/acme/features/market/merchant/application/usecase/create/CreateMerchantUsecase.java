package org.acme.features.market.merchant.application.usecase.create;

import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.merchant.application.MerchantDto;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.Merchants;
import org.acme.features.market.merchant.domain.gateway.MerchantCacheGateway;
import org.acme.features.market.merchant.domain.gateway.MerchantWriteRepositoryGateway;
import org.acme.features.market.merchant.domain.model.Merchant;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreateMerchantUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Merchants aggregate;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final MerchantCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<MerchantCreateAllowProposal> createAllow;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<MerchantCreateEvent> eventEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final MerchantWriteRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<MerchantCreateProposal> proposalEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    return MerchantCreateAllowProposal.resolveWith(createAllow,
        MerchantCreateAllowProposal.build(query, true, "Allowed by default"));
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantDto create(final MerchantCreateCommand query) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    MerchantDto filled = visibility.copyWithFixed(query, query.getDto());
    MerchantDto dto = MerchantCreateProposal.resolveWith(proposalEmitter, query, filled);
    Merchant entity = aggregate.initialize(dto.toEntityBuilder(Optional.empty()));
    Merchant created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUidValue()));
    cache.update(created);
    MerchantCreateEvent.notifyWith(eventEmitter, query, created);
    return visibility.copyWithHidden(query, created);
  }
}
