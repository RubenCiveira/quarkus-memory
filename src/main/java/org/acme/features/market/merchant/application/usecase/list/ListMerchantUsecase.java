package org.acme.features.market.merchant.application.usecase.list;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.merchant.application.MerchantDto;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.application.usecase.list.event.MerchantListAllowPipelineStageEvent;
import org.acme.features.market.merchant.domain.gateway.MerchantCached;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.StatusCode;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Scope;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ListMerchantUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<MerchantListAllowPipelineStageEvent> listAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    Span startSpan = tracer.spanBuilder("merchant-list-allow").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      MerchantListAllowPipelineStageEvent base =
          MerchantListAllowPipelineStageEvent.build(query, true, "Allowed by default");
      listAllow.fire(base);
      return base.getDetail().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("allowed", val.isAllowed());
          startSpan.setAttribute("reason", val.getDescription());
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<MerchantListResult> list(final MerchantListQuery query) {
    Span startSpan = tracer.spanBuilder("merchant-list").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<MerchantCached> future = allow(query).thenCompose(detail -> {
        if (!detail.isAllowed()) {
          throw new NotAllowedException(detail.getDescription());
        }
        return visibility.listCachedVisibles(query, query.getFilter(), query.getCursor());
      });
      return future.thenCompose(values -> mapList(query, values)).whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param merchants
   * @return The slide with some values
   */
  private CompletionStage<MerchantListResult> mapList(final MerchantListQuery query,
      final MerchantCached merchants) {
    Span startSpan = tracer.spanBuilder("merchant-map-list-response").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      List<CompletableFuture<MerchantDto>> futures =
          merchants.getValue().stream().map(merchant -> visibility.copyWithHidden(query, merchant))
              .map(CompletionStage::toCompletableFuture).toList();
      return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
          .thenApply(voidResult -> MerchantListResult.builder().query(query)
              .merchants(futures.stream().map(CompletableFuture::join).toList())
              .since(merchants.getSince()).build())
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }
}
