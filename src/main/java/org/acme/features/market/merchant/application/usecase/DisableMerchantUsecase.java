package org.acme.features.market.merchant.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.merchant.application.allow.MerchantDisableAllow;
import org.acme.features.market.merchant.application.interaction.MerchantDto;
import org.acme.features.market.merchant.application.interaction.command.MerchantDisableCommand;
import org.acme.features.market.merchant.application.interaction.query.MerchantEntityAllowQuery;
import org.acme.features.market.merchant.application.interaction.result.MerchantDisableResult;
import org.acme.features.market.merchant.application.usecase.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.Merchants;
import org.acme.features.market.merchant.domain.gateway.MerchantWriteRepositoryGateway;
import org.acme.features.market.merchant.domain.model.Merchant;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class DisableMerchantUsecase {

  /**
   * @autogenerated ActionUsecaseGenerator
   */
  private final Merchants aggregate;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ActionUsecaseGenerator
   */
  private final Event<MerchantDisableAllow> disableAllow;

  /**
   * @autogenerated ActionUsecaseGenerator
   */
  private final MerchantWriteRepositoryGateway gateway;

  /**
   * @autogenerated ActionUsecaseGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated ActionUsecaseGenerator
   * @param query
   * @return
   */
  public MerchantDisableAllow allow(final MerchantEntityAllowQuery query) {
    MerchantDisableAllow base =
        MerchantDisableAllow.build(query.getReference(), true, "Allowed by default");
    disableAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated ActionUsecaseGenerator
   * @return
   */
  public MerchantDisableAllow allow() {
    return null;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public MerchantDisableResult disable(final MerchantDisableCommand command) {
    CompletionStage<Optional<Merchant>> updated = allow(command).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.retrieveVisible(command, command.getReference().getUidValue())
          .thenCompose(op -> disableIfIsPresent(op));
    });
    return MerchantDisableResult.builder().command(command)
        .merchant(updated.thenCompose(entity -> mapEntity(command, entity))).build();
  }

  /**
   * @autogenerated ActionUsecaseGenerator
   * @param query
   * @return
   */
  private MerchantDisableAllow allow(final MerchantDisableCommand query) {
    return allow(MerchantEntityAllowQuery.builder().reference(query.getReference()).build(query));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param original
   * @return The slide with some values
   */
  private CompletionStage<Optional<Merchant>> disableEntity(final Merchant original) {
    return aggregate.disable(original)
        .thenCompose(merchant -> gateway.update(original, merchant).thenApply(Optional::of));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param result
   * @return The slide with some values
   */
  private CompletionStage<Optional<Merchant>> disableIfIsPresent(final Optional<Merchant> result) {
    return result.map(original -> disableEntity(original))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ActionUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opmerchant
   * @return The slide with some values
   */
  private CompletionStage<Optional<MerchantDto>> mapEntity(final MerchantDisableCommand command,
      final Optional<Merchant> opmerchant) {
    return opmerchant
        .map(merchant -> visibility.copyWithHidden(command, merchant).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
