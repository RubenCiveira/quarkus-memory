package org.acme.features.market.merchant.infrastructure.driver.rest;

import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;

import org.acme.common.action.Interaction;
import org.acme.common.rest.CurrentRequest;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.application.usecase.create.CreateMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.delete.DeleteMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.disable.DisableMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.enable.EnableMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.list.ListMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.retrieve.RetrieveMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.update.UpdateMerchantUsecase;
import org.acme.generated.openapi.api.MerchantAclApi;
import org.acme.generated.openapi.model.CommonAllow;
import org.acme.generated.openapi.model.MerchantAclFields;
import org.acme.generated.openapi.model.MerchantAclGenericAllows;
import org.acme.generated.openapi.model.MerchantAclSpecificAllows;
import org.acme.generated.openapi.model.MerchantGenericAcl;
import org.acme.generated.openapi.model.MerchantSpecificAcl;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MerchantAclController implements MerchantAclApi {

  private final CreateMerchantUsecase create;

  /**
   * Merchant
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  private final DeleteMerchantUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final DisableMerchantUsecase disable;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final EnableMerchantUsecase enable;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ListMerchantUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RetrieveMerchantUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final UpdateMerchantUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response merchantApiContextualAcl(final String uid) {
    return currentRequest.resolve(interaction -> {
      MerchantSpecificAcl response = new MerchantSpecificAcl();
      response.setAllows(new MerchantAclSpecificAllows());
      response.setFields(new MerchantAclFields());
      return CompletableFuture
          .allOf(fixedFields(response.getFields(), interaction),
              hiddenFields(response.getFields(), interaction), updateAllows(response, interaction),
              deleteAllows(response, interaction), retrieveAllows(response, interaction),
              enableAllows(response, interaction), disableAllows(response, interaction))
          .thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response merchantApiGenericAcl() {
    return currentRequest.resolve(interaction -> {
      MerchantGenericAcl response = new MerchantGenericAcl();
      response.setAllows(new MerchantAclGenericAllows());
      response.setFields(new MerchantAclFields());
      return CompletableFuture
          .allOf(fixedFields(response.getFields(), interaction),
              hiddenFields(response.getFields(), interaction), listAllows(response, interaction),
              createAllows(response, interaction), updateAllows(response, interaction),
              deleteAllows(response, interaction), retrieveAllows(response, interaction),
              enableAllows(response, interaction), disableAllows(response, interaction))
          .thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> createAllows(final MerchantGenericAcl response,
      final Interaction query) {
    return create.allow(query)
        .thenAccept(detail -> response.getAllows().setCreate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final MerchantGenericAcl response,
      final Interaction query) {
    return delete.allow(query)
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final MerchantSpecificAcl response,
      final Interaction query) {
    return delete.allow(query)
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> disableAllows(final MerchantGenericAcl response,
      final Interaction query) {
    return disable.allow(query)
        .thenAccept(detail -> response.getAllows().setDisable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> disableAllows(final MerchantSpecificAcl response,
      final Interaction query) {
    return disable.allow(query)
        .thenAccept(detail -> response.getAllows().setDisable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> enableAllows(final MerchantGenericAcl response,
      final Interaction query) {
    return enable.allow(query)
        .thenAccept(detail -> response.getAllows().setEnable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> enableAllows(final MerchantSpecificAcl response,
      final Interaction query) {
    return enable.allow(query)
        .thenAccept(detail -> response.getAllows().setEnable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> fixedFields(final MerchantAclFields response,
      final Interaction query) {
    return visibility.fieldsToFix(query).getFixed()
        .thenAccept(fields -> response.setNoEditables(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> hiddenFields(final MerchantAclFields response,
      final Interaction query) {
    return visibility.fieldsToHide(query).getHidden()
        .thenAccept(fields -> response.setNoVisibles(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> listAllows(final MerchantGenericAcl response,
      final Interaction query) {
    return list.allow(query)
        .thenAccept(detail -> response.getAllows()
            .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final MerchantGenericAcl response,
      final Interaction query) {
    return retrieve.allow(query)
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final MerchantSpecificAcl response,
      final Interaction query) {
    return retrieve.allow(query)
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final MerchantGenericAcl response,
      final Interaction query) {
    return update.allow(query)
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final MerchantSpecificAcl response,
      final Interaction query) {
    return update.allow(query)
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }
}
