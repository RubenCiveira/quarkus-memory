package org.acme.features.market.merchant.infrastructure.driver.rest;

import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;

import org.acme.common.action.Interaction;
import org.acme.common.security.Actor;
import org.acme.common.security.Connection;
import org.acme.features.market.merchant.application.interaction.query.MerchantAllowQuery;
import org.acme.features.market.merchant.application.interaction.query.MerchantEntityAllowQuery;
import org.acme.features.market.merchant.application.usecase.CreateMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.DeleteMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.DisableMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.EnableMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.ListMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.RetrieveMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.UpdateMerchantUsecase;
import org.acme.features.market.merchant.application.usecase.service.MerchantsVisibilityService;
import org.acme.features.market.merchant.domain.model.MerchantReference;
import org.acme.generated.openapi.api.MerchantAclApi;
import org.acme.generated.openapi.model.CommonAllow;
import org.acme.generated.openapi.model.MerchantAclFields;
import org.acme.generated.openapi.model.MerchantAclGenericAllows;
import org.acme.generated.openapi.model.MerchantAclSpecificAllows;
import org.acme.generated.openapi.model.MerchantGenericAcl;
import org.acme.generated.openapi.model.MerchantSpecificAcl;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MerchantAclController implements MerchantAclApi {

  private final CreateMerchantUsecase create;

  private final DeleteMerchantUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final DisableMerchantUsecase disable;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final EnableMerchantUsecase enable;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ListMerchantUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RetrieveMerchantUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final UpdateMerchantUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final MerchantsVisibilityService visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response merchantApiContextualAcl(final String uid) {
    Actor actor = new Actor();
    Connection connection = new Connection();
    MerchantEntityAllowQuery query = MerchantEntityAllowQuery.builder()
        .reference(MerchantReference.of(uid)).build(actor, connection);
    MerchantSpecificAcl response = new MerchantSpecificAcl();
    response.setAllows(new MerchantAclSpecificAllows());
    response.setFields(new MerchantAclFields());
    try {
      CompletableFuture
          .allOf(fixedFields(response.getFields(), query),
              hiddenFields(response.getFields(), query), updateAllows(response, query),
              deleteAllows(response, query), retrieveAllows(response, query),
              enableAllows(response, query), disableAllows(response, query))
          .get(1, TimeUnit.SECONDS);
    } catch (InterruptedException | ExecutionException | TimeoutException e) {
      e.printStackTrace();
      return Response.serverError().build();
    }
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response merchantApiGenericAcl() {
    Actor actor = new Actor();
    Connection connection = new Connection();
    MerchantAllowQuery query = MerchantAllowQuery.builder().build(actor, connection);
    MerchantEntityAllowQuery entityQuery =
        MerchantEntityAllowQuery.builder().build(actor, connection);
    MerchantGenericAcl response = new MerchantGenericAcl();
    response.setAllows(new MerchantAclGenericAllows());
    response.setFields(new MerchantAclFields());
    try {
      CompletableFuture
          .allOf(fixedFields(response.getFields(), query),
              hiddenFields(response.getFields(), query), listAllows(response, query),
              createAllows(response, query), updateAllows(response, entityQuery),
              deleteAllows(response, entityQuery), retrieveAllows(response, entityQuery),
              enableAllows(response, entityQuery), disableAllows(response, entityQuery))
          .get(1, TimeUnit.SECONDS);
    } catch (InterruptedException | ExecutionException | TimeoutException e) {
      e.printStackTrace();
      return Response.serverError().build();
    }
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> createAllows(final MerchantGenericAcl response,
      final MerchantAllowQuery query) {
    return create.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setCreate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final MerchantGenericAcl response,
      final MerchantEntityAllowQuery query) {
    return delete.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final MerchantSpecificAcl response,
      final MerchantEntityAllowQuery query) {
    return delete.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> disableAllows(final MerchantGenericAcl response,
      final MerchantEntityAllowQuery query) {
    return disable.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDisable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> disableAllows(final MerchantSpecificAcl response,
      final MerchantEntityAllowQuery query) {
    return disable.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDisable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> enableAllows(final MerchantGenericAcl response,
      final MerchantEntityAllowQuery query) {
    return enable.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setEnable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> enableAllows(final MerchantSpecificAcl response,
      final MerchantEntityAllowQuery query) {
    return enable.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setEnable(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> fixedFields(final MerchantAclFields response,
      final Interaction query) {
    return visibility.fieldsToFix(query).getFixed()
        .thenAccept(fields -> response.setNoEditables(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> hiddenFields(final MerchantAclFields response,
      final Interaction query) {
    return visibility.fieldsToHide(query).getHidden()
        .thenAccept(fields -> response.setNoVisibles(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> listAllows(final MerchantGenericAcl response,
      final MerchantAllowQuery query) {
    return list.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows()
            .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final MerchantGenericAcl response,
      final MerchantEntityAllowQuery query) {
    return retrieve.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final MerchantSpecificAcl response,
      final MerchantEntityAllowQuery query) {
    return retrieve.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final MerchantGenericAcl response,
      final MerchantEntityAllowQuery query) {
    return update.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final MerchantSpecificAcl response,
      final MerchantEntityAllowQuery query) {
    return update.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }
}
