package org.acme.features.market.medal.application.usecase.retrieve;

import java.time.OffsetDateTime;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.medal.application.service.MedalsVisibilityService;
import org.acme.features.market.medal.application.usecase.retrieve.event.MedalRetrieveAllowPipelineStageEvent;
import org.acme.features.market.medal.domain.gateway.MedalCached;
import org.acme.features.market.medal.domain.model.MedalRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrieveMedalUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<MedalRetrieveAllowPipelineStageEvent> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final MedalsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query, final MedalRef reference) {
    MedalRetrieveAllowPipelineStageEvent base = MedalRetrieveAllowPipelineStageEvent.build(query,
        Optional.of(reference), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    MedalRetrieveAllowPipelineStageEvent base = MedalRetrieveAllowPipelineStageEvent.build(query,
        Optional.empty(), true, "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<MedalRetrieveResult> retrieve(final MedalRetrieveQuery query) {
    CompletionStage<MedalCached> result = allow(query, query.getReference()).thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.retrieveCachedVisible(query, query.getReference().getUidValue());
    });
    return result.thenCompose(op -> this.mapEntity(query, op));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param opmedal
   * @return The slide with some values
   */
  private CompletionStage<MedalRetrieveResult> mapEntity(final MedalRetrieveQuery query,
      final MedalCached opmedal) {
    return opmedal.first()
        .map(medal -> visibility.copyWithHidden(query, medal)
            .thenApply(medalWithHidden -> MedalRetrieveResult.builder().interaction(query)
                .medal(Optional.of(medalWithHidden)).since(opmedal.getSince()).build()))
        .orElseGet(() -> CompletableFuture.completedFuture(MedalRetrieveResult.builder()
            .interaction(query).medal(Optional.empty()).since(OffsetDateTime.now()).build()));
  }
}
