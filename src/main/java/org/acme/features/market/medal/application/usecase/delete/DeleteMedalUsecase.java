package org.acme.features.market.medal.application.usecase.delete;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.medal.application.service.MedalsVisibilityService;
import org.acme.features.market.medal.domain.Medals;
import org.acme.features.market.medal.domain.gateway.MedalCacheGateway;
import org.acme.features.market.medal.domain.gateway.MedalWriteRepositoryGateway;
import org.acme.features.market.medal.domain.model.Medal;
import org.acme.features.market.medal.domain.model.MedalRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class DeleteMedalUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Medals aggregate;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final MedalCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<MedalDeleteAllow> deleteAllow;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final MedalWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final MedalsVisibilityService visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public MedalDeleteAllow allow(final Interaction query, final MedalRef reference) {
    MedalDeleteAllow base =
        MedalDeleteAllow.build(query, Optional.of(reference), true, "Allowed by default");
    deleteAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public MedalDeleteAllow allow(final Interaction query) {
    MedalDeleteAllow base =
        MedalDeleteAllow.build(query, Optional.empty(), true, "Allowed by default");
    deleteAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<MedalDeleteResult> delete(final MedalDeleteCommand command) {
    CompletionStage<Optional<Medal>> updated =
        allow(command, command.getReference()).getDetail().thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return visibility.retrieveVisible(command, command.getReference().getUidValue())
              .thenCompose(this::deleteIfIsPresent);
        });
    return updated.thenCompose(entity -> mapEntity(command, entity));
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param original
   * @return The slide with some values
   */
  private CompletionStage<Optional<Medal>> deleteEntity(final Medal original) {
    return aggregate.clean(original).thenCompose(medal -> gateway.delete(medal))
        .thenCompose(deleted -> cache.remove(deleted).thenApply(_ready -> Optional.of(deleted)));
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param result
   * @return The slide with some values
   */
  private CompletionStage<Optional<Medal>> deleteIfIsPresent(final Optional<Medal> result) {
    return result.map(this::deleteEntity)
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opmedal
   * @return The slide with some values
   */
  private CompletionStage<MedalDeleteResult> mapEntity(final MedalDeleteCommand command,
      final Optional<Medal> opmedal) {
    return opmedal
        .map(medal -> visibility.copyWithHidden(command, medal)
            .thenApply(visible -> MedalDeleteResult.builder().command(command)
                .medal(Optional.of(visible)).build()))
        .orElseGet(() -> CompletableFuture.completedStage(
            MedalDeleteResult.builder().command(command).medal(Optional.empty()).build()));
  }
}
