package org.acme.features.market.medal.application;

import java.util.Map;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.medal.domain.model.Medal;
import org.acme.features.market.medal.domain.model.Medal.MedalBuilder;
import org.acme.features.market.medal.domain.model.valueobject.MedalNameVO;
import org.acme.features.market.medal.domain.model.valueobject.MedalUidVO;
import org.acme.features.market.medal.domain.model.valueobject.MedalVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class MedalDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<MedalDto, Medal>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid(), "name",
      (target, source) -> target.name = source == null ? null : source.getName(), "version",
      (target, source) -> target.version = source == null ? null : source.getVersion());

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<MedalDto>> toHide = Map.of("uid", dto -> dto.uid = null,
      "name", dto -> dto.name = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param medal The entity with the values
   * @return A dto with the entity data
   */
  public static MedalDto from(final Medal medal) {
    return MedalDto.builder().uid(medal.getUid()).name(medal.getName()).version(medal.getVersion())
        .build();
  }

  /**
   * @autogenerated EntityGenerator
   */
  private MedalNameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  private MedalUidVO uid;

  /**
   * @autogenerated EntityGenerator
   */
  private MedalVersionVO version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param medal The field to hide
   */
  public void fixField(final String field, final Medal medal) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, medal);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fixField(final String field) {
    fixField(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hideField(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @param original
   * @return The entity param with the new values
   */
  public MedalBuilder toEntityBuilder(final Optional<Medal> original) {
    MedalBuilder builder = Medal.builder();
    builder = setUidOrDefault(builder, original);
    builder = setNameOrDefault(builder, original);
    builder = setVersionOrDefault(builder, original);
    return builder;
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Medal.MedalBuilder setNameOrDefault(final MedalBuilder builder,
      final Optional<Medal> original) {
    MedalNameVO value = null == name ? original.map(Medal::getName).orElse(null) : name;
    return null == value ? builder : builder.name(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Medal.MedalBuilder setUidOrDefault(final MedalBuilder builder,
      final Optional<Medal> original) {
    MedalUidVO value = null == uid ? original.map(Medal::getUid).orElse(null) : uid;
    return null == value ? builder : builder.uid(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Medal.MedalBuilder setVersionOrDefault(final MedalBuilder builder,
      final Optional<Medal> original) {
    MedalVersionVO value = null == version ? original.map(Medal::getVersion).orElse(null) : version;
    return null == value ? builder : builder.version(value);
  }
}
