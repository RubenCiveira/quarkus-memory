package org.acme.features.market.medal.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import org.acme.common.algorithms.Slider;
import org.acme.features.market.medal.domain.gateway.MedalCursor;
import org.acme.features.market.medal.domain.gateway.MedalFilter;
import org.acme.features.market.medal.domain.model.Medal;

class MedalSlider extends Slider<Medal> {

  /**
   * @autogenerated SlideGenerator
   */
  private final MedalCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final MedalFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<MedalFilter, MedalCursor, Iterator<Medal>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  MedalSlider(final Iterator<Medal> multi, final int limit,
      final BiFunction<MedalFilter, MedalCursor, Iterator<Medal>> gateway, final MedalFilter filter,
      final MedalCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param medals
   * @param limit
   * @return
   */
  @Override
  public Iterator<Medal> next(List<Medal> medals, int limit) {
    Medal last = medals.get(medals.size() - 1);
    MedalCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
