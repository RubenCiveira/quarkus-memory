package org.acme.features.market.medal.application.service;

import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.features.market.medal.application.MedalDto;
import org.acme.features.market.medal.application.service.event.MedalFixedFieldsPipelineStageEvent;
import org.acme.features.market.medal.application.service.event.MedalHiddenFieldsPipelineStageEvent;
import org.acme.features.market.medal.application.service.event.MedalVisibilityQueryPipelineStageEvent;
import org.acme.features.market.medal.application.service.event.MedalVisibleContentPipelineStageEvent;
import org.acme.features.market.medal.domain.Medals;
import org.acme.features.market.medal.domain.gateway.MedalCacheGateway;
import org.acme.features.market.medal.domain.gateway.MedalCached;
import org.acme.features.market.medal.domain.gateway.MedalCursor;
import org.acme.features.market.medal.domain.gateway.MedalFilter;
import org.acme.features.market.medal.domain.gateway.MedalReadRepositoryGateway;
import org.acme.features.market.medal.domain.model.Medal;
import org.acme.features.market.medal.domain.model.MedalRef;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.StatusCode;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Scope;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MedalsVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Medals aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MedalCacheGateway cache;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MedalFixedFieldsPipelineStageEvent> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MedalHiddenFieldsPipelineStageEvent> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MedalVisibilityQueryPipelineStageEvent> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<MedalVisibleContentPipelineStageEvent> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MedalsFormulaService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MedalReadRepositoryGateway medalReadRepositoryGateway;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Tracer tracer;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Boolean> checkVisibility(Interaction prev, String uid) {
    Span startSpan = tracer.spanBuilder("medal-check-item-visbility").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return retrieveVisible(prev, uid).thenApply(Optional::isPresent).whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param original The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<MedalDto> copyWithFixed(Interaction prev, Medal original,
      MedalDto source) {
    Span startSpan = tracer.spanBuilder("medal-copy-existent-with-fixed").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return fieldsToFix(prev, original).thenApply(fixeds -> {
        fixeds.forEach(field -> source.fixField(field, original));
        return source;
      }).thenCompose(fixed -> formula.copyWithFormulas(prev, original, fixed))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<MedalDto> copyWithFixed(Interaction prev, MedalDto source) {
    Span startSpan = tracer.spanBuilder("medal-copy-new-with-fixed").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return fieldsToFix(prev).thenApply(fixeds -> {
        fixeds.forEach(field -> source.fixField(field));
        return source;
      }).thenCompose(fixed -> formula.copyWithFormulas(prev, fixed)).whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param medal
   * @return The input dto with hidden values
   */
  public CompletionStage<MedalDto> copyWithHidden(Interaction prev, Medal medal) {
    Span startSpan = tracer.spanBuilder("medal-copy-with-hidden").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return fieldsToHide(prev, medal).thenApply(hidden -> {
        MedalDto target = MedalDto.from(medal);
        hidden.forEach(target::hideField);
        return target;
      }).whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public CompletionStage<Set<String>> fieldsToFix(Interaction prev) {
    Span startSpan = tracer.spanBuilder("medal-field-to-fix-for-new").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields = fieldsToHide(prev).thenApply(hidden -> {
        Set<String> set = new HashSet<>(aggregate.calcultadFields());
        set.addAll(hidden);
        return set;
      });
      MedalFixedFieldsPipelineStageEvent value =
          MedalFixedFieldsPipelineStageEvent.builder().fixed(fields).interaction(prev).build();
      fireFix.fire(value);
      return value.getFixed().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param medal
   * @return initialsFixFields
   */
  public CompletionStage<Set<String>> fieldsToFix(Interaction prev, MedalRef medal) {
    Span startSpan = tracer.spanBuilder("medal-field-to-fix-for-existent").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields =
          fieldsToFix(prev).thenCombine(fieldsToHide(prev, medal), (set1, set2) -> {
            Set<String> set = new HashSet<>(set1);
            set.addAll(set2);
            return set;
          });
      MedalFixedFieldsPipelineStageEvent value = MedalFixedFieldsPipelineStageEvent.builder()
          .fixed(fields).medal(medal).interaction(prev).build();
      fireFix.fire(value);
      return value.getFixed().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public CompletionStage<Set<String>> fieldsToHide(Interaction prev) {
    Span startSpan = tracer.spanBuilder("medal-field-to-hide-for-new").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields = CompletableFuture.completedFuture(Set.of());
      MedalHiddenFieldsPipelineStageEvent value =
          MedalHiddenFieldsPipelineStageEvent.builder().hidden(fields).interaction(prev).build();
      fireHide.fire(value);
      return value.getHidden().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param medal
   * @return initialsHideFields
   */
  public CompletionStage<Set<String>> fieldsToHide(Interaction prev, MedalRef medal) {
    Span startSpan = tracer.spanBuilder("medal-field-to-hide-for-existent").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Set<String>> fields = fieldsToHide(prev);
      MedalHiddenFieldsPipelineStageEvent value = MedalHiddenFieldsPipelineStageEvent.builder()
          .hidden(fields).medal(medal).interaction(prev).build();
      fireHide.fire(value);
      return value.getHidden().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("fieds", String.join(",", val));
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<MedalCached> listCachedVisibles(Interaction prev, MedalFilter filter,
      MedalCursor cursor) {
    Span startSpan = tracer.spanBuilder("medal-list-cached-visible").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, filter)
          .thenCompose(visfilter -> cache.retrieve(visfilter, cursor).thenCompose(cached -> {
            if (cached.isPresent()) {
              startSpan.setAttribute("source", "cache");
              return CompletableFuture.completedStage(cached.get());
            } else {
              startSpan.setAttribute("source", "gateway");
              return queryItems(prev, filter, cursor).thenApply(values -> {
                cache.store(filter, cursor, values);
                return MedalCached.builder().value(values).since(OffsetDateTime.now()).build();
              });
            }
          })).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<List<Medal>> listVisibles(Interaction prev, MedalFilter filter,
      MedalCursor cursor) {
    Span startSpan = tracer.spanBuilder("medal-list-visibles").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, filter)
          .thenCompose(visfilter -> queryItems(prev, visfilter, cursor)).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<MedalCached> retrieveCachedVisible(Interaction prev, String uid) {
    Span startSpan = tracer.spanBuilder("medal-retrieve-cached-visible").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, MedalFilter.builder().uid(uid).build())
          .thenCompose(filter -> {
            filter.setUid(uid);
            MedalCursor cursor = MedalCursor.builder().limit(1).build();
            return cache.retrieve(filter, cursor).thenCompose(cached -> {
              if (cached.isPresent()) {
                startSpan.setAttribute("source", "cache");
                return CompletableFuture.completedStage(cached.get());
              } else {
                startSpan.setAttribute("source", "gateway");
                return queryItem(prev, uid, filter).thenApply(value -> {
                  List<Medal> values = value.map(List::of).orElseGet(List::of);
                  cache.store(filter, cursor, values);
                  return MedalCached.builder().value(values).since(OffsetDateTime.now()).build();
                });
              }
            });
          }).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public CompletionStage<Optional<Medal>> retrieveVisible(Interaction prev, String uid) {
    Span startSpan = tracer.spanBuilder("medal-retrieve-visible").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return applyPreVisibilityFilter(prev, MedalFilter.builder().uid(uid).build())
          .thenCompose(filter -> queryItem(prev, uid, filter)).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private CompletionStage<MedalFilter> applyPreVisibilityFilter(Interaction prev,
      MedalFilter filter) {
    Span startSpan = tracer.spanBuilder("medal-calculate-visible-filter").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      MedalVisibilityQueryPipelineStageEvent visible = MedalVisibilityQueryPipelineStageEvent
          .builder().filter(CompletableFuture.completedFuture(filter)).interaction(prev).build();
      fireVisibleFilter.fire(visible);
      return visible.getFilter().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param medalRefs The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<List<Medal>> evaluatePostVisibility(Interaction prev,
      List<Medal> medalRefs) {
    Span startSpan = tracer.spanBuilder("medal-evaluate-liste-post-visibility").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      MedalVisibleContentPipelineStageEvent list = MedalVisibleContentPipelineStageEvent.builder()
          .visibles(CompletableFuture.completedFuture(new ArrayList<>(medalRefs))).interaction(prev)
          .build();
      fireVisibleList.fire(list);
      return list.getVisibles().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param medalRef The source interaction
   * @return The input dto with hidden values
   */
  private CompletionStage<Optional<Medal>> evaluatePostVisibility(Interaction prev,
      Medal medalRef) {
    Span startSpan = tracer.spanBuilder("medal-evaluate-item-post-visibility").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return evaluatePostVisibility(prev, List.of(medalRef))
          .thenApply(list -> list.isEmpty() ? Optional.<Medal>empty() : Optional.of(list.get(0)))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<Optional<Medal>> queryItem(Interaction prev, String uid,
      MedalFilter filter) {
    Span startSpan = tracer.spanBuilder("medal-query-item").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return medalReadRepositoryGateway.retrieve(uid, Optional.of(filter))
          .thenCompose(stored -> stored.map(retrieved -> evaluatePostVisibility(prev, retrieved))
              .orElseGet(() -> CompletableFuture.completedStage(Optional.empty())))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private CompletionStage<List<Medal>> queryItems(Interaction prev, MedalFilter filter,
      MedalCursor cursor) {
    Span startSpan = tracer.spanBuilder("medal-query-items").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      return medalReadRepositoryGateway.list(filter, cursor)
          .thenCompose(
              slide -> slide.filterAndFillAgain(values -> evaluatePostVisibility(prev, values)))
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }
}
