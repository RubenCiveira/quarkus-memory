package org.acme.features.market.medal.domain;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.acme.features.market.medal.domain.model.Medal;
import org.acme.features.market.medal.domain.model.Medal.MedalBuilder;
import org.acme.features.market.medal.domain.model.rule.MedalBuildFormulaPipeline;
import org.acme.features.market.medal.domain.model.rule.MedalCreateRulePipeline;
import org.acme.features.market.medal.domain.model.rule.MedalDeleteRulePipeline;
import org.acme.features.market.medal.domain.model.rule.MedalUpdateRulePipeline;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class Medals {

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MedalBuildFormulaPipeline> buildingFormulas;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MedalCreateRulePipeline> creatingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MedalDeleteRulePipeline> deletingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<MedalUpdateRulePipeline> updatingRules;

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    Set<String> fields = new HashSet<>();
    buildingFormulas.forEach(formula -> fields.addAll(formula.fields()));
    return fields;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Medal clean(final Medal entity) {
    return MedalDeleteRulePipeline.fire(deletingRules.iterator(), entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Medal initialize(final MedalBuilder builder) {
    return MedalCreateRulePipeline.fire(creatingRules.iterator(),
        build(builder, Optional.empty(), null).build());
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Medal modify(final Medal base, final MedalBuilder builder) {
    return MedalUpdateRulePipeline.fire(updatingRules.iterator(),
        build(builder, Optional.of(base), null).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @param original a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private MedalBuilder build(final MedalBuilder builder, final Optional<Medal> original,
      final String ignore) {
    return MedalBuildFormulaPipeline.fire(buildingFormulas.iterator(), builder, original);
  }
}
