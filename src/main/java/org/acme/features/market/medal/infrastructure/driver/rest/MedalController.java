package org.acme.features.market.medal.infrastructure.driver.rest;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import java.util.stream.Stream;

import org.acme.common.infrastructure.CurrentRequest;
import org.acme.features.market.medal.application.MedalDto;
import org.acme.features.market.medal.application.usecase.create.CreateMedalUsecase;
import org.acme.features.market.medal.application.usecase.create.MedalCreateCommand;
import org.acme.features.market.medal.application.usecase.delete.DeleteMedalUsecase;
import org.acme.features.market.medal.application.usecase.delete.MedalDeleteCommand;
import org.acme.features.market.medal.application.usecase.list.ListMedalUsecase;
import org.acme.features.market.medal.application.usecase.list.MedalListQuery;
import org.acme.features.market.medal.application.usecase.retrieve.MedalRetrieveQuery;
import org.acme.features.market.medal.application.usecase.retrieve.RetrieveMedalUsecase;
import org.acme.features.market.medal.application.usecase.update.MedalUpdateCommand;
import org.acme.features.market.medal.application.usecase.update.UpdateMedalUsecase;
import org.acme.features.market.medal.domain.gateway.MedalCursor;
import org.acme.features.market.medal.domain.gateway.MedalFilter;
import org.acme.features.market.medal.domain.gateway.MedalOrder;
import org.acme.features.market.medal.domain.model.MedalReference;
import org.acme.features.market.medal.domain.model.valueobject.MedalNameVO;
import org.acme.features.market.medal.domain.model.valueobject.MedalUidVO;
import org.acme.features.market.medal.domain.model.valueobject.MedalVersionVO;
import org.acme.generated.openapi.api.MedalApi;
import org.acme.generated.openapi.model.Medal;
import org.acme.generated.openapi.model.MedalList;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class MedalController implements MedalApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final CreateMedalUsecase create;

  /**
   * Medal
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DeleteMedalUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ListMedalUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RetrieveMedalUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UpdateMedalUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param medal
   * @return
   */
  @Override
  @Transactional
  public Response medalApiCreate(Medal medal) {
    MedalDto created = create.create(
        MedalCreateCommand.builder().dto(toDomainModel(medal)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(created)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response medalApiDelete(final String uid) {
    MedalDto deleted = delete.delete(MedalDeleteCommand.builder().reference(MedalReference.of(uid))
        .build(currentRequest.interaction()));
    return Response.ok(toApiModel(deleted)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uids
   * @param search
   * @param name
   * @param limit
   * @param sinceUid
   * @param sinceName
   * @param order
   * @return
   */
  @Override
  public Response medalApiList(final List<String> uids, final String search, final String name,
      final Integer limit, final String sinceUid, final String sinceName, final String order) {
    List<MedalOrder> orderSteps = null == order ? List.of()
        : Arrays.asList(order.split(",")).stream().map(this::mapOrder).filter(Objects::nonNull)
            .toList();
    MedalFilter.MedalFilterBuilder filterBuilder = MedalFilter.builder();
    MedalCursor.MedalCursorBuilder cursorBuilder = MedalCursor.builder();
    cursorBuilder = cursorBuilder.limit(limit);
    cursorBuilder = cursorBuilder.sinceUid(sinceUid);
    filterBuilder =
        filterBuilder.uids(uids.stream().flatMap(part -> Stream.of(part.split(","))).toList());
    filterBuilder = filterBuilder.search(search);
    filterBuilder = filterBuilder.name(name);
    cursorBuilder = cursorBuilder.sinceName(sinceName);
    cursorBuilder = cursorBuilder.order(orderSteps);
    MedalFilter filter = filterBuilder.build();
    MedalCursor cursor = cursorBuilder.build();
    List<MedalDto> listed = list.list(
        MedalListQuery.builder().filter(filter).cursor(cursor).build(currentRequest.interaction()));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)) */
    return Response.ok(toListApiModel(listed, filter, cursor)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response medalApiRetrieve(final String uid) {
    MedalDto retrieved = retrieve.retrieve(MedalRetrieveQuery.builder()
        .reference(MedalReference.of(uid)).build(currentRequest.interaction()));
    /* .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))) */
    return Response.ok(toApiModel(retrieved)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param medal
   * @return
   */
  @Override
  @Transactional
  public Response medalApiUpdate(final String uid, final Medal medal) {
    MedalDto updated = update.update(MedalUpdateCommand.builder().dto(toDomainModel(medal))
        .reference(MedalReference.of(uid)).build(currentRequest.interaction()));
    return Response.ok(toApiModel(updated)).build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param label
   * @return
   */
  private MedalOrder mapOrder(final String label) {
    if (null == label) {
      return null;
    } else if (label.trim().equals("name-asc")) {
      return MedalOrder.NAME_ASC;
    } else if (label.trim().equals("name-desc")) {
      return MedalOrder.NAME_DESC;
    } else {
      return null;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private Medal toApiModel(MedalDto dto) {
    Medal medal = new Medal();
    medal.setUid(Optional.ofNullable(dto.getUid()).map(MedalUidVO::getValue).orElse(null));
    medal.setName(Optional.ofNullable(dto.getName()).map(MedalNameVO::getValue).orElse(null));
    medal.setVersion(
        Optional.ofNullable(dto.getVersion()).flatMap(MedalVersionVO::getValue).orElse(null));
    return medal;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param medal
   * @return
   */
  private MedalDto toDomainModel(Medal medal) {
    MedalDto.MedalDtoBuilder builder = MedalDto.builder();
    if (null != medal.getUid()) {
      builder = builder.uid(MedalUidVO.from(medal.getUid()));
    }
    if (null != medal.getName()) {
      builder = builder.name(MedalNameVO.from(medal.getName()));
    }
    if (null != medal.getVersion()) {
      builder = builder.version(MedalVersionVO.from(medal.getVersion()));
    }
    return builder.build();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param medals
   * @param filter
   * @param cursor
   * @return
   */
  private MedalList toListApiModel(List<MedalDto> medals, MedalFilter filter, MedalCursor cursor) {
    Optional<MedalDto> last =
        medals.isEmpty() ? Optional.empty() : Optional.of(medals.get(medals.size() - 1));
    StringBuilder self = new StringBuilder();
    StringBuilder next = new StringBuilder();
    StringBuilder first = new StringBuilder();
    if (!filter.getUids().isEmpty()) {
      String uidsValue =
          URLEncoder.encode(String.join(",", filter.getUids()), StandardCharsets.UTF_8);
      self.append("&uids=" + uidsValue);
      next.append("&uids=" + uidsValue);
      first.append("&uids=" + uidsValue);
    }
    filter.getSearch().ifPresent(search -> {
      String searchValue = URLEncoder.encode(search, StandardCharsets.UTF_8);
      self.append("&search=" + searchValue);
      next.append("&search=" + searchValue);
      first.append("&search=" + searchValue);
    });
    filter.getName().ifPresent(filterName -> {
      String nameValue = URLEncoder.encode(String.valueOf(filterName), StandardCharsets.UTF_8);
      self.append("&name=" + nameValue);
      next.append("&name=" + nameValue);
      first.append("&name=" + nameValue);
    });
    cursor.getLimit().ifPresent(limit -> {
      self.append("&limit=" + limit);
      first.append("&limit=" + limit);
      next.append("&limit=" + limit);
    });
    cursor.getSinceUid().ifPresent(
        since -> self.append("&since-uid=" + URLEncoder.encode(since, StandardCharsets.UTF_8)));
    cursor.getSinceName().ifPresent(sinceName -> self
        .append("&since-name=" + URLEncoder.encode(sinceName, StandardCharsets.UTF_8)));
    if (!cursor.getOrder().isEmpty()) {
      String urlOrder = URLEncoder.encode(
          String.join(",",
              cursor.getOrder().stream().map(this::writeOrder).filter(Objects::nonNull).toList()),
          StandardCharsets.UTF_8);
      self.append("&order=" + urlOrder);
      next.append("&order=" + urlOrder);
      first.append("&order=" + urlOrder);
    }
    last.ifPresent(lastDto -> {
      next.append(
          "&since-uid=" + URLEncoder.encode(lastDto.getUid().getValue(), StandardCharsets.UTF_8));
      cursor.getSinceName().ifPresent(sinceName -> next.append(
          "&since-name=" + URLEncoder.encode(lastDto.getUid().getValue(), StandardCharsets.UTF_8)));
    });
    return new MedalList().items(medals.stream().map(this::toApiModel).toList())
        .next(next.length() > 1 ? "?" + next.substring(1) : "")
        .self(self.length() > 1 ? "?" + self.substring(1) : "")
        .first(first.length() > 1 ? "?" + first.substring(1) : "");
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param order
   * @return
   */
  private String writeOrder(final MedalOrder order) {
    if (null == order) {
      return null;
    } else if (order == MedalOrder.NAME_ASC) {
      return "name-asc";
    } else if (order == MedalOrder.NAME_DESC) {
      return "name-desc";
    } else {
      return null;
    }
  }
}
