package org.acme.features.market.medal.application.usecase.list;

import java.util.List;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.metadata.TimestampedList;
import org.acme.common.metadata.WrapMetadata;
import org.acme.common.security.Allow;
import org.acme.features.market.medal.application.MedalDto;
import org.acme.features.market.medal.application.service.MedalsVisibilityService;
import org.acme.features.market.medal.domain.gateway.MedalCached;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ListMedalUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<MedalListAllowProposal> listAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final MedalsVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    MedalListAllowProposal base = MedalListAllowProposal.build(query, true, "Allowed by default");
    listAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public List<MedalDto> list(final MedalListQuery query) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    MedalCached values = visibility.listCachedVisibles(query, query.getFilter(), query.getCursor());
    List<MedalDto> list =
        values.getValue().stream().map(value -> visibility.copyWithHidden(query, value)).toList();
    return new TimestampedList<>(WrapMetadata.<List<MedalDto>>builder().data(list)
        .since(values.getSince().toInstant()).build());
  }
}
