package org.acme.features.market.place.infrastructure.driven;

import java.util.Optional;
import java.util.function.Function;

import javax.sql.DataSource;

import org.acme.common.algorithms.Slider;
import org.acme.features.market.place.domain.gateway.PlaceCursor;
import org.acme.features.market.place.domain.gateway.PlaceFilter;
import org.acme.features.market.place.domain.gateway.PlaceWriteRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.PlaceRef;
import org.acme.features.market.place.infrastructure.repository.PlaceRepository;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import jakarta.inject.Named;

@RequestScoped
public class PlaceWriteGatewayAdapter implements PlaceWriteRepositoryGateway {

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final PlacePhotoUploadGatewayAdapter placePhotoUploadGatewayAdapter;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   */
  private final PlaceRepository repository;

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param readSource
   * @param writeSource
   * @param placePhotoUploadGatewayAdapter
   */
  public PlaceWriteGatewayAdapter(final DataSource readSource,
      @Named("write-channel") final Instance<DataSource> writeSource,
      PlacePhotoUploadGatewayAdapter placePhotoUploadGatewayAdapter) {
    this.repository = new PlaceRepository(readSource);
    this.placePhotoUploadGatewayAdapter = placePhotoUploadGatewayAdapter;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @return
   */
  @Override
  public long count(PlaceFilter filter) {
    return repository.count(filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public Place create(Place entity) {
    placePhotoUploadGatewayAdapter.commitPhoto(entity, Optional.empty());
    return repository.create(entity);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @param verifier
   * @return
   */
  @Override
  public Place create(Place entity, Function<Place, Boolean> verifier) {
    placePhotoUploadGatewayAdapter.commitPhoto(entity, Optional.empty());
    return repository.create(entity, verifier);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public Place delete(Place entity) {
    Place deleted = repository.delete(entity);
    placePhotoUploadGatewayAdapter.deletePhoto(entity);;
    return deleted;
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @return
   */
  @Override
  public Place enrich(PlaceRef reference) {
    return repository.enrich(reference);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public boolean exists(String uid, Optional<PlaceFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slider<Place> list(PlaceFilter filter, PlaceCursor cursor) {
    return repository.list(filter, cursor);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public Optional<Place> retrieve(String uid, Optional<PlaceFilter> filter) {
    return repository.retrieve(uid, filter);
  }

  /**
   * @autogenerated WriteAdaterGatewayGenerator
   * @param reference
   * @param entity
   * @return
   */
  @Override
  public Place update(PlaceRef reference, Place entity) {
    Place stored = enrich(reference);
    placePhotoUploadGatewayAdapter.commitPhoto(entity, Optional.of(stored));
    return repository.update(entity);
  }
}
