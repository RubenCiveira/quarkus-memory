package org.acme.features.market.place.application.usecase.update;

import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.exception.NotFoundException;
import org.acme.common.security.Allow;
import org.acme.features.market.place.application.PlaceDto;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.domain.Places;
import org.acme.features.market.place.domain.gateway.PlaceCacheGateway;
import org.acme.features.market.place.domain.gateway.PlaceWriteRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.PlaceRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class UpdatePlaceUsecase {

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Places aggregate;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final PlaceCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<PlaceUpdateEvent> eventEmitter;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final PlaceWriteRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<PlaceUpdateProposal> proposalEmitter;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated UpdateUsecaseGenerator
   */
  private final Event<PlaceUpdateAllowProposal> updateAllow;

  /**
   * @autogenerated UpdateUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final PlaceRef reference) {
    return PlaceUpdateAllowProposal.resolveWith(updateAllow,
        PlaceUpdateAllowProposal.build(query, Optional.of(reference), true, "Allowed by default"));
  }

  /**
   * @autogenerated UpdateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    return PlaceUpdateAllowProposal.resolveWith(updateAllow,
        PlaceUpdateAllowProposal.build(query, Optional.empty(), true, "Allowed by default"));
  }

  /**
   * The slide with some values
   *
   * @autogenerated UpdateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public PlaceDto update(final PlaceUpdateCommand command) {
    Allow detail = allow(command, command.getReference());
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    Place original = visibility.retrieveVisible(command, command.getReference().getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    PlaceDto filled = visibility.copyWithFixed(command, command.getDto());
    PlaceDto dto = PlaceUpdateProposal.resolveWith(proposalEmitter, command, filled, original);
    Place saved = gateway.update(original,
        aggregate.modify(original, dto.toEntityBuilder(Optional.of(original))));
    cache.update(saved);
    PlaceUpdateEvent.notifyWith(eventEmitter, command, saved);
    return visibility.copyWithHidden(command, saved);
  }
}
