package org.acme.features.market.place.application.usecase.create;

import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.place.application.PlaceDto;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.domain.Places;
import org.acme.features.market.place.domain.gateway.PlaceCacheGateway;
import org.acme.features.market.place.domain.gateway.PlaceWriteRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreatePlaceUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Places aggregate;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final PlaceCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<PlaceCreateAllowProposal> createAllow;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<PlaceCreateEvent> eventEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final PlaceWriteRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<PlaceCreateProposal> proposalEmitter;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    return PlaceCreateAllowProposal.resolveWith(createAllow,
        PlaceCreateAllowProposal.build(query, true, "Allowed by default"));
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public PlaceDto create(final PlaceCreateCommand query) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    PlaceDto filled = visibility.copyWithFixed(query, query.getDto());
    PlaceDto dto = PlaceCreateProposal.resolveWith(proposalEmitter, query, filled);
    Place entity = aggregate.initialize(dto.toEntityBuilder(Optional.empty()));
    Place created =
        gateway.create(entity, attempt -> visibility.checkVisibility(query, attempt.getUidValue()));
    cache.update(created);
    PlaceCreateEvent.notifyWith(eventEmitter, query, created);
    return visibility.copyWithHidden(query, created);
  }
}
