package org.acme.features.market.place.application.usecase.photo.retrieve;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.common.store.BinaryContent;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.application.usecase.photo.retrieve.event.PlacePhotoRetrieveUploadAllowPipelineStageEvent;
import org.acme.features.market.place.domain.gateway.PlacePhotoUploadGateway;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.PlaceRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class RetrievePhotoUploadUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<PlacePhotoRetrieveUploadAllowPipelineStageEvent> retrieveAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacePhotoUploadGateway store;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query, final PlaceRef reference) {
    PlacePhotoRetrieveUploadAllowPipelineStageEvent base =
        PlacePhotoRetrieveUploadAllowPipelineStageEvent.build(query, Optional.of(reference), true,
            "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    PlacePhotoRetrieveUploadAllowPipelineStageEvent base =
        PlacePhotoRetrieveUploadAllowPipelineStageEvent.build(query, Optional.empty(), true,
            "Allowed by default");
    retrieveAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return The slide with some values
   */
  public CompletionStage<PlaceRetrieveUploadPhotoResult> read(
      final PlaceRetrieveUploadPhotoQuery query) {
    CompletionStage<Optional<BinaryContent>> result =
        allow(query, query.getReference()).thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return visibility.retrieveVisible(query, query.getReference().getUidValue());
        }).thenCompose(this::readPhotoIfIsPresent);
    return result.thenApply(binary -> PlaceRetrieveUploadPhotoResult.builder().interaction(query)
        .photo(binary).build());
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param optionalEntity
   * @return
   */
  private CompletionStage<Optional<BinaryContent>> readPhotoIfIsPresent(
      final Optional<Place> optionalEntity) {
    return optionalEntity.map(entity -> store.readPhoto(entity))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
