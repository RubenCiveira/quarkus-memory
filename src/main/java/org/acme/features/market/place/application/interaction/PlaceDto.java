package org.acme.features.market.place.application.interaction;

import java.util.Map;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.valueobject.PlaceMerchantVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceNameVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceOpeningDateVO;
import org.acme.features.market.place.domain.model.valueobject.PlacePhotoVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceUidVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class PlaceDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<PlaceDto, Place>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid(), "name",
      (target, source) -> target.name = source == null ? null : source.getName(), "merchant",
      (target, source) -> target.merchant = source == null ? null : source.getMerchant(), "photo",
      (target, source) -> target.photo = source == null ? null : source.getPhoto(), "openingDate",
      (target, source) -> target.openingDate = source == null ? null : source.getOpeningDate(),
      "version", (target, source) -> target.version = source == null ? null : source.getVersion());

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<PlaceDto>> toHide =
      Map.of("uid", dto -> dto.uid = null, "name", dto -> dto.name = null, "merchant",
          dto -> dto.merchant = null, "photo", dto -> dto.photo = null, "openingDate",
          dto -> dto.openingDate = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param place The entity with the values
   * @return A dto with the entity data
   */
  public static PlaceDto from(final Place place) {
    return PlaceDto.builder().uid(place.getUid()).name(place.getName())
        .merchant(place.getMerchant()).photo(place.getPhoto()).openingDate(place.getOpeningDate())
        .version(place.getVersion()).build();
  }

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceMerchantVO merchant;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceNameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceOpeningDateVO openingDate;

  /**
   * @autogenerated EntityGenerator
   */
  private PlacePhotoVO photo;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceUidVO uid;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceVersionVO version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param place The field to hide
   */
  public void fixField(final String field, final Place place) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, place);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fixField(final String field) {
    fixField(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hideField(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @param original
   * @return The entity param with the new values
   */
  public Place.PlaceBuilder toEntityBuilder(final Optional<Place> original) {
    return Place.builder().uid(uidOrDefault(original)).name(nameOrDefault(original))
        .merchant(merchantOrDefault(original)).photo(photoOrDefault(original))
        .openingDate(openingDateOrDefault(original)).version(versionOrDefault(original));
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private PlaceMerchantVO merchantOrDefault(final Optional<Place> original) {
    return null == merchant ? original.map(Place::getMerchant).orElse(null) : merchant;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private PlaceNameVO nameOrDefault(final Optional<Place> original) {
    return null == name ? original.map(Place::getName).orElse(null) : name;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private PlaceOpeningDateVO openingDateOrDefault(final Optional<Place> original) {
    return null == openingDate ? original.map(Place::getOpeningDate).orElse(null) : openingDate;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private PlacePhotoVO photoOrDefault(final Optional<Place> original) {
    return null == photo ? original.map(Place::getPhoto).orElse(null) : photo;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private PlaceUidVO uidOrDefault(final Optional<Place> original) {
    return null == uid ? original.map(Place::getUid).orElse(null) : uid;
  }

  /**
   * @autogenerated EntityGenerator
   * @param original
   * @return
   */
  private PlaceVersionVO versionOrDefault(final Optional<Place> original) {
    return null == version ? original.map(Place::getVersion).orElse(null) : version;
  }
}
