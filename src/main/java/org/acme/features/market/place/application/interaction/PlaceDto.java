package org.acme.features.market.place.application.interaction;

import java.time.OffsetDateTime;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.valueobject.PlaceMerchantVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceNameVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceOpeningDateVO;
import org.acme.features.market.place.domain.model.valueobject.PlacePhotoVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceUidVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class PlaceDto {

  /**
   * The callbacks to copy
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, BiConsumer<PlaceDto, Place>> toFix = Map.of("uid",
      (target, source) -> target.uid = source == null ? null : source.getUid().getValue(), "name",
      (target, source) -> target.name = source == null ? null : source.getName().getValue(),
      "merchant",
      (target, source) -> target.merchant =
          source == null ? null : source.getMerchant().getReferenceValue(),
      "photo",
      (target, source) -> target.photo =
          source == null ? null : source.getPhoto().getValue().orElse(null),
      "openingDate",
      (target, source) -> target.openingDate =
          source == null ? null : source.getOpeningDate().getValue().orElse(null),
      "version", (target, source) -> target.version =
          source == null ? null : source.getVersion().getValue().orElse(null));

  /**
   * The callbacks to hide
   *
   * @autogenerated EntityGenerator
   */
  private static final Map<String, Consumer<PlaceDto>> toHide =
      Map.of("uid", dto -> dto.uid = null, "name", dto -> dto.name = null, "merchant",
          dto -> dto.merchant = null, "photo", dto -> dto.photo = null, "openingDate",
          dto -> dto.openingDate = null, "version", dto -> dto.version = null);

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param place The entity with the values
   * @return A dto with the entity data
   */
  public static PlaceDto from(final Place place) {
    return PlaceDto.builder().uid(place.getUid().getValue()).name(place.getName().getValue())
        .merchant(place.getMerchant().getReferenceValue())
        .photo(place.getPhoto().getValue().orElse(null))
        .openingDate(place.getOpeningDate().getValue().orElse(null))
        .version(place.getVersion().getValue().orElse(null)).build();
  }

  /**
   * @autogenerated EntityGenerator
   */
  private String merchant;

  /**
   * El name de place
   *
   * @autogenerated EntityGenerator
   */
  private String name;

  /**
   * El opening date de place
   *
   * @autogenerated EntityGenerator
   */
  private OffsetDateTime openingDate;

  /**
   * El photo de place
   *
   * @autogenerated EntityGenerator
   */
  private String photo;

  /**
   * A number to identify the db record
   *
   * @autogenerated EntityGenerator
   */
  private String uid;

  /**
   * Campo con el n√∫mero de version de place para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  private Integer version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param place The field to hide
   */
  public void fix(final String field, final Place place) {
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, place);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fix(final String field) {
    fix(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hide(final String field) {
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @return The entity param with the new values
   */
  public Place.PlaceBuilder toEntityBuilder() {
    return Place.builder().uid(PlaceUidVO.from(uid)).name(PlaceNameVO.from(name))
        .merchant(PlaceMerchantVO.fromReference(merchant)).photo(PlacePhotoVO.from(photo))
        .openingDate(PlaceOpeningDateVO.from(openingDate)).version(PlaceVersionVO.from(version));
  }
}
