package org.acme.features.market.place.application;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.Place.PlaceBuilder;
import org.acme.features.market.place.domain.model.valueobject.PlaceMerchantVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceNameVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceOpeningDateVO;
import org.acme.features.market.place.domain.model.valueobject.PlacePhotoVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceUidVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceVersionVO;

import lombok.Builder;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.With;

@Data
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class PlaceDto {

  /**
   * A dto with the entity data
   *
   * @autogenerated EntityGenerator
   * @param place The entity with the values
   * @return A dto with the entity data
   */
  public static PlaceDto from(final Place place) {
    return PlaceDto.builder().uid(place.getUid()).name(place.getName())
        .merchant(place.getMerchant()).photo(place.getPhoto()).openingDate(place.getOpeningDate())
        .version(place.getVersion()).build();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  private static Map<String, BiConsumer<PlaceDto, Place>> toFixCallbacks() {
    Map<String, BiConsumer<PlaceDto, Place>> map = new HashMap<>();
    map.put("uid", (target, source) -> target.uid = source == null ? null : source.getUid());
    map.put("name", (target, source) -> target.name = source == null ? null : source.getName());
    map.put("merchant",
        (target, source) -> target.merchant = source == null ? null : source.getMerchant());
    map.put("photo", (target, source) -> target.photo = source == null ? null : source.getPhoto());
    map.put("openingDate",
        (target, source) -> target.openingDate = source == null ? null : source.getOpeningDate());
    map.put("version",
        (target, source) -> target.version = source == null ? null : source.getVersion());
    return map;
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  private static Map<String, Consumer<PlaceDto>> toHideCallbacks() {
    Map<String, Consumer<PlaceDto>> map = new HashMap<>();
    map.put("uid", dto -> dto.uid = null);
    map.put("name", dto -> dto.name = null);
    map.put("merchant", dto -> dto.merchant = null);
    map.put("photo", dto -> dto.photo = null);
    map.put("openingDate", dto -> dto.openingDate = null);
    map.put("version", dto -> dto.version = null);
    return map;
  }

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceMerchantVO merchant;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceNameVO name;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceOpeningDateVO openingDate;

  /**
   * @autogenerated EntityGenerator
   */
  private PlacePhotoVO photo;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceUidVO uid;

  /**
   * @autogenerated EntityGenerator
   */
  private PlaceVersionVO version;

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   * @param place The field to hide
   */
  public void fixField(final String field, final Place place) {
    Map<String, BiConsumer<PlaceDto, Place>> toFix = toFixCallbacks();
    if (toFix.containsKey(field)) {
      toFix.get(field).accept(this, place);
    }
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void fixField(final String field) {
    fixField(field, null);
  }

  /**
   * Hide a field value for the dto (setting as null)
   *
   * @autogenerated EntityGenerator
   * @param field The field to hide
   */
  public void hideField(final String field) {
    Map<String, Consumer<PlaceDto>> toHide = toHideCallbacks();
    if (toHide.containsKey(field)) {
      toHide.get(field).accept(this);
    }
  }

  /**
   * The entity param with the new values
   *
   * @autogenerated EntityGenerator
   * @param original
   * @return The entity param with the new values
   */
  public PlaceBuilder toEntityBuilder(final Optional<Place> original) {
    PlaceBuilder builder = Place.builder();
    builder = setUidOrDefault(builder, original);
    builder = setNameOrDefault(builder, original);
    builder = setMerchantOrDefault(builder, original);
    builder = setPhotoOrDefault(builder, original);
    builder = setOpeningDateOrDefault(builder, original);
    builder = setVersionOrDefault(builder, original);
    return builder;
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Place.PlaceBuilder setMerchantOrDefault(final PlaceBuilder builder,
      final Optional<Place> original) {
    PlaceMerchantVO value =
        null == merchant ? original.map(Place::getMerchant).orElse(null) : merchant;
    return null == value ? builder : builder.merchant(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Place.PlaceBuilder setNameOrDefault(final PlaceBuilder builder,
      final Optional<Place> original) {
    PlaceNameVO value = null == name ? original.map(Place::getName).orElse(null) : name;
    return null == value ? builder : builder.name(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Place.PlaceBuilder setOpeningDateOrDefault(final PlaceBuilder builder,
      final Optional<Place> original) {
    PlaceOpeningDateVO value =
        null == openingDate ? original.map(Place::getOpeningDate).orElse(null) : openingDate;
    return null == value ? builder : builder.openingDate(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Place.PlaceBuilder setPhotoOrDefault(final PlaceBuilder builder,
      final Optional<Place> original) {
    PlacePhotoVO value = null == photo ? original.map(Place::getPhoto).orElse(null) : photo;
    return null == value ? builder : builder.photo(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Place.PlaceBuilder setUidOrDefault(final PlaceBuilder builder,
      final Optional<Place> original) {
    PlaceUidVO value = null == uid ? original.map(Place::getUid).orElse(null) : uid;
    return null == value ? builder : builder.uid(value);
  }

  /**
   * @autogenerated EntityGenerator
   * @param builder
   * @param original
   * @return
   */
  private Place.PlaceBuilder setVersionOrDefault(final PlaceBuilder builder,
      final Optional<Place> original) {
    PlaceVersionVO value = null == version ? original.map(Place::getVersion).orElse(null) : version;
    return null == value ? builder : builder.version(value);
  }
}
