package org.acme.features.market.place.infrastructure.driven;

import java.util.Optional;
import java.util.concurrent.CompletionStage;

import javax.sql.DataSource;

import org.acme.common.action.Slide;
import org.acme.features.market.place.domain.gateway.PlaceCursor;
import org.acme.features.market.place.domain.gateway.PlaceFilter;
import org.acme.features.market.place.domain.gateway.PlaceReadRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.infrastructure.repository.PlaceRepository;

import jakarta.enterprise.context.RequestScoped;

@RequestScoped
public class PlaceReadGatewayAdapter implements PlaceReadRepositoryGateway {

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   */
  private final PlaceRepository repository;

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param readSource
   */
  public PlaceReadGatewayAdapter(final DataSource readSource) {
    this.repository = new PlaceRepository(readSource);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public CompletionStage<Boolean> exists(String uid, Optional<PlaceFilter> filter) {
    return repository.exists(uid, filter);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  @Override
  public Slide<Place> list(PlaceFilter filter, PlaceCursor cursor) {
    return repository.list(filter, cursor);
  }

  /**
   * @autogenerated ReadAdaterGatewayGenerator
   * @param uid
   * @param filter
   * @return
   */
  @Override
  public CompletionStage<Optional<Place>> retrieve(String uid, Optional<PlaceFilter> filter) {
    return repository.retrieve(uid, filter);
  }
}
