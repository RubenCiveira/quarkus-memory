package org.acme.features.market.place.application.usecase.list;

import java.util.List;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.features.market.place.application.PlaceDto;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.domain.gateway.PlaceCached;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ListPlaceUsecase {

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<PlaceListAllowPipelineEvent> listAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    PlaceListAllowPipelineEvent base =
        PlaceListAllowPipelineEvent.build(query, true, "Allowed by default");
    listAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public List<PlaceDto> list(final PlaceListQuery query) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    PlaceCached values = visibility.listCachedVisibles(query, query.getFilter(), query.getCursor());
    return values.getValue().stream().map(value -> visibility.copyWithHidden(query, value))
        .toList();
  }
}
