package org.acme.features.market.place.infrastructure.repository;

import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.function.BiFunction;

import org.acme.common.action.Slide;
import org.acme.features.market.place.domain.gateway.PlaceCursor;
import org.acme.features.market.place.domain.gateway.PlaceFilter;
import org.acme.features.market.place.domain.model.Place;

class PlaceSlice extends Slide<Place> {

  /**
   * @autogenerated SlideGenerator
   */
  private final PlaceCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final PlaceFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<PlaceFilter, PlaceCursor, CompletionStage<Slide<Place>>> gateway;

  /**
   * @autogenerated SlideGenerator
   */
  private final List<Place> places;

  /**
   * @autogenerated SlideGenerator
   * @param limit
   * @param places
   * @param gateway
   * @param filter
   * @param cursor
   */
  PlaceSlice(final Optional<Integer> limit, final List<Place> places,
      final BiFunction<PlaceFilter, PlaceCursor, CompletionStage<Slide<Place>>> gateway,
      final PlaceFilter filter, final PlaceCursor cursor) {
    super(limit);
    this.places = places;
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * place
   *
   * @autogenerated SlideGenerator
   * @return place
   */
  @Override
  public List<Place> getList() {
    return places;
  }

  /**
   * @autogenerated SlideGenerator
   * @param limit
   * @return
   */
  @Override
  public CompletionStage<Slide<Place>> loadNext(int limit) {
    if (places.isEmpty()) {
      return CompletableFuture.completedStage(this);
    } else {
      Place last = places.get(places.size() - 1);
      PlaceCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
      return gateway.apply(this.filter, cr);
    }
  }
}
