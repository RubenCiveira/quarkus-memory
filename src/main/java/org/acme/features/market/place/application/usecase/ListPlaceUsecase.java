package org.acme.features.market.place.application.usecase;

import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Slide;
import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.place.application.allow.PlaceListAllow;
import org.acme.features.market.place.application.interaction.PlaceDto;
import org.acme.features.market.place.application.interaction.query.PlaceAllowQuery;
import org.acme.features.market.place.application.interaction.query.PlaceListQuery;
import org.acme.features.market.place.application.interaction.result.PlaceListResult;
import org.acme.features.market.place.application.usecase.service.PlacesVisibilityService;
import org.acme.features.market.place.domain.gateway.PlaceReadRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class ListPlaceUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlaceReadRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<PlaceListAllow> listAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public PlaceListAllow allow(final PlaceAllowQuery query) {
    PlaceListAllow base = PlaceListAllow.build(true, "Allowed by default");
    listAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public PlaceListResult list(final PlaceListQuery query) {
    CompletionStage<List<Place>> future = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.visibleFilter(query, query.getFilter()).thenCompose(visibleFilter -> {
        Slide<Place> slide = gateway.list(visibleFilter, query.getCursor());
        return slide.filterUnitLimit(values -> filterUnitLimit(query, values));
      });
    });
    return PlaceListResult.builder().query(query)
        .places(future.thenCompose(values -> mapList(query, values))).build();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  private PlaceListAllow allow(final PlaceListQuery query) {
    return allow(PlaceAllowQuery.builder().build(query));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param places
   * @return The slide with some values
   */
  private CompletionStage<List<Place>> filterUnitLimit(final PlaceListQuery query,
      final List<Place> places) {
    return visibility.listableFilter(query, places);
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @param places
   * @return The slide with some values
   */
  private CompletionStage<List<PlaceDto>> mapList(final PlaceListQuery query,
      final List<Place> places) {
    List<CompletableFuture<PlaceDto>> futures =
        places.stream().map(place -> visibility.hide(query, place))
            .map(CompletionStage::toCompletableFuture).toList();
    return CompletableFuture.allOf(futures.toArray(new CompletableFuture[0]))
        .thenApply(voidResult -> futures.stream().map(CompletableFuture::join).toList());
  }
}
