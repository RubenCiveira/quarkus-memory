package org.acme.features.market.place.application.usecase.photo.upload;

import java.util.Optional;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.common.store.BinaryContent;
import org.acme.features.market.place.application.usecase.photo.upload.event.PlacePhotoTempUploadAllowPipelineStageEvent;
import org.acme.features.market.place.domain.gateway.PlacePhotoUploadGateway;

import io.opentelemetry.api.trace.Span;
import io.opentelemetry.api.trace.StatusCode;
import io.opentelemetry.api.trace.Tracer;
import io.opentelemetry.context.Scope;
import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PhotoTemporalUploadUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacePhotoUploadGateway store;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<PlacePhotoTempUploadAllowPipelineStageEvent> tempUploadAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final Tracer tracer;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    Span startSpan = tracer.spanBuilder("place-temp-upload-photo-allow").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      PlacePhotoTempUploadAllowPipelineStageEvent base =
          PlacePhotoTempUploadAllowPipelineStageEvent.build(query, true, "Allowed by default");
      tempUploadAllow.fire(base);
      return base.getDetail().whenComplete((val, ex) -> {
        if (null == ex) {
          startSpan.setAttribute("allowed", val.isAllowed());
          startSpan.setAttribute("reason", val.getDescription());
          startSpan.setStatus(StatusCode.OK);
        } else {
          startSpan.recordException(ex).setStatus(StatusCode.ERROR);
        }
        startSpan.end();
      });
    }
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<PlacePhotoTemporalUploadReadResult> read(
      final PlacePhotoTemporalUploadReadQuery query) {
    Span startSpan = tracer.spanBuilder("place-read-temp-uploaded-photo").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<Optional<BinaryContent>> result = allow(query).thenCompose(detail -> {
        if (!detail.isAllowed()) {
          throw new NotAllowedException(detail.getDescription());
        }
        return store.readTemporalPhoto(query.getKey());
      });
      return result.thenApply(binary -> PlacePhotoTemporalUploadReadResult.builder()
          .interaction(query).binary(binary).build()).whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<PlacePhotoTemporalUploadResult> upload(
      final PlacePhotoTemporalUploadCommand command) {
    Span startSpan = tracer.spanBuilder("place-temp-upload-photo").startSpan();
    try (Scope scope = startSpan.makeCurrent()) {
      CompletionStage<String> result = allow(command).thenCompose(detail -> {
        if (!detail.isAllowed()) {
          throw new NotAllowedException(detail.getDescription());
        }
        return store.storeTemporalPhoto(command.getBinary());
      });
      return result
          .thenApply(
              key -> PlacePhotoTemporalUploadResult.builder().interaction(command).key(key).build())
          .whenComplete((val, ex) -> {
            if (null == ex) {
              startSpan.setStatus(StatusCode.OK);
            } else {
              startSpan.recordException(ex).setStatus(StatusCode.ERROR);
            }
            startSpan.end();
          });
    }
  }
}
