package org.acme.features.market.place.application.usecase.photo.upload;

import java.util.Optional;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.security.Allow;
import org.acme.common.store.BinaryContent;
import org.acme.features.market.place.application.usecase.photo.upload.event.PlacePhotoTempUploadAllowPipelineStageEvent;
import org.acme.features.market.place.domain.gateway.PlacePhotoUploadGateway;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PhotoTemporalUploadUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacePhotoUploadGateway store;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<PlacePhotoTempUploadAllowPipelineStageEvent> tempUploadAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<Allow> allow(final Interaction query) {
    PlacePhotoTempUploadAllowPipelineStageEvent base =
        PlacePhotoTempUploadAllowPipelineStageEvent.build(query, true, "Allowed by default");
    tempUploadAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public CompletionStage<PlacePhotoTemporalUploadReadResult> read(
      final PlacePhotoTemporalUploadReadQuery query) {
    CompletionStage<Optional<BinaryContent>> result = allow(query).thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return store.readTemporalPhoto(query.getKey());
    });
    return result.thenApply(binary -> PlacePhotoTemporalUploadReadResult.builder()
        .interaction(query).binary(binary).build());
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public CompletionStage<PlacePhotoTemporalUploadResult> upload(
      final PlacePhotoTemporalUploadCommand command) {
    CompletionStage<String> result = allow(command).thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return store.storeTemporalPhoto(command.getBinary());
    });
    return result.thenApply(
        key -> PlacePhotoTemporalUploadResult.builder().interaction(command).key(key).build());
  }
}
