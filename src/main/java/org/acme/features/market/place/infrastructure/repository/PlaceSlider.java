package org.acme.features.market.place.infrastructure.repository;

import java.util.Iterator;
import java.util.List;
import java.util.function.BiFunction;

import org.acme.common.algorithms.Slider;
import org.acme.features.market.place.domain.gateway.PlaceCursor;
import org.acme.features.market.place.domain.gateway.PlaceFilter;
import org.acme.features.market.place.domain.model.Place;

class PlaceSlider extends Slider<Place> {

  /**
   * @autogenerated SlideGenerator
   */
  private final PlaceCursor cursor;

  /**
   * @autogenerated SlideGenerator
   */
  private final PlaceFilter filter;

  /**
   * @autogenerated SlideGenerator
   */
  private final BiFunction<PlaceFilter, PlaceCursor, Iterator<Place>> gateway;

  /**
   * @autogenerated SlideGenerator
   * @param multi
   * @param limit
   * @param gateway
   * @param filter
   * @param cursor
   */
  PlaceSlider(final Iterator<Place> multi, final int limit,
      final BiFunction<PlaceFilter, PlaceCursor, Iterator<Place>> gateway, final PlaceFilter filter,
      final PlaceCursor cursor) {
    super(multi, limit);
    this.gateway = gateway;
    this.filter = filter;
    this.cursor = cursor;
  }

  /**
   * @autogenerated SlideGenerator
   * @param places
   * @param limit
   * @return
   */
  @Override
  public Iterator<Place> next(List<Place> places, int limit) {
    Place last = places.get(places.size() - 1);
    PlaceCursor cr = this.cursor.withSinceUid(last.getUid().getValue()).withLimit(limit);
    return gateway.apply(this.filter, cr);
  }
}
