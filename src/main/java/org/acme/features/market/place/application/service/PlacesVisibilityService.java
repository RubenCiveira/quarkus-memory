package org.acme.features.market.place.application.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotFoundException;
import org.acme.features.market.merchant.application.service.MerchantsVisibilityService;
import org.acme.features.market.place.application.PlaceDto;
import org.acme.features.market.place.application.service.proposal.PlaceFixedFieldsProposal;
import org.acme.features.market.place.application.service.proposal.PlaceHiddenFieldsProposal;
import org.acme.features.market.place.application.service.proposal.PlaceVisibilityQueryProposal;
import org.acme.features.market.place.application.service.proposal.PlaceVisibleContentProposal;
import org.acme.features.market.place.domain.Places;
import org.acme.features.market.place.domain.gateway.PlaceCacheGateway;
import org.acme.features.market.place.domain.gateway.PlaceCached;
import org.acme.features.market.place.domain.gateway.PlaceCursor;
import org.acme.features.market.place.domain.gateway.PlaceFilter;
import org.acme.features.market.place.domain.gateway.PlaceReadRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.PlaceRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PlacesVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Places aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final PlaceCacheGateway cache;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<PlaceFixedFieldsProposal> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<PlaceHiddenFieldsProposal> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<PlaceVisibilityQueryProposal> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<PlaceVisibleContentProposal> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final PlacesCalculatorService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MerchantsVisibilityService merchantsVisibilityService;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final PlaceReadRepositoryGateway placeReadRepositoryGateway;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return listVisibles(prev, PlaceFilter.builder().uids(uids).build(),
        PlaceCursor.builder().build()).isEmpty();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public PlaceDto copyWithFixed(Interaction prev, PlaceDto source, Place original) {
    PlaceDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(field -> withReferences.fixField(field, original));
    return formula.copyWithFormulas(prev, withReferences, original);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public PlaceDto copyWithFixed(Interaction prev, PlaceDto source) {
    PlaceDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(field -> withReferences.fixField(field));
    return formula.copyWithFormulas(prev, withReferences);
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param place
   * @return The input dto with hidden values
   */
  public PlaceDto copyWithHidden(Interaction prev, Place place) {
    PlaceDto target = PlaceDto.from(place);
    fieldsToHide(prev, place).forEach(target::hideField);
    return target;
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.calcultadFields());
    PlaceFixedFieldsProposal value =
        PlaceFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param place
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, PlaceRef place) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, place));
    fields.addAll(aggregate.calcultadFields());
    PlaceFixedFieldsProposal value =
        PlaceFixedFieldsProposal.builder().fields(fields).place(place).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    PlaceHiddenFieldsProposal value =
        PlaceHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param place
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, PlaceRef place) {
    Set<String> fields = new HashSet<>();
    PlaceHiddenFieldsProposal value =
        PlaceHiddenFieldsProposal.builder().fields(fields).place(place).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public PlaceCached listCachedVisibles(Interaction prev, PlaceFilter filter, PlaceCursor cursor) {
    PlaceFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<Place> listVisibles(Interaction prev, PlaceFilter filter, PlaceCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public PlaceCached retrieveCachedVisible(Interaction prev, String uid) {
    PlaceCursor cursor = PlaceCursor.builder().limit(1).build();
    PlaceFilter visibleFilter =
        applyPreVisibilityFilter(prev, PlaceFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<Place> list = retrieveVisible(prev, uid).<List<Place>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<Place> retrieveVisible(Interaction prev, String uid) {
    PlaceFilter filter = applyPreVisibilityFilter(prev, PlaceFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private PlaceFilter applyPreVisibilityFilter(Interaction prev, PlaceFilter filter) {
    PlaceVisibilityQueryProposal visible =
        PlaceVisibilityQueryProposal.builder().filter(filter).interaction(prev).build();
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param placeRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, Place placeRef) {
    PlaceVisibleContentProposal accesible = PlaceVisibleContentProposal.builder().visible(true)
        .entity(placeRef).interaction(prev).build();
    fireVisibleList.fire(accesible);
    return accesible.getVisible();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<Place> queryItem(Interaction prev, String uid, PlaceFilter filter) {
    return placeReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<Place> queryItems(Interaction prev, PlaceFilter filter, PlaceCursor cursor) {
    List<Place> list = new ArrayList<>();
    Iterator<Place> slide = placeReadRepositoryGateway.list(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private PlaceDto visiblesReferences(Interaction prev, PlaceDto source) {
    if (null != source.getMerchant()) {
      boolean visible = merchantsVisibilityService.checkVisibility(prev,
          source.getMerchant().getReferenceValue());
      if (!visible) {
        throw new NotFoundException("No merchant - " + source.getMerchant().getReferenceValue());
      }
    }
    return source;
  }
}
