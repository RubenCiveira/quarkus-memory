package org.acme.features.market.place.infrastructure.driver.rest;

import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;

import org.acme.common.action.Interaction;
import org.acme.common.rest.CurrentRequest;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.application.usecase.create.CreatePlaceUsecase;
import org.acme.features.market.place.application.usecase.delete.DeletePlaceUsecase;
import org.acme.features.market.place.application.usecase.list.ListPlaceUsecase;
import org.acme.features.market.place.application.usecase.photo.upload.PhotoTemporalUploadUsecase;
import org.acme.features.market.place.application.usecase.retrieve.RetrievePlaceUsecase;
import org.acme.features.market.place.application.usecase.update.UpdatePlaceUsecase;
import org.acme.generated.openapi.api.PlaceAclApi;
import org.acme.generated.openapi.model.CommonAllow;
import org.acme.generated.openapi.model.PlaceAclFields;
import org.acme.generated.openapi.model.PlaceAclGenericAllows;
import org.acme.generated.openapi.model.PlaceAclSpecificAllows;
import org.acme.generated.openapi.model.PlaceGenericAcl;
import org.acme.generated.openapi.model.PlaceSpecificAcl;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PlaceAclController implements PlaceAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final CreatePlaceUsecase create;

  /**
   * Place
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final DeletePlaceUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ListPlaceUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RetrievePlaceUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final UpdatePlaceUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final PhotoTemporalUploadUsecase uploadPhoto;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response placeApiContextualAcl(final String uid) {
    return currentRequest.resolve(interaction -> {
      PlaceSpecificAcl response = new PlaceSpecificAcl();
      response.setAllows(new PlaceAclSpecificAllows());
      response.setFields(new PlaceAclFields());
      return CompletableFuture
          .allOf(fixedFields(response.getFields(), interaction),
              hiddenFields(response.getFields(), interaction), updateAllows(response, interaction),
              deleteAllows(response, interaction), retrieveAllows(response, interaction))
          .thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response placeApiGenericAcl() {
    return currentRequest.resolve(interaction -> {
      PlaceGenericAcl response = new PlaceGenericAcl();
      response.setAllows(new PlaceAclGenericAllows());
      response.setFields(new PlaceAclFields());
      return CompletableFuture.allOf(fixedFields(response.getFields(), interaction),
          hiddenFields(response.getFields(), interaction), listAllows(response, interaction),
          createAllows(response, interaction), updateAllows(response, interaction),
          deleteAllows(response, interaction), retrieveAllows(response, interaction),
          uploadPhotoAllows(response, interaction)).thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> createAllows(final PlaceGenericAcl response,
      final Interaction query) {
    return create.allow(query)
        .thenAccept(detail -> response.getAllows().setCreate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final PlaceGenericAcl response,
      final Interaction query) {
    return delete.allow(query)
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final PlaceSpecificAcl response,
      final Interaction query) {
    return delete.allow(query)
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> fixedFields(final PlaceAclFields response,
      final Interaction query) {
    return visibility.fieldsToFix(query).getFixed()
        .thenAccept(fields -> response.setNoEditables(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> hiddenFields(final PlaceAclFields response,
      final Interaction query) {
    return visibility.fieldsToHide(query).getHidden()
        .thenAccept(fields -> response.setNoVisibles(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> listAllows(final PlaceGenericAcl response,
      final Interaction query) {
    return list.allow(query)
        .thenAccept(detail -> response.getAllows()
            .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final PlaceGenericAcl response,
      final Interaction query) {
    return retrieve.allow(query)
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final PlaceSpecificAcl response,
      final Interaction query) {
    return retrieve.allow(query)
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final PlaceGenericAcl response,
      final Interaction query) {
    return update.allow(query)
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final PlaceSpecificAcl response,
      final Interaction query) {
    return update.allow(query)
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> uploadPhotoAllows(final PlaceGenericAcl response,
      final Interaction query) {
    return uploadPhoto.allow(query)
        .thenAccept(detail -> response.getAllows().setUploadPhoto(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }
}
