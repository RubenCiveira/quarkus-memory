package org.acme.features.market.place.infrastructure.driver.rest;

import java.util.ArrayList;

import org.acme.common.action.Interaction;
import org.acme.common.infrastructure.CurrentRequest;
import org.acme.common.security.Allow;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.application.usecase.create.CreatePlaceUsecase;
import org.acme.features.market.place.application.usecase.delete.DeletePlaceUsecase;
import org.acme.features.market.place.application.usecase.list.ListPlaceUsecase;
import org.acme.features.market.place.application.usecase.photoupload.PhotoTemporalUploadUsecase;
import org.acme.features.market.place.application.usecase.retrieve.RetrievePlaceUsecase;
import org.acme.features.market.place.application.usecase.update.UpdatePlaceUsecase;
import org.acme.generated.openapi.api.PlaceAclApi;
import org.acme.generated.openapi.model.CommonAllow;
import org.acme.generated.openapi.model.PlaceAclFields;
import org.acme.generated.openapi.model.PlaceAclGenericAllows;
import org.acme.generated.openapi.model.PlaceAclSpecificAllows;
import org.acme.generated.openapi.model.PlaceGenericAcl;
import org.acme.generated.openapi.model.PlaceSpecificAcl;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PlaceAclController implements PlaceAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final CreatePlaceUsecase create;

  /**
   * Place
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final DeletePlaceUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ListPlaceUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RetrievePlaceUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final UpdatePlaceUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final PhotoTemporalUploadUsecase uploadPhoto;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response placeApiContextualAcl(final String uid) {
    Interaction interaction = currentRequest.interaction();
    PlaceSpecificAcl response = new PlaceSpecificAcl();
    response.setAllows(new PlaceAclSpecificAllows());
    response.setFields(new PlaceAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response placeApiGenericAcl() {
    Interaction interaction = currentRequest.interaction();
    PlaceGenericAcl response = new PlaceGenericAcl();
    response.setAllows(new PlaceAclGenericAllows());
    response.setFields(new PlaceAclFields());
    response.getFields().setNoEditables(new ArrayList<>());
    response.getFields().setNoVisibles(new ArrayList<>());
    fixedFields(response.getFields(), interaction);
    hiddenFields(response.getFields(), interaction);
    listAllows(response, interaction);
    createAllows(response, interaction);
    updateAllows(response, interaction);
    deleteAllows(response, interaction);
    retrieveAllows(response, interaction);
    uploadPhotoAllows(response, interaction);
    return Response.ok(response).build();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void createAllows(final PlaceGenericAcl response, final Interaction query) {
    Allow detail = create.allow(query);
    response.getAllows()
        .setCreate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final PlaceGenericAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void deleteAllows(final PlaceSpecificAcl response, final Interaction query) {
    Allow detail = delete.allow(query);
    response.getAllows()
        .setDelete(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void fixedFields(final PlaceAclFields response, final Interaction query) {
    visibility.fieldsToFix(query).forEach(field -> response.getNoEditables().add(field));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void hiddenFields(final PlaceAclFields response, final Interaction query) {
    visibility.fieldsToHide(query).forEach(field -> response.getNoVisibles().add(field));;
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void listAllows(final PlaceGenericAcl response, final Interaction query) {
    Allow detail = list.allow(query);
    response.getAllows()
        .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final PlaceGenericAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void retrieveAllows(final PlaceSpecificAcl response, final Interaction query) {
    Allow detail = retrieve.allow(query);
    response.getAllows()
        .setRetrieve(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final PlaceGenericAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void updateAllows(final PlaceSpecificAcl response, final Interaction query) {
    Allow detail = update.allow(query);
    response.getAllows()
        .setUpdate(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   */
  private void uploadPhotoAllows(final PlaceGenericAcl response, final Interaction query) {
    Allow detail = uploadPhoto.allow(query);
    response.getAllows().setUploadPhoto(
        new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription()));
  }
}
