package org.acme.features.market.place.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.exception.NotAllowedException;
import org.acme.features.market.place.application.allow.PlaceCreateAllow;
import org.acme.features.market.place.application.interaction.PlaceDto;
import org.acme.features.market.place.application.interaction.command.PlaceCreateCommand;
import org.acme.features.market.place.application.interaction.query.PlaceAllowQuery;
import org.acme.features.market.place.application.interaction.result.PlaceCreateResult;
import org.acme.features.market.place.application.usecase.service.PlacesVisibilityService;
import org.acme.features.market.place.domain.Places;
import org.acme.features.market.place.domain.gateway.PlaceWriteRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class CreatePlaceUsecase {

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final Places aggregate;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated CreateUsecaseGenerator
   */
  private final Event<PlaceCreateAllow> createAllow;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final PlaceWriteRepositoryGateway gateway;

  /**
   * @autogenerated CreateUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  public PlaceCreateAllow allow(final PlaceAllowQuery query) {
    PlaceCreateAllow base = PlaceCreateAllow.build(true, "Allowed by default");
    createAllow.fire(base);
    return base;
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public PlaceCreateResult create(final PlaceCreateCommand query) {
    CompletionStage<Optional<Place>> create = allow(query).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return visibility.copyWithFixed(query, query.getDto())
          .thenCompose(builder -> aggregate.initialize(builder.toEntityBuilder(Optional.empty()))
              .thenCompose(placeEntity -> createAndVerify(query, placeEntity)));
    });
    return PlaceCreateResult.builder().command(query)
        .place(create.thenCompose(place -> mapEntity(query, place))).build();
  }

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @return
   */
  private PlaceCreateAllow allow(final PlaceCreateCommand query) {
    return allow(PlaceAllowQuery.builder().build(query));
  }

  /**
   * @autogenerated CreateUsecaseGenerator
   * @param query
   * @param placeEntity
   * @return
   */
  private CompletionStage<Optional<Place>> createAndVerify(final PlaceCreateCommand query,
      final Place placeEntity) {
    return gateway.create(placeEntity,
        created -> visibility.checkVisibility(query, created.getUidValue()));
  }

  /**
   * The slide with some values
   *
   * @autogenerated CreateUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @param opplace
   * @return The slide with some values
   */
  private CompletionStage<Optional<PlaceDto>> mapEntity(final PlaceCreateCommand command,
      final Optional<Place> opplace) {
    return opplace.map(place -> visibility.copyWithHidden(command, place).thenApply(Optional::of))
        .orElseGet(() -> CompletableFuture.completedFuture(Optional.empty()));
  }
}
