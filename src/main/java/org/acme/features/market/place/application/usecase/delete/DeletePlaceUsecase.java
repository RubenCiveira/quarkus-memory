package org.acme.features.market.place.application.usecase.delete;

import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.exception.NotFoundException;
import org.acme.common.security.Allow;
import org.acme.features.market.place.application.PlaceDto;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.domain.Places;
import org.acme.features.market.place.domain.gateway.PlaceCacheGateway;
import org.acme.features.market.place.domain.gateway.PlaceWriteRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.PlaceRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class DeletePlaceUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Places aggregate;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final PlaceCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<PlaceDeleteAllowPipelineEvent> deleteAllow;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final PlaceWriteRepositoryGateway gateway;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final PlaceRef reference) {
    PlaceDeleteAllowPipelineEvent base = PlaceDeleteAllowPipelineEvent.build(query,
        Optional.of(reference), true, "Allowed by default");
    deleteAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    PlaceDeleteAllowPipelineEvent base =
        PlaceDeleteAllowPipelineEvent.build(query, Optional.empty(), true, "Allowed by default");
    deleteAllow.fire(base);
    return base.getDetail();
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public PlaceDto delete(final PlaceDeleteCommand command) {
    Allow detail = allow(command, command.getReference());
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    Place original = visibility.retrieveVisible(command, command.getReference().getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    Place deleted = gateway.delete(aggregate.clean(original));
    cache.update(deleted);
    return visibility.copyWithHidden(command, deleted);
  }
}
