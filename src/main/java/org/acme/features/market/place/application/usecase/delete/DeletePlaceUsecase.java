package org.acme.features.market.place.application.usecase.delete;

import java.util.Optional;

import org.acme.common.action.Interaction;
import org.acme.common.batch.BatchIdentificator;
import org.acme.common.batch.BatchProgress;
import org.acme.common.batch.BatchService;
import org.acme.common.batch.ExecutorPlan;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.exception.NotFoundException;
import org.acme.common.security.Allow;
import org.acme.features.market.place.application.PlaceDto;
import org.acme.features.market.place.application.service.PlacesVisibilityService;
import org.acme.features.market.place.domain.Places;
import org.acme.features.market.place.domain.gateway.PlaceCacheGateway;
import org.acme.features.market.place.domain.gateway.PlaceWriteRepositoryGateway;
import org.acme.features.market.place.domain.model.Place;
import org.acme.features.market.place.domain.model.PlaceRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class DeletePlaceUsecase {

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Places aggregate;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final BatchService batch;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final PlaceCacheGateway cache;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<PlaceDeleteAllowProposal> deleteAllow;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<PlaceDeleteEvent> eventEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final PlaceWriteRepositoryGateway gateway;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated DeleteUsecaseGenerator
   */
  private final Event<PlaceDeleteProposal> proposalEmitter;

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  private final PlacesVisibilityService visibility;

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @param reference
   * @return
   */
  public Allow allow(final Interaction query, final PlaceRef reference) {
    return PlaceDeleteAllowProposal.resolveWith(deleteAllow, query, Optional.of(reference), true,
        "Allowed by default");
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    return PlaceDeleteAllowProposal.resolveWith(deleteAllow, query, Optional.empty(), true,
        "Allowed by default");
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param query a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchProgress checkProgress(final PlaceCheckBatchDeleteStatusQuery query) {
    return query.getActor().getName()
        .flatMap(name -> batch.retrieve(query.getTaskId(), query.getConnection().getLocale(), name))
        .orElseThrow(() -> new NotFoundException());
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public PlaceDto delete(final PlaceDeleteCommand command) {
    Allow detail = allow(command, command.getReference());
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    Place original = visibility.retrieveVisible(command, command.getReference().getUidValue())
        .orElseThrow(() -> new NotFoundException(""));
    Place deleted = delete(command, original);
    flush();
    return visibility.copyWithHidden(command, deleted);
  }

  /**
   * The slide with some values
   *
   * @autogenerated DeleteUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public BatchIdentificator delete(final PlaceDeleteAllInBatchCommand command) {
    Allow detail = allow(command);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    return batch.start(command.getActor().getName().orElse("-"),
        ExecutorPlan.<PlaceDeleteAllInBatchCommand>builder().params(command).name("delete-place")
            .executor(DeletePlacesInBatchExecutor.class).build());
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   * @param interaction
   * @param original
   * @return
   */
  Place delete(final Interaction interaction, final Place original) {
    Place clean = aggregate.clean(original);
    PlaceRef modified = PlaceDeleteProposal.resolveWith(proposalEmitter, interaction, clean);
    Place result = gateway.delete(gateway.enrich(modified));
    PlaceDeleteEvent.notifyWith(eventEmitter, interaction, result);
    return result;
  }

  /**
   * @autogenerated DeleteUsecaseGenerator
   */
  void flush() {
    cache.evict();
  }
}
