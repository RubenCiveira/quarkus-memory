package org.acme.features.market.place.infrastructure.driven;

import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;

import org.acme.features.market.place.domain.gateway.PlaceCacheGateway;
import org.acme.features.market.place.domain.gateway.PlaceCached;
import org.acme.features.market.place.domain.gateway.PlaceCursor;
import org.acme.features.market.place.domain.gateway.PlaceFilter;
import org.acme.features.market.place.domain.model.Place;

import io.quarkus.cache.Cache;
import io.quarkus.cache.CacheName;
import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequestScoped
@Slf4j
@RequiredArgsConstructor
public class PlaceCacheGatewayAdapter implements PlaceCacheGateway {

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @CacheName("place")
  private final Cache cache;

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  @Override
  public void evict() {
    log.trace("Clearing cache after big operation");
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param place
   */
  @Override
  public void remove(final Place place) {
    log.trace("Invalidating place cache due to the removal of {}", place);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  public Optional<PlaceCached> retrieve(final PlaceFilter filter, final PlaceCursor cursor) {
    String key = key(filter, cursor);
    log.trace("Lookup at place cache for the key {}", key);
    return cache.<String, PlaceCached>get(key, k -> null).map(cached -> Optional.ofNullable(cached))
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @param places
   * @return
   */
  public PlaceCached store(final PlaceFilter filter, final PlaceCursor cursor,
      final List<Place> places) {
    String key = key(filter, cursor);
    cache.invalidate(key).await().indefinitely();
    return cache
        .<String, PlaceCached>get(key,
            k -> PlaceCached.builder().since(OffsetDateTime.now()).value(places).build())
        .await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param place
   */
  @Override
  public void update(final Place place) {
    log.trace("Invalidating place cache due to the update of {}", place);
    invalidate();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   */
  private void invalidate() {
    cache.invalidateAll().await().indefinitely();
  }

  /**
   * @autogenerated CacheAdaterGatewayGenerator
   * @param filter
   * @param cursor
   * @return
   */
  private String key(final PlaceFilter filter, final PlaceCursor cursor) {
    return filter.toString() + "-" + cursor.toString();
  }
}
