package org.acme.features.market.place.infrastructure.driven;

import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import org.acme.common.store.BinaryContent;
import org.acme.common.store.FileStore;
import org.acme.common.store.RepositoryLink;
import org.acme.features.market.place.domain.gateway.PlacePhotoUploadGateway;
import org.acme.features.market.place.domain.model.Place;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PlacePhotoUploadGatewayAdapter implements PlacePhotoUploadGateway {

  /**
   * @autogenerated StoreGatewayGenerator
   */
  private final FileStore store;

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   * @param orignal
   * @return
   */
  @Override
  public CompletionStage<Optional<String>> commitPhoto(final Place key,
      final Optional<Place> orignal) {
    String theNew = key.getPhotoValue().orElse(null);
    String theOld = orignal.flatMap(Place::getPhotoValue).orElse(null);
    CompletionStage<Optional<String>> stage =
        null == theNew ? CompletableFuture.completedStage(Optional.empty())
            : store.commitContent(theNew).thenApply(RepositoryLink::getKey).thenApply(Optional::of);
    return (null != theOld && !theNew.equals(theOld))
        ? store.deleteFile(theOld).thenCompose(_del -> stage)
        : stage;
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   * @return
   */
  @Override
  public CompletionStage<Optional<Boolean>> deletePhoto(final Place key) {
    String theKey = key.getPhotoValue().orElse(null);
    return null == theKey ? CompletableFuture.completedStage(Optional.empty())
        : store.deleteFile(theKey).thenApply(Optional::of);
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public CompletionStage<Optional<BinaryContent>> readPhoto(final Place entity) {
    return entity.getPhotoValue().map(store::retrieveFile).orElseThrow();
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   * @return
   */
  @Override
  public CompletionStage<Optional<BinaryContent>> readTemporalPhoto(final String key) {
    return store.retrieveTemp(key);
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param content
   * @return
   */
  @Override
  public CompletionStage<String> storeTemporalPhoto(final BinaryContent content) {
    return store.tempStore(content).thenApply(RepositoryLink::getKey);
  }
}
