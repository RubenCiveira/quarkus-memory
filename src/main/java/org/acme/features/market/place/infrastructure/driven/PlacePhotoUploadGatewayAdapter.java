package org.acme.features.market.place.infrastructure.driven;

import java.util.Optional;

import org.acme.common.store.BinaryContent;
import org.acme.common.store.FileStore;
import org.acme.common.store.RepositoryLink;
import org.acme.features.market.place.domain.gateway.PlacePhotoUploadGateway;
import org.acme.features.market.place.domain.model.Place;

import jakarta.enterprise.context.RequestScoped;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PlacePhotoUploadGatewayAdapter implements PlacePhotoUploadGateway {

  /**
   * @autogenerated StoreGatewayGenerator
   */
  private final FileStore store;

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   * @param orignal
   * @return
   */
  @Override
  public Optional<String> commitPhoto(final Place key, final Optional<Place> orignal) {
    String theNew = key.getPhotoValue().orElse(null);
    String theOld = orignal.flatMap(Place::getPhotoValue).orElse(null);
    boolean wasRemoved = theNew == null && theOld != null;
    boolean wasAppend = theNew != null && theOld == null;
    boolean wasModified = theOld != null && theNew != null && !theNew.equals(theOld);
    if (wasAppend) {
      return Optional.of(store.commitContent(theNew).getKey());
    } else if (wasModified) {
      store.deleteFile(theOld);
      return Optional.empty();
    } else if (wasRemoved) {
      return Optional
          .of(store.commitReplace(theNew, RepositoryLink.builder().key(theOld).build()).getKey());
    } else {
      return Optional.empty();
    }
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   */
  @Override
  public void deletePhoto(final Place key) {
    key.getPhotoValue().ifPresent(store::deleteFile);
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param entity
   * @return
   */
  @Override
  public Optional<BinaryContent> readPhoto(final Place entity) {
    return entity.getPhotoValue().map(store::retrieveFile).orElseThrow();
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param key
   * @return
   */
  @Override
  public Optional<BinaryContent> readTemporalPhoto(final String key) {
    return store.retrieveTemp(key);
  }

  /**
   * @autogenerated StoreGatewayGenerator
   * @param content
   * @return
   */
  @Override
  public String storeTemporalPhoto(final BinaryContent content) {
    return store.tempStore(content).getKey();
  }
}
