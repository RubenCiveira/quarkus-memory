package org.acme.features.market.place.application.usecase;

import java.util.Optional;
import java.util.concurrent.CompletionStage;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.store.BinaryContent;
import org.acme.features.market.place.application.allow.PlacePhotoTempUploadAllow;
import org.acme.features.market.place.application.interaction.command.PlacePhotoTemporalUploadCommand;
import org.acme.features.market.place.application.interaction.query.PlaceAllowQuery;
import org.acme.features.market.place.application.interaction.query.PlacePhotoTemporalUploadReadQuery;
import org.acme.features.market.place.application.interaction.result.PlacePhotoTemporalUploadReadResult;
import org.acme.features.market.place.application.interaction.result.PlacePhotoTemporalUploadResult;
import org.acme.features.market.place.domain.gateway.PlacePhotoUploadGateway;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PhotoTemporalUploadUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacePhotoUploadGateway store;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<PlacePhotoTempUploadAllow> temporalUploadAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public PlacePhotoTempUploadAllow allow(final PlaceAllowQuery query) {
    PlacePhotoTempUploadAllow base = PlacePhotoTempUploadAllow.build(true, "Allowed by default");
    temporalUploadAllow.fire(base);
    return base;
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public PlacePhotoTemporalUploadReadResult read(final PlacePhotoTemporalUploadReadQuery query) {
    CompletionStage<Optional<BinaryContent>> result =
        allow(query).getDetail().thenCompose(detail -> {
          if (!detail.isAllowed()) {
            throw new NotAllowedException(detail.getDescription());
          }
          return store.readTemporalPhoto(query.getKey());
        });
    return PlacePhotoTemporalUploadReadResult.builder().interaction(query).binary(result).build();
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public PlacePhotoTemporalUploadResult upload(final PlacePhotoTemporalUploadCommand command) {
    CompletionStage<String> result = allow(command).getDetail().thenCompose(detail -> {
      if (!detail.isAllowed()) {
        throw new NotAllowedException(detail.getDescription());
      }
      return store.storeTemporalPhoto(command.getBinary());
    });
    return PlacePhotoTemporalUploadResult.builder().interaction(command).key(result).build();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  private PlacePhotoTempUploadAllow allow(final Interaction query) {
    return allow(PlaceAllowQuery.builder().build(query));
  }
}
