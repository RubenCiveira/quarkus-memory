package org.acme.features.market.place.application.usecase.photoupload;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotAllowedException;
import org.acme.common.exception.NotFoundException;
import org.acme.common.security.Allow;
import org.acme.common.store.BinaryContent;
import org.acme.features.market.place.domain.gateway.PlacePhotoUploadGateway;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class PhotoTemporalUploadUsecase {

  /**
   * @autogenerated ListUsecaseGenerator
   */
  private final PlacePhotoUploadGateway store;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated ListUsecaseGenerator
   */
  private final Event<PlacePhotoTempUploadAllowProposal> tempUploadAllow;

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public Allow allow(final Interaction query) {
    PlacePhotoTempUploadAllowProposal base =
        PlacePhotoTempUploadAllowProposal.build(query, true, "Allowed by default");
    tempUploadAllow.fire(base);
    return base.getDetail();
  }

  /**
   * @autogenerated ListUsecaseGenerator
   * @param query
   * @return
   */
  public BinaryContent read(final PlacePhotoTemporalUploadReadQuery query) {
    Allow detail = allow(query);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    return store.readTemporalPhoto(query.getKey()).orElseThrow(() -> new NotFoundException(""));
  }

  /**
   * The slide with some values
   *
   * @autogenerated ListUsecaseGenerator
   * @param command a filter to retrieve only matching values
   * @return The slide with some values
   */
  public String upload(final PlacePhotoTemporalUploadCommand command) {
    Allow detail = allow(command);
    if (!detail.isAllowed()) {
      throw new NotAllowedException(detail.getDescription());
    }
    return store.storeTemporalPhoto(command.getBinary());
  }
}
