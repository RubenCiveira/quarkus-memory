package org.acme.features.market.place.domain.model;

import java.util.Optional;

import org.acme.features.market.place.domain.model.valueobject.PlaceNameVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceUidVO;
import org.acme.features.market.place.domain.model.valueobject.PlaceVersionVO;

import lombok.Builder;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NonNull;
import lombok.ToString;
import lombok.With;

@Getter
@ToString
@Builder(toBuilder = true)
@With
@EqualsAndHashCode(onlyExplicitlyIncluded = true)
public class Place implements PlaceRef {

  /**
   * @autogenerated EntityGenerator
   */
  public static class PlaceBuilder {

    /**
     * @autogenerated EntityGenerator
     * @param name
     * @return
     */
    public PlaceBuilder nameValue(final String name) {
      return name(PlaceNameVO.from(name));
    }

    /**
     * @autogenerated EntityGenerator
     * @param uid
     * @return
     */
    public PlaceBuilder uidValue(final String uid) {
      return uid(PlaceUidVO.from(uid));
    }

    /**
     * @autogenerated EntityGenerator
     * @param version
     * @return
     */
    public PlaceBuilder versionValue(final Integer version) {
      return version(PlaceVersionVO.from(version));
    }
  }

  /**
   * El name de place
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private PlaceNameVO name;

  /**
   * A number to identify the db record
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  private PlaceUidVO uid;

  /**
   * Campo con el n√∫mero de version de place para controlar bloqueos optimistas
   *
   * @autogenerated EntityGenerator
   */
  @NonNull
  @Builder.Default
  private PlaceVersionVO version = PlaceVersionVO.empty();

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getNameValue() {
    return getName().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public String getUidValue() {
    return getUid().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Optional<Integer> getVersionValue() {
    return getVersion().getValue();
  }

  /**
   * @autogenerated EntityGenerator
   * @return
   */
  public Place withEmptyVersion() {
    return withVersion(PlaceVersionVO.empty());
  }

  /**
   * @autogenerated EntityGenerator
   * @param name
   * @return
   */
  public Place withNameValue(final String name) {
    return withName(PlaceNameVO.from(name));
  }

  /**
   * @autogenerated EntityGenerator
   * @param uid
   * @return
   */
  public Place withUidValue(final String uid) {
    return withUid(PlaceUidVO.from(uid));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Place withVersionValue(final Integer version) {
    return withVersion(PlaceVersionVO.from(version));
  }

  /**
   * @autogenerated EntityGenerator
   * @param version
   * @return
   */
  public Place withVersionValue(final Optional<Integer> version) {
    return version.isPresent() ? withVersion(PlaceVersionVO.from(version.get()))
        : withEmptyVersion();
  }
}
