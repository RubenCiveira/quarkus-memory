package org.acme.features.market.verify.infrastructure.driver.rest;

import java.util.ArrayList;
import java.util.concurrent.CompletableFuture;

import org.acme.common.action.Interaction;
import org.acme.common.rest.CurrentRequest;
import org.acme.features.market.verify.application.service.VerifysVisibilityService;
import org.acme.features.market.verify.application.usecase.create.CreateVerifyUsecase;
import org.acme.features.market.verify.application.usecase.delete.DeleteVerifyUsecase;
import org.acme.features.market.verify.application.usecase.list.ListVerifyUsecase;
import org.acme.features.market.verify.application.usecase.retrieve.RetrieveVerifyUsecase;
import org.acme.features.market.verify.application.usecase.update.UpdateVerifyUsecase;
import org.acme.generated.openapi.api.VerifyAclApi;
import org.acme.generated.openapi.model.CommonAllow;
import org.acme.generated.openapi.model.VerifyAclFields;
import org.acme.generated.openapi.model.VerifyAclGenericAllows;
import org.acme.generated.openapi.model.VerifyAclSpecificAllows;
import org.acme.generated.openapi.model.VerifyGenericAcl;
import org.acme.generated.openapi.model.VerifySpecificAcl;

import jakarta.enterprise.context.RequestScoped;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class VerifyAclController implements VerifyAclApi {

  /**
   * @autogenerated AclControllerGenerator
   */
  private final CreateVerifyUsecase create;

  /**
   * Verify
   *
   * @autogenerated AclControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final DeleteVerifyUsecase delete;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final ListVerifyUsecase list;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final RetrieveVerifyUsecase retrieve;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final UpdateVerifyUsecase update;

  /**
   * @autogenerated AclControllerGenerator
   */
  private final VerifysVisibilityService visibility;

  /**
   * @autogenerated AclControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response verifyApiContextualAcl(final String uid) {
    return currentRequest.resolve(interaction -> {
      VerifySpecificAcl response = new VerifySpecificAcl();
      response.setAllows(new VerifyAclSpecificAllows());
      response.setFields(new VerifyAclFields());
      return CompletableFuture
          .allOf(fixedFields(response.getFields(), interaction),
              hiddenFields(response.getFields(), interaction), updateAllows(response, interaction),
              deleteAllows(response, interaction), retrieveAllows(response, interaction))
          .thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @return
   */
  @Override
  public Response verifyApiGenericAcl() {
    return currentRequest.resolve(interaction -> {
      VerifyGenericAcl response = new VerifyGenericAcl();
      response.setAllows(new VerifyAclGenericAllows());
      response.setFields(new VerifyAclFields());
      return CompletableFuture
          .allOf(fixedFields(response.getFields(), interaction),
              hiddenFields(response.getFields(), interaction), listAllows(response, interaction),
              createAllows(response, interaction), updateAllows(response, interaction),
              deleteAllows(response, interaction), retrieveAllows(response, interaction))
          .thenApply(noop -> response);
    });
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> createAllows(final VerifyGenericAcl response,
      final Interaction query) {
    return create.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setCreate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final VerifyGenericAcl response,
      final Interaction query) {
    return delete.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> deleteAllows(final VerifySpecificAcl response,
      final Interaction query) {
    return delete.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setDelete(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> fixedFields(final VerifyAclFields response,
      final Interaction query) {
    return visibility.fieldsToFix(query).getFixed()
        .thenAccept(fields -> response.setNoEditables(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> hiddenFields(final VerifyAclFields response,
      final Interaction query) {
    return visibility.fieldsToHide(query).getHidden()
        .thenAccept(fields -> response.setNoVisibles(new ArrayList<>(fields)))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> listAllows(final VerifyGenericAcl response,
      final Interaction query) {
    return list.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows()
            .setList(new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final VerifyGenericAcl response,
      final Interaction query) {
    return retrieve.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> retrieveAllows(final VerifySpecificAcl response,
      final Interaction query) {
    return retrieve.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setRetrieve(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final VerifyGenericAcl response,
      final Interaction query) {
    return update.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }

  /**
   * @autogenerated AclControllerGenerator
   * @param response
   * @param query
   * @return
   */
  private CompletableFuture<Void> updateAllows(final VerifySpecificAcl response,
      final Interaction query) {
    return update.allow(query).getDetail()
        .thenAccept(detail -> response.getAllows().setUpdate(
            new CommonAllow().allowed(detail.isAllowed()).reason(detail.getDescription())))
        .toCompletableFuture();
  }
}
