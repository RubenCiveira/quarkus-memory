package org.acme.features.market.verify.application.service;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.acme.common.action.Interaction;
import org.acme.common.exception.NotFoundException;
import org.acme.features.market.medal.application.service.MedalsVisibilityService;
import org.acme.features.market.verify.application.VerifyDto;
import org.acme.features.market.verify.application.service.proposal.VerifyFixedFieldsProposal;
import org.acme.features.market.verify.application.service.proposal.VerifyHiddenFieldsProposal;
import org.acme.features.market.verify.application.service.proposal.VerifyVisibilityQueryProposal;
import org.acme.features.market.verify.application.service.proposal.VerifyVisibleContentProposal;
import org.acme.features.market.verify.domain.Verifys;
import org.acme.features.market.verify.domain.gateway.VerifyCacheGateway;
import org.acme.features.market.verify.domain.gateway.VerifyCached;
import org.acme.features.market.verify.domain.gateway.VerifyCursor;
import org.acme.features.market.verify.domain.gateway.VerifyFilter;
import org.acme.features.market.verify.domain.gateway.VerifyReadRepositoryGateway;
import org.acme.features.market.verify.domain.model.Verify;
import org.acme.features.market.verify.domain.model.VerifyRef;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.event.Event;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class VerifysVisibilityService {

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final Verifys aggregate;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final VerifyCacheGateway cache;

  /**
   * Event source for maniputale the fix over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<VerifyFixedFieldsProposal> fireFix;

  /**
   * Event source for maniputale the hide over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<VerifyHiddenFieldsProposal> fireHide;

  /**
   * Event source for maniputale the visibility filter over the entity fields
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<VerifyVisibilityQueryProposal> fireVisibleFilter;

  /**
   * Event source for maniputale the visible list
   *
   * @autogenerated VisibilityServiceGenerator
   */
  private final Event<VerifyVisibleContentProposal> fireVisibleList;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final VerifysCalculatorService formula;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final MedalsVisibilityService medalsVisibilityService;

  /**
   * @autogenerated VisibilityServiceGenerator
   */
  private final VerifyReadRepositoryGateway verifyReadRepositoryGateway;

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, String uid) {
    return retrieveVisible(prev, uid).isPresent();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uids
   * @return The input entity with the copy values without hidden
   */
  public boolean checkVisibility(Interaction prev, List<String> uids) {
    return listVisibles(prev, VerifyFilter.builder().uids(uids).build(),
        VerifyCursor.builder().build()).isEmpty();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @param original The source interaction
   * @return The input entity with the copy values without hidden
   */
  public VerifyDto copyWithFixed(Interaction prev, VerifyDto source, Verify original) {
    VerifyDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev, original).forEach(field -> withReferences.fixField(field, original));
    return formula.copyWithFormulas(prev, withReferences, original);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  public VerifyDto copyWithFixed(Interaction prev, VerifyDto source) {
    VerifyDto withReferences = visiblesReferences(prev, source);
    fieldsToFix(prev).forEach(field -> withReferences.fixField(field));
    return formula.copyWithFormulas(prev, withReferences);
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param verify
   * @return The input dto with hidden values
   */
  public VerifyDto copyWithHidden(Interaction prev, Verify verify) {
    VerifyDto target = VerifyDto.from(verify);
    fieldsToHide(prev, verify).forEach(target::hideField);
    return target;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public long countVisibles(Interaction prev, VerifyFilter filter) {
    return verifyReadRepositoryGateway.count(applyPreVisibilityFilter(prev, filter));
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev));
    fields.addAll(aggregate.calcultadFields());
    VerifyFixedFieldsProposal value =
        VerifyFixedFieldsProposal.builder().fields(fields).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsFixFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param verify
   * @return initialsFixFields
   */
  public Set<String> fieldsToFix(Interaction prev, VerifyRef verify) {
    Set<String> fields = new HashSet<>(fieldsToHide(prev, verify));
    fields.addAll(aggregate.calcultadFields());
    VerifyFixedFieldsProposal value =
        VerifyFixedFieldsProposal.builder().fields(fields).verify(verify).query(prev).build();
    fireFix.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev) {
    Set<String> fields = new HashSet<>();
    VerifyHiddenFieldsProposal value =
        VerifyHiddenFieldsProposal.builder().fields(fields).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * initialsHideFields
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param verify
   * @return initialsHideFields
   */
  public Set<String> fieldsToHide(Interaction prev, VerifyRef verify) {
    Set<String> fields = new HashSet<>();
    VerifyHiddenFieldsProposal value =
        VerifyHiddenFieldsProposal.builder().fields(fields).verify(verify).query(prev).build();
    fireHide.fire(value);
    return value.getFields();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public VerifyCached listCachedVisibles(Interaction prev, VerifyFilter filter,
      VerifyCursor cursor) {
    VerifyFilter visibleFilter = applyPreVisibilityFilter(prev, filter);
    return cache.retrieve(visibleFilter, cursor)
        .orElseGet(() -> cache.store(visibleFilter, cursor, listVisibles(prev, filter, cursor)));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  public List<Verify> listVisibles(Interaction prev, VerifyFilter filter, VerifyCursor cursor) {
    return queryItems(prev, applyPreVisibilityFilter(prev, filter), cursor);
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public VerifyCached retrieveCachedVisible(Interaction prev, String uid) {
    VerifyCursor cursor = VerifyCursor.builder().limit(1).build();
    VerifyFilter visibleFilter =
        applyPreVisibilityFilter(prev, VerifyFilter.builder().uid(uid).build());
    return cache.retrieve(visibleFilter, cursor).orElseGet(() -> {
      List<Verify> list =
          retrieveVisible(prev, uid).<List<Verify>>map(List::of).orElseGet(List::of);
      return cache.store(visibleFilter, cursor, list);
    });
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @return The input entity with the copy values without hidden
   */
  public Optional<Verify> retrieveVisible(Interaction prev, String uid) {
    VerifyFilter filter = applyPreVisibilityFilter(prev, VerifyFilter.builder().uid(uid).build());
    return queryItem(prev, uid, filter);
  }

  /**
   * The self filter modified with the prepared values.
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @return The self filter modified with the prepared values.
   */
  private VerifyFilter applyPreVisibilityFilter(Interaction prev, VerifyFilter filter) {
    VerifyVisibilityQueryProposal visible =
        VerifyVisibilityQueryProposal.builder().filter(filter).interaction(prev).build();
    fireVisibleFilter.fire(visible);
    return visible.getFilter();
  }

  /**
   * The input dto with hidden values
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param verifyRef The source interaction
   * @return The input dto with hidden values
   */
  private boolean evaluatePostVisibility(Interaction prev, Verify verifyRef) {
    VerifyVisibleContentProposal accesible = VerifyVisibleContentProposal.builder().visible(true)
        .entity(verifyRef).interaction(prev).build();
    fireVisibleList.fire(accesible);
    return accesible.getVisible();
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param uid
   * @param filter The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private Optional<Verify> queryItem(Interaction prev, String uid, VerifyFilter filter) {
    return verifyReadRepositoryGateway.retrieve(uid, Optional.of(filter))
        .filter(values -> evaluatePostVisibility(prev, values));
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param filter The filter to retrieve values
   * @param cursor The filter to retrieve values
   * @return The input entity with the copy values without hidden
   */
  private List<Verify> queryItems(Interaction prev, VerifyFilter filter, VerifyCursor cursor) {
    List<Verify> list = new ArrayList<>();
    Iterator<Verify> slide = verifyReadRepositoryGateway.list(filter, cursor)
        .slide(values -> evaluatePostVisibility(prev, values));
    while (slide.hasNext()) {
      list.add(slide.next());
    }
    return list;
  }

  /**
   * The input entity with the copy values without hidden
   *
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return The input entity with the copy values without hidden
   */
  private VerifyDto visiblesReferences(Interaction prev, VerifyDto source) {
    source = visiblesReferencesFromMedals(prev, source);
    return source;
  }

  /**
   * @autogenerated VisibilityServiceGenerator
   * @param prev The source interaction
   * @param source The source interaction
   * @return
   */
  private VerifyDto visiblesReferencesFromMedals(Interaction prev, VerifyDto source) {
    if (null != source.getMedals()) {
      List<String> collectMedal = new ArrayList<>();
      source.getMedals().getValue().forEach(item -> {
        if (null != item.getMedal()) {
          String idMedal = item.getMedalReferenceValue();
          if (!collectMedal.contains(idMedal)) {
            collectMedal.add(idMedal);
          }
        }
      });
      if (!collectMedal.isEmpty()) {
        boolean visible = medalsVisibilityService.checkVisibility(prev, collectMedal);
        if (!visible) {
          throw new NotFoundException("No all medal exists: " + collectMedal);
        }
      }
    }
    return source;
  }
}
