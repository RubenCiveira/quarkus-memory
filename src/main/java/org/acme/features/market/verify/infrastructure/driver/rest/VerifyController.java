package org.acme.features.market.verify.infrastructure.driver.rest;

import java.time.format.DateTimeFormatter;
import java.util.List;
import java.util.Optional;

import org.acme.common.rest.CurrentRequest;
import org.acme.features.market.verify.application.VerifyDto;
import org.acme.features.market.verify.application.usecase.create.CreateVerifyUsecase;
import org.acme.features.market.verify.application.usecase.create.VerifyCreateCommand;
import org.acme.features.market.verify.application.usecase.delete.DeleteVerifyUsecase;
import org.acme.features.market.verify.application.usecase.delete.VerifyDeleteCommand;
import org.acme.features.market.verify.application.usecase.list.ListVerifyUsecase;
import org.acme.features.market.verify.application.usecase.list.VerifyListQuery;
import org.acme.features.market.verify.application.usecase.retrieve.RetrieveVerifyUsecase;
import org.acme.features.market.verify.application.usecase.retrieve.VerifyRetrieveQuery;
import org.acme.features.market.verify.application.usecase.update.UpdateVerifyUsecase;
import org.acme.features.market.verify.application.usecase.update.VerifyUpdateCommand;
import org.acme.features.market.verify.domain.gateway.VerifyCursor;
import org.acme.features.market.verify.domain.gateway.VerifyFilter;
import org.acme.features.market.verify.domain.model.VerifyReference;
import org.acme.features.market.verify.domain.model.valueobject.VerifyNameVO;
import org.acme.features.market.verify.domain.model.valueobject.VerifyUidVO;
import org.acme.features.market.verify.domain.model.valueobject.VerifyVersionVO;
import org.acme.generated.openapi.api.VerifyApi;
import org.acme.generated.openapi.model.Verify;
import org.acme.generated.openapi.model.VerifyList;
import org.acme.generated.openapi.model.VerifyListNextOffset;

import jakarta.enterprise.context.RequestScoped;
import jakarta.transaction.Transactional;
import jakarta.ws.rs.core.Response;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class VerifyController implements VerifyApi {

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final CreateVerifyUsecase create;

  /**
   * Verify
   *
   * @autogenerated ApiControllerGenerator
   */
  private final CurrentRequest currentRequest;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final DeleteVerifyUsecase delete;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final ListVerifyUsecase list;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final RetrieveVerifyUsecase retrieve;

  /**
   * @autogenerated ApiControllerGenerator
   */
  private final UpdateVerifyUsecase update;

  /**
   * @autogenerated ApiControllerGenerator
   * @param verify
   * @return
   */
  @Override
  @Transactional
  public Response verifyApiCreate(Verify verify) {
    return currentRequest.resolve(interaction -> create
        .create(VerifyCreateCommand.builder().dto(toDomainModel(verify)).build(interaction))
        .thenApply(res -> res.getVerify().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  @Transactional
  public Response verifyApiDelete(final String uid) {
    return currentRequest.resolve(interaction -> delete
        .delete(VerifyDeleteCommand.builder().reference(VerifyReference.of(uid)).build(interaction))
        .thenApply(res -> res.getVerify().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param uids
   * @param search
   * @param limit
   * @param sinceUid
   * @return
   */
  @Override
  public Response verifyApiList(final String uid, final List<String> uids, final String search,
      final Integer limit, final String sinceUid) {
    return currentRequest.resolve(interaction -> {
      VerifyFilter.VerifyFilterBuilder filter = VerifyFilter.builder();
      VerifyCursor.VerifyCursorBuilder cursor = VerifyCursor.builder();
      cursor = cursor.limit(limit);
      cursor = cursor.sinceUid(sinceUid);
      filter = filter.uid(uid);
      filter = filter.uids(uids);
      filter = filter.search(search);
      return list.list(VerifyListQuery.builder().filter(filter.build()).cursor(cursor.build())
          .build(interaction));
    }, value -> Response
        .ok(new VerifyList().content(toApiModel(value.getVerifys())).next(next(value.getVerifys())))
        .header("Last-Modified", value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME))
        .build());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @return
   */
  @Override
  public Response verifyApiRetrieve(final String uid) {
    return currentRequest.resolve(
        interaction -> retrieve.retrieve(
            VerifyRetrieveQuery.builder().reference(VerifyReference.of(uid)).build(interaction)),
        value -> value.getVerify()
            .map(verify -> Response.ok(toApiModel(verify)).header("Last-Modified",
                value.getSince().format(DateTimeFormatter.RFC_1123_DATE_TIME)))
            .orElseGet(() -> Response.status(404)).build());
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param uid
   * @param verify
   * @return
   */
  @Override
  @Transactional
  public Response verifyApiUpdate(final String uid, final Verify verify) {
    return currentRequest.resolve(interaction -> update
        .update(VerifyUpdateCommand.builder().dto(toDomainModel(verify))
            .reference(VerifyReference.of(uid)).build(interaction))
        .thenApply(res -> res.getVerify().map(this::toApiModel)));
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param list
   * @return
   */
  private VerifyListNextOffset next(List<VerifyDto> list) {
    if (list.isEmpty()) {
      return null;
    } else {
      VerifyListNextOffset next = new VerifyListNextOffset();
      VerifyDto last = list.get(list.size() - 1);
      next.setSinceUid(last.getUid().getValue());
      return next;
    }
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param verifys
   * @return
   */
  private List<Verify> toApiModel(List<VerifyDto> verifys) {
    return verifys.stream().map(this::toApiModel).toList();
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param dto
   * @return
   */
  private Verify toApiModel(VerifyDto dto) {
    Verify verify = new Verify();
    verify.setUid(Optional.ofNullable(dto.getUid()).map(VerifyUidVO::getValue).orElse(null));
    verify.setName(Optional.ofNullable(dto.getName()).map(VerifyNameVO::getValue).orElse(null));
    verify.setVersion(
        Optional.ofNullable(dto.getVersion()).flatMap(VerifyVersionVO::getValue).orElse(null));
    return verify;
  }

  /**
   * @autogenerated ApiControllerGenerator
   * @param verify
   * @return
   */
  private VerifyDto toDomainModel(Verify verify) {
    VerifyDto.VerifyDtoBuilder builder = VerifyDto.builder();
    if (null != verify.getUid()) {
      builder = builder.uid(VerifyUidVO.from(verify.getUid()));
    }
    if (null != verify.getName()) {
      builder = builder.name(VerifyNameVO.from(verify.getName()));
    }
    if (null != verify.getVersion()) {
      builder = builder.version(VerifyVersionVO.from(verify.getVersion()));
    } ;
    return builder.build();
  }
}
