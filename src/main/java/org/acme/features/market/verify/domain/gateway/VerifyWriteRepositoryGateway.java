package org.acme.features.market.verify.domain.gateway;

import java.util.Optional;
import java.util.concurrent.CompletionStage;
import java.util.function.Function;

import org.acme.common.action.Slide;
import org.acme.features.market.verify.domain.model.Verify;
import org.acme.features.market.verify.domain.model.VerifyRef;

public interface VerifyWriteRepositoryGateway {

  /**
   * Retrieve one single value
   *
   * @autogenerated CreateTraitGenerator
   * @param entity a filter to retrieve only matching values
   * @param verifier a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  CompletionStage<Optional<Verify>> create(Verify entity,
      Function<Verify, CompletionStage<Boolean>> verifier);

  /**
   * Retrieve one single value
   *
   * @autogenerated CreateTraitGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  CompletionStage<Optional<Verify>> create(Verify entity);

  /**
   * Retrieve one single value
   *
   * @autogenerated DeleteTraitGenerator
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  CompletionStage<Verify> delete(Verify entity);

  /**
   * Retrieve one single value
   *
   * @autogenerated RetrieveTraitGenerator
   * @param reference a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  CompletionStage<Verify> enrich(VerifyRef reference);

  /**
   * Retrieve one single value
   *
   * @autogenerated RetrieveTraitGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  CompletionStage<Boolean> exists(String uid, Optional<VerifyFilter> filter);

  /**
   * The slide with some values
   *
   * @autogenerated ListTraitGenerator
   * @param filter a filter to retrieve only matching values
   * @param cursor a cursor to order and skip
   * @return The slide with some values
   */
  Slide<Verify> list(VerifyFilter filter, VerifyCursor cursor);

  /**
   * Retrieve one single value
   *
   * @autogenerated RetrieveTraitGenerator
   * @param uid
   * @param filter a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  CompletionStage<Optional<Verify>> retrieve(String uid, Optional<VerifyFilter> filter);

  /**
   * Retrieve one single value
   *
   * @autogenerated UpdateTraitGenerator
   * @param reference a filter to retrieve only matching values
   * @param entity a filter to retrieve only matching values
   * @return Retrieve one single value
   */
  CompletionStage<Verify> update(VerifyRef reference, Verify entity);
}
