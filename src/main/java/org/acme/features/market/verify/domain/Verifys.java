package org.acme.features.market.verify.domain;

import java.util.Map;
import java.util.Map.Entry;
import java.util.Optional;
import java.util.Set;
import java.util.concurrent.CompletionStage;
import java.util.function.BiFunction;

import org.acme.common.action.ParametrizedFuturePipe;
import org.acme.common.action.PriorityComparator;
import org.acme.features.market.verify.domain.model.Verify;
import org.acme.features.market.verify.domain.model.Verify.VerifyBuilder;
import org.acme.features.market.verify.domain.rule.VerifyActionType;
import org.acme.features.market.verify.domain.rule.VerifyBuilderRule;
import org.acme.features.market.verify.domain.rule.VerifyRule;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;

@RequestScoped
public class Verifys {

  /**
   * @autogenerated AggregateGenerator
   */
  private final ParametrizedFuturePipe<VerifyBuilder, VerifyActionType, Optional<Verify>> builderRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final ParametrizedFuturePipe<Verify, VerifyActionType, Optional<Verify>> rules;

  /**
   * @autogenerated AggregateGenerator
   */
  private Map<String, BiFunction<CompletionStage<VerifyBuilder>, Optional<Verify>, CompletionStage<VerifyBuilder>>> calculatedFields =
      Map.of();

  /**
   * @autogenerated AggregateGenerator
   * @param rules
   * @param builderRules
   */
  public Verifys(final Instance<VerifyRule> rules, final Instance<VerifyBuilderRule> builderRules) {
    this.rules = new ParametrizedFuturePipe<>(VerifyActionType.values(), rules.stream().toList(),
        new PriorityComparator<>());
    this.builderRules = new ParametrizedFuturePipe<>(VerifyActionType.values(),
        builderRules.stream().toList(), new PriorityComparator<>());
  }

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    return calculatedFields.keySet();
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public CompletionStage<Verify> clean(final Verify entity) {
    return rules.applyCurrent(VerifyActionType.DELETE, entity, Optional.of(entity));
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public CompletionStage<Verify> initialize(final VerifyBuilder builder) {
    return applyModify(VerifyActionType.CREATE, Optional.empty(), builder, null);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public CompletionStage<Verify> modify(final Verify base, final VerifyBuilder builder) {
    return applyModify(VerifyActionType.UPDATE, Optional.of(base), builder, null);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param type
   * @param original a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private CompletionStage<Verify> applyModify(final VerifyActionType type,
      final Optional<Verify> original, final VerifyBuilder builder, final String ignore) {
    CompletionStage<VerifyBuilder> ruledBuilder =
        this.builderRules.applyCurrent(type, builder, original);
    for (Entry<String, BiFunction<CompletionStage<VerifyBuilder>, Optional<Verify>, CompletionStage<VerifyBuilder>>> entry : calculatedFields
        .entrySet()) {
      if (!entry.getKey().equals(ignore)) {
        ruledBuilder = entry.getValue().apply(ruledBuilder, original);
      }
    }
    return ruledBuilder.thenCompose(
        resultBuilder -> rules.applyCurrent(type, resultBuilder.buildValid(), original));
  }
}
