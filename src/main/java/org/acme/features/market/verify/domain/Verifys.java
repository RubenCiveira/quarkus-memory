package org.acme.features.market.verify.domain;

import java.util.HashSet;
import java.util.Optional;
import java.util.Set;

import org.acme.features.market.verify.domain.model.Verify;
import org.acme.features.market.verify.domain.model.Verify.VerifyBuilder;
import org.acme.features.market.verify.domain.model.rule.VerifyBuildFormulaPipeline;
import org.acme.features.market.verify.domain.model.rule.VerifyCreateRulePipeline;
import org.acme.features.market.verify.domain.model.rule.VerifyDeleteRulePipeline;
import org.acme.features.market.verify.domain.model.rule.VerifyUpdateRulePipeline;

import jakarta.enterprise.context.RequestScoped;
import jakarta.enterprise.inject.Instance;
import lombok.RequiredArgsConstructor;

@RequestScoped
@RequiredArgsConstructor
public class Verifys {

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<VerifyBuildFormulaPipeline> buildingFormulas;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<VerifyCreateRulePipeline> creatingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<VerifyDeleteRulePipeline> deletingRules;

  /**
   * @autogenerated AggregateGenerator
   */
  private final Instance<VerifyUpdateRulePipeline> updatingRules;

  /**
   * @autogenerated AggregateGenerator
   * @return
   */
  public Set<String> calcultadFields() {
    Set<String> fields = new HashSet<>();
    buildingFormulas.forEach(formula -> fields.addAll(formula.fields()));
    return fields;
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param entity a filter to retrieve only matching values
   * @return The entity
   */
  public Verify clean(final Verify entity) {
    return VerifyDeleteRulePipeline.fire(deletingRules.iterator(), entity);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Verify initialize(final VerifyBuilder builder) {
    return VerifyCreateRulePipeline.fire(creatingRules.iterator(),
        build(builder, Optional.empty(), null).build());
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param base a filter to retrieve only matching values
   * @param builder a filter to retrieve only matching values
   * @return The entity
   */
  public Verify modify(final Verify base, final VerifyBuilder builder) {
    return VerifyUpdateRulePipeline.fire(updatingRules.iterator(),
        build(builder, Optional.of(base), null).build(), base);
  }

  /**
   * The entity
   *
   * @autogenerated AggregateGenerator
   * @param builder a filter to retrieve only matching values
   * @param original a filter to retrieve only matching values
   * @param ignore
   * @return The entity
   */
  private VerifyBuilder build(final VerifyBuilder builder, final Optional<Verify> original,
      final String ignore) {
    return VerifyBuildFormulaPipeline.fire(buildingFormulas.iterator(), builder, original);
  }
}
