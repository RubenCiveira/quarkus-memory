/* @autogenerated */
async function encrypt(value, password) {
    const te = new TextEncoder();
    const pText = te.encode(value);

    // Generate random salt and IV
    const salt = crypto.getRandomValues(new Uint8Array(16)); // 16 bytes salt
    const iv = crypto.getRandomValues(new Uint8Array(12)); // 12 bytes IV for AES-GCM

    // Derive a key from the password using PBKDF2
    const keyMaterial = await window.crypto.subtle.importKey(
        "raw",
        te.encode(password), {
            name: "PBKDF2"
        },
        false,
        ["deriveKey"]
    );

    const key = await window.crypto.subtle.deriveKey({
            name: "PBKDF2",
            salt: salt,
            iterations: 100000,
            hash: "SHA-256"
        },
        keyMaterial, {
            name: "AES-GCM",
            length: 256
        },
        false,
        ["encrypt", "decrypt"]
    );

    // Encrypt the plaintext
    const cipherText = await window.crypto.subtle.encrypt({
            name: "AES-GCM",
            iv: iv,
            tagLength: 128
        },
        key,
        pText
    );

    // Combine IV, salt, and ciphertext
    const cipherTextWithIvSalt = new Uint8Array(iv.length + salt.length + cipherText.byteLength);
    cipherTextWithIvSalt.set(iv);
    cipherTextWithIvSalt.set(salt, iv.length);
    cipherTextWithIvSalt.set(new Uint8Array(cipherText), iv.length + salt.length);

    // Convert to Base64
    return btoa(String.fromCharCode(...cipherTextWithIvSalt));
}

function getCanvasPrint() {
    // create a canvas element
    var canvas = document.createElement('canvas');
    // define a context var that will be used for browsers with canvas support
    var ctx;
    // try/catch for older browsers that don't support the canvas element
    try {
        // attempt to give ctx a 2d canvas context value
        ctx = canvas.getContext('2d');
    } catch (e) {
        // return empty string if canvas element not supported
        return "";
    }
    // https://www.browserleaks.com/canvas#how-does-it-work
    // Text with lowercase/uppercase/punctuation symbols
    var txt = 'ClientJS,org <canvas> 1.0';
    ctx.textBaseline = "top";
    // The most common type
    ctx.font = "14px 'Arial'";
    ctx.textBaseline = "alphabetic";
    ctx.fillStyle = "#f60";
    ctx.fillRect(125, 1, 62, 20);
    // Some tricks for color mixing to increase the difference in rendering
    ctx.fillStyle = "#069";
    ctx.fillText(txt, 2, 15);
    ctx.fillStyle = "rgba(102, 204, 0, 0.7)";
    ctx.fillText(txt, 4, 17);
    return canvas.toDataURL();
}

async function signToken(secret) {
    const visitorId = getCanvasPrint();
    const header = {
        alg: 'HS256',
        typ: 'JWT'
    };
    const payload = {
        identity: visitorId,
        exp: Math.floor(Date.now() / 1000) + (60 * 60)
    };
    const sHeader = JSON.stringify(header);
    const sPayload = JSON.stringify(payload);
    return KJUR.jws.JWS.sign('HS256', sHeader, sPayload, {
        utf8: secret
    });
}