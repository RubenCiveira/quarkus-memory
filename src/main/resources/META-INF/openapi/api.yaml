# @autogenerated
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: 1.0.0-SNAPSHOT
  contact:
    name: Ruben
  license:
    name: apache
servers:
- url: https://{host}:{port}/{basePath}
  description: The production API server
  variables:
    host:
      default: localhost
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - '8090'
      default: '8090'
    basePath:
      default: ''
security:
  - BearerAuth: [] # Aplica el esquema de seguridad por defecto a toda la API
tags:
  - name: area
    description: area
  - name: area-acl
    description: Access control for area
  - name: color
    description: color
  - name: color-acl
    description: Access control for color
  - name: fruit
    description: fruit
  - name: fruit-acl
    description: Access control for fruit
  - name: medal
    description: medal
  - name: medal-acl
    description: Access control for medal
  - name: merchant
    description: merchant
  - name: merchant-acl
    description: Access control for merchant
  - name: verify
    description: verify
  - name: verify-acl
    description: Access control for verify
  - name: place
    description: place
  - name: place-acl
    description: Access control for place

paths:
  /api/market/areas:
    get:
      tags:
        - area
      summary: List of area
      operationId: area-api-list
      parameters:
        - name: uid
          in: query
          description: Filter by one existent id
          required: false
          schema:
            type: string
        - name: uids
          in: query
          description: Filter by a list of ids
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          description: Textual search
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: name
          required: false
          schema:
            type: string
        - name: place
          in: query
          description: place
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
        - name: since-uid
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: string
        - name: since-name
          in: query
          description: Order by name asc
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: The result order information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaList'
    post:
      tags:
        - area
      summary: Create a new area
      operationId: area-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
  /api/market/areas/{uid}:
    get:
      tags:
        - area
      summary: Retrive on  area by their uid
      operationId: area-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        '404':
          description: The item dont exists
    put:
      tags:
        - area
      summary: Update a area by their uid
      operationId: area-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Area'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        '404':
          description: The item dont exists
    delete:
      tags:
        - area
      summary: Delete a  area by their uid
      operationId: area-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Area'
        '404':
          description: The item dont exists
  /api/me/acl/market/areas:
    get:
      tags:
        - area-acl
      summary: Check for allow permissions for the current user on area
      operationId: area-api-generic-acl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaGenericAcl'
  /api/me/acl/market/areas/{uid}:
    get:
      tags:
        - area-acl
      summary: Check for allow permissions for the current user on area by their uid
      operationId: area-api-contextual-acl
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AreaSpecificAcl'
        '404':
          description: The item dont exists
  /api/market/colors:
    get:
      tags:
        - color
      summary: List of color
      operationId: color-api-list
      parameters:
        - name: uid
          in: query
          description: Filter by one existent id
          required: false
          schema:
            type: string
        - name: uids
          in: query
          description: Filter by a list of ids
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          description: Textual search
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: name
          required: false
          schema:
            type: string
        - name: merchant
          in: query
          description: merchant
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
        - name: since-uid
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: string
        - name: since-name
          in: query
          description: Order by name asc
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: The result order information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorList'
    post:
      tags:
        - color
      summary: Create a new color
      operationId: color-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Color'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
  /api/market/colors/{uid}:
    get:
      tags:
        - color
      summary: Retrive on  color by their uid
      operationId: color-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
        '404':
          description: The item dont exists
    put:
      tags:
        - color
      summary: Update a color by their uid
      operationId: color-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Color'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
        '404':
          description: The item dont exists
    delete:
      tags:
        - color
      summary: Delete a  color by their uid
      operationId: color-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Color'
        '404':
          description: The item dont exists
  /api/me/acl/market/colors:
    get:
      tags:
        - color-acl
      summary: Check for allow permissions for the current user on color
      operationId: color-api-generic-acl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorGenericAcl'
  /api/me/acl/market/colors/{uid}:
    get:
      tags:
        - color-acl
      summary: Check for allow permissions for the current user on color by their uid
      operationId: color-api-contextual-acl
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ColorSpecificAcl'
        '404':
          description: The item dont exists
  /api/market/fruits:
    get:
      tags:
        - fruit
      summary: List of fruit
      operationId: fruit-api-list
      parameters:
        - name: uid
          in: query
          description: Filter by one existent id
          required: false
          schema:
            type: string
        - name: uids
          in: query
          description: Filter by a list of ids
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          description: Textual search
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: name
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
        - name: since-uid
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: string
        - name: since-name
          in: query
          description: Order by name asc
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: The result order information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FruitList'
    post:
      tags:
        - fruit
      summary: Create a new fruit
      operationId: fruit-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
  /api/market/fruits/{uid}:
    get:
      tags:
        - fruit
      summary: Retrive on  fruit by their uid
      operationId: fruit-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '404':
          description: The item dont exists
    put:
      tags:
        - fruit
      summary: Update a fruit by their uid
      operationId: fruit-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '404':
          description: The item dont exists
    delete:
      tags:
        - fruit
      summary: Delete a  fruit by their uid
      operationId: fruit-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '404':
          description: The item dont exists
  /api/me/acl/market/fruits:
    get:
      tags:
        - fruit-acl
      summary: Check for allow permissions for the current user on fruit
      operationId: fruit-api-generic-acl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FruitGenericAcl'
  /api/me/acl/market/fruits/{uid}:
    get:
      tags:
        - fruit-acl
      summary: Check for allow permissions for the current user on fruit by their uid
      operationId: fruit-api-contextual-acl
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FruitSpecificAcl'
        '404':
          description: The item dont exists
  /api/market/medals:
    get:
      tags:
        - medal
      summary: List of medal
      operationId: medal-api-list
      parameters:
        - name: uid
          in: query
          description: Filter by one existent id
          required: false
          schema:
            type: string
        - name: uids
          in: query
          description: Filter by a list of ids
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          description: Textual search
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: name
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
        - name: since-uid
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: string
        - name: since-name
          in: query
          description: Order by name asc
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: The result order information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedalList'
    post:
      tags:
        - medal
      summary: Create a new medal
      operationId: medal-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medal'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medal'
  /api/market/medals/{uid}:
    get:
      tags:
        - medal
      summary: Retrive on  medal by their uid
      operationId: medal-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medal'
        '404':
          description: The item dont exists
    put:
      tags:
        - medal
      summary: Update a medal by their uid
      operationId: medal-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Medal'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medal'
        '404':
          description: The item dont exists
    delete:
      tags:
        - medal
      summary: Delete a  medal by their uid
      operationId: medal-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Medal'
        '404':
          description: The item dont exists
  /api/me/acl/market/medals:
    get:
      tags:
        - medal-acl
      summary: Check for allow permissions for the current user on medal
      operationId: medal-api-generic-acl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedalGenericAcl'
  /api/me/acl/market/medals/{uid}:
    get:
      tags:
        - medal-acl
      summary: Check for allow permissions for the current user on medal by their uid
      operationId: medal-api-contextual-acl
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedalSpecificAcl'
        '404':
          description: The item dont exists
  /api/market/merchants:
    get:
      tags:
        - merchant
      summary: List of merchant
      operationId: merchant-api-list
      parameters:
        - name: uid
          in: query
          description: Filter by one existent id
          required: false
          schema:
            type: string
        - name: uids
          in: query
          description: Filter by a list of ids
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          description: Textual search
          required: false
          schema:
            type: string
        - name: enabled
          in: query
          description: enabled
          required: false
          schema:
            type: boolean
        - name: name
          in: query
          description: name
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
        - name: since-uid
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: string
        - name: since-name
          in: query
          description: Order by name asc
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: The result order information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantList'
    post:
      tags:
        - merchant
      summary: Create a new merchant
      operationId: merchant-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
  /api/market/merchants/{uid}:
    get:
      tags:
        - merchant
      summary: Retrive on  merchant by their uid
      operationId: merchant-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '404':
          description: The item dont exists
    put:
      tags:
        - merchant
      summary: Update a merchant by their uid
      operationId: merchant-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Merchant'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '404':
          description: The item dont exists
    delete:
      tags:
        - merchant
      summary: Delete a  merchant by their uid
      operationId: merchant-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '404':
          description: The item dont exists
  /api/market/merchants/{uid}/enable:
    patch:
      tags:
        - merchant
      summary: Update a merchant by their uid
      operationId: merchant-api-enable
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '404':
          description: The item dont exists
  /api/market/merchants/{uid}/disable:
    patch:
      tags:
        - merchant
      summary: Update a merchant by their uid
      operationId: merchant-api-disable
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Merchant'
        '404':
          description: The item dont exists
  /api/me/acl/market/merchants:
    get:
      tags:
        - merchant-acl
      summary: Check for allow permissions for the current user on merchant
      operationId: merchant-api-generic-acl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantGenericAcl'
  /api/me/acl/market/merchants/{uid}:
    get:
      tags:
        - merchant-acl
      summary: Check for allow permissions for the current user on merchant by their uid
      operationId: merchant-api-contextual-acl
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MerchantSpecificAcl'
        '404':
          description: The item dont exists
  /api/market/verifies:
    get:
      tags:
        - verify
      summary: List of verify
      operationId: verify-api-list
      parameters:
        - name: uid
          in: query
          description: Filter by one existent id
          required: false
          schema:
            type: string
        - name: uids
          in: query
          description: Filter by a list of ids
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          description: Textual search
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: name
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
        - name: since-uid
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: string
        - name: since-name
          in: query
          description: Order by name asc
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: The result order information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyList'
    post:
      tags:
        - verify
      summary: Create a new verify
      operationId: verify-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify'
  /api/market/verifies/{uid}:
    get:
      tags:
        - verify
      summary: Retrive on  verify by their uid
      operationId: verify-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify'
        '404':
          description: The item dont exists
    put:
      tags:
        - verify
      summary: Update a verify by their uid
      operationId: verify-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Verify'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify'
        '404':
          description: The item dont exists
    delete:
      tags:
        - verify
      summary: Delete a  verify by their uid
      operationId: verify-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Verify'
        '404':
          description: The item dont exists
  /api/me/acl/market/verifies:
    get:
      tags:
        - verify-acl
      summary: Check for allow permissions for the current user on verify
      operationId: verify-api-generic-acl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyGenericAcl'
  /api/me/acl/market/verifies/{uid}:
    get:
      tags:
        - verify-acl
      summary: Check for allow permissions for the current user on verify by their uid
      operationId: verify-api-contextual-acl
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifySpecificAcl'
        '404':
          description: The item dont exists
  /api/market/places:
    get:
      tags:
        - place
      summary: List of place
      operationId: place-api-list
      parameters:
        - name: uid
          in: query
          description: Filter by one existent id
          required: false
          schema:
            type: string
        - name: uids
          in: query
          description: Filter by a list of ids
          required: false
          schema:
            type: array
            items:
              type: string
          style: form
          explode: false
        - name: search
          in: query
          description: Textual search
          required: false
          schema:
            type: string
        - name: name
          in: query
          description: name
          required: false
          schema:
            type: string
        - name: merchant
          in: query
          description: merchant
          required: false
          schema:
            type: string
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
        - name: since-uid
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: string
        - name: since-name
          in: query
          description: Order by name asc
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: The result order information
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceList'
    post:
      tags:
        - place
      summary: Create a new place
      operationId: place-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
  /api/market/places/{uid}:
    get:
      tags:
        - place
      summary: Retrive on  place by their uid
      operationId: place-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '404':
          description: The item dont exists
    put:
      tags:
        - place
      summary: Update a place by their uid
      operationId: place-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Place'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '404':
          description: The item dont exists
    delete:
      tags:
        - place
      summary: Delete a  place by their uid
      operationId: place-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Place'
        '404':
          description: The item dont exists
  /api/me/acl/market/places:
    get:
      tags:
        - place-acl
      summary: Check for allow permissions for the current user on place
      operationId: place-api-generic-acl
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceGenericAcl'
  /api/me/acl/market/places/{uid}:
    get:
      tags:
        - place-acl
      summary: Check for allow permissions for the current user on place by their uid
      operationId: place-api-contextual-acl
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlaceSpecificAcl'
        '404':
          description: The item dont exists
  /api/market/places/{uid}/photo:
    get:
      tags:
        - place
      summary: Retrieve binary content for photo of place
      operationId: place-api-retrieve-photo
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
  /api/market/places/-/temp-photo:
    get:
      tags:
        - place
      summary: Retrieve binary content of a temporal upload for photo of place
      operationId: place-api-retrieve-temp-upload-photo
      parameters:
        - name: temp
          in: query
          description: The temp code
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
    post:
      tags:
        - place
      summary: Retrieve binary content of a temporal upload for photo of place
      operationId: place-api-upload-temp-upload-photo
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  description: The file to upload
              required:
                - file
      responses:
        '200':
          description: File uploaded successfully
          content:
            text/plain:
              schema:
                type: string
        '400':
          description: Invalid input or missing file

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Opcional, para indicar que es un JWT
  schemas:
    MassiveOperationResult:
      type: object
      properties:
        oks:
          type: array
          items:
            type: string
        warns:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        errors:
          type: object
          additionalProperties:
            type: array
            items:
              type: string
        warnConstraints:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/ConstraintFail"
        errorConstraints:
          type: object
          additionalProperties:
            type: array
            items:
              $ref: "#/components/schemas/ConstraintFail"
    ConstraintFail:
      type: object
      properties:
        description:
          type: string
        code:
          type: string
        violation:
          type: string
        source:
          type: array
          items:
            type: string
        invalidValues:
          type: array
          items:
            type: object
        sourceText:
          type: string
    PlaceRef:
      type: object
      properties:
        $ref:
          type: string
      required:
        - uid
        - name
        - place
    Area:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        place:
          $ref: '#/components/schemas/PlaceRef'
        version:
          type: integer
          format: int32
    AreaList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Area'
        next:
          $ref: '#/components/schemas/AreaListNextOffset'
    AreaListNextOffset:
      type: object
      properties:
        since-uid:
          type: string
        since-name:
            type: string
    CommonAllow:
      type: object
      properties:
        allowed:
          type: boolean
        reason:
          type: string
    AreaGenericAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/AreaAclGenericAllows'
        fields:
          $ref: '#/components/schemas/AreaAclFields'
    AreaSpecificAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/AreaAclSpecificAllows'
        fields:
          $ref: '#/components/schemas/AreaAclFields'
    AreaAclGenericAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        list:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - list
    AreaAclSpecificAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
    AreaAclFields:
      type: object
      properties:
        noEditables:
          type: array
          items:
            type: string
        noVisibles:
          type: array
          items:
            type: string
    MerchantRef:
      type: object
      properties:
        $ref:
          type: string
      required:
        - uid
        - name
    Color:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        merchant:
          $ref: '#/components/schemas/MerchantRef'
        version:
          type: integer
          format: int32
    ColorList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Color'
        next:
          $ref: '#/components/schemas/ColorListNextOffset'
    ColorListNextOffset:
      type: object
      properties:
        since-uid:
          type: string
        since-name:
            type: string
    ColorGenericAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/ColorAclGenericAllows'
        fields:
          $ref: '#/components/schemas/ColorAclFields'
    ColorSpecificAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/ColorAclSpecificAllows'
        fields:
          $ref: '#/components/schemas/ColorAclFields'
    ColorAclGenericAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        list:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - list
    ColorAclSpecificAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
    ColorAclFields:
      type: object
      properties:
        noEditables:
          type: array
          items:
            type: string
        noVisibles:
          type: array
          items:
            type: string
    Fruit:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        version:
          type: integer
          format: int32
    FruitList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Fruit'
        next:
          $ref: '#/components/schemas/FruitListNextOffset'
    FruitListNextOffset:
      type: object
      properties:
        since-uid:
          type: string
        since-name:
            type: string
    FruitGenericAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/FruitAclGenericAllows'
        fields:
          $ref: '#/components/schemas/FruitAclFields'
    FruitSpecificAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/FruitAclSpecificAllows'
        fields:
          $ref: '#/components/schemas/FruitAclFields'
    FruitAclGenericAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        list:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - list
    FruitAclSpecificAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
    FruitAclFields:
      type: object
      properties:
        noEditables:
          type: array
          items:
            type: string
        noVisibles:
          type: array
          items:
            type: string
    Medal:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        version:
          type: integer
          format: int32
    MedalList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Medal'
        next:
          $ref: '#/components/schemas/MedalListNextOffset'
    MedalListNextOffset:
      type: object
      properties:
        since-uid:
          type: string
        since-name:
            type: string
    MedalGenericAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/MedalAclGenericAllows'
        fields:
          $ref: '#/components/schemas/MedalAclFields'
    MedalSpecificAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/MedalAclSpecificAllows'
        fields:
          $ref: '#/components/schemas/MedalAclFields'
    MedalAclGenericAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        list:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - list
    MedalAclSpecificAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
    MedalAclFields:
      type: object
      properties:
        noEditables:
          type: array
          items:
            type: string
        noVisibles:
          type: array
          items:
            type: string
    Merchant:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        enabled:
          type: boolean
        key:
          type: string
        version:
          type: integer
          format: int32
    MerchantList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Merchant'
        next:
          $ref: '#/components/schemas/MerchantListNextOffset'
    MerchantListNextOffset:
      type: object
      properties:
        since-uid:
          type: string
        since-name:
            type: string
    MerchantGenericAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/MerchantAclGenericAllows'
        fields:
          $ref: '#/components/schemas/MerchantAclFields'
    MerchantSpecificAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/MerchantAclSpecificAllows'
        fields:
          $ref: '#/components/schemas/MerchantAclFields'
    MerchantAclGenericAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        enable:
          $ref: '#/components/schemas/CommonAllow'
        disable:
          $ref: '#/components/schemas/CommonAllow'
        list:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - enable
        - disable
        - list
    MerchantAclSpecificAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        enable:
          $ref: '#/components/schemas/CommonAllow'
        disable:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - enable
        - disable
    MerchantAclFields:
      type: object
      properties:
        noEditables:
          type: array
          items:
            type: string
        noVisibles:
          type: array
          items:
            type: string
    MedalRef:
      type: object
      properties:
        $ref:
          type: string
      required:
        - uid
        - medal
    Medals:
      type: object
      properties:
        uid:
          type: string
        medal:
          $ref: '#/components/schemas/MedalRef'
        version:
          type: integer
          format: int32
    Verify:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        medals:
          type: array
          items:
            $ref: '#/components/schemas/Medals'
        version:
          type: integer
          format: int32
    VerifyList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Verify'
        next:
          $ref: '#/components/schemas/VerifyListNextOffset'
    VerifyListNextOffset:
      type: object
      properties:
        since-uid:
          type: string
        since-name:
            type: string
    VerifyGenericAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/VerifyAclGenericAllows'
        fields:
          $ref: '#/components/schemas/VerifyAclFields'
    VerifySpecificAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/VerifyAclSpecificAllows'
        fields:
          $ref: '#/components/schemas/VerifyAclFields'
    VerifyAclGenericAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        list:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - list
    VerifyAclSpecificAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
    VerifyAclFields:
      type: object
      properties:
        noEditables:
          type: array
          items:
            type: string
        noVisibles:
          type: array
          items:
            type: string
    Place:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        merchant:
          $ref: '#/components/schemas/MerchantRef'
        photo:
          type: string
        openingDate:
          type: string
          format: date-time
        version:
          type: integer
          format: int32
    PlaceList:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Place'
        next:
          $ref: '#/components/schemas/PlaceListNextOffset'
    PlaceListNextOffset:
      type: object
      properties:
        since-uid:
          type: string
        since-name:
            type: string
    PlaceGenericAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/PlaceAclGenericAllows'
        fields:
          $ref: '#/components/schemas/PlaceAclFields'
    PlaceSpecificAcl:
      type: object
      properties:
        allows:
          $ref: '#/components/schemas/PlaceAclSpecificAllows'
        fields:
          $ref: '#/components/schemas/PlaceAclFields'
    PlaceAclGenericAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
        list:
          $ref: '#/components/schemas/CommonAllow'
        uploadPhoto:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
        - list
        - uploadPhoto
    PlaceAclSpecificAllows:
      type: object
      properties:
        retrieve:
          $ref: '#/components/schemas/CommonAllow'
        create:
          $ref: '#/components/schemas/CommonAllow'
        update:
          $ref: '#/components/schemas/CommonAllow'
        delete:
          $ref: '#/components/schemas/CommonAllow'
      required:
        - retrieve
        - create
        - update
        - delete
    PlaceAclFields:
      type: object
      properties:
        noEditables:
          type: array
          items:
            type: string
        noVisibles:
          type: array
          items:
            type: string

