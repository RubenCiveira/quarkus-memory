# @autogenerated
openapi: 3.0.1
info:
  title: OpenAPI definition
  version: 1.0.0-SNAPSHOT
  contact:
    name: Ruben
  license:
    name: apache
servers:
- url: https://{host}:{port}/{basePath}
  description: The production API server
  variables:
    host:
      default: localhost
      description: this value is assigned by the service provider, in this example `gigantic-server.com`
    port:
      enum:
        - '8090'
      default: '8090'
    basePath:
      default: ''
security:
  - BearerAuth: [] # Aplica el esquema de seguridad por defecto a toda la API
tags:
  - name: fruit
    description: fruit

paths:
  /api/market/fruits:
    get:
      tags:
        - fruit
      summary: List of fruit
      operationId: fruit-api-list
      parameters:
        - name: limit
          in: query
          description: The maximun number of results
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Fruit'
    post:
      tags:
        - fruit
      summary: Create a new fruit
      operationId: fruit-api-create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
  /api/market/fruits/{uid}:
    get:
      tags:
        - fruit
      summary: Retrive on  fruit by their uid
      operationId: fruit-api-retrieve
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '404':
          description: The item dont exists
    put:
      tags:
        - fruit
      summary: Update a fruit by their uid
      operationId: fruit-api-update
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Fruit'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '404':
          description: The item dont exists
    delete:
      tags:
        - fruit
      summary: Delete a  fruit by their uid
      operationId: fruit-api-delete
      parameters:
        - name: uid
          in: path
          description: The iten identification
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Fruit'
        '404':
          description: The item dont exists

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Opcional, para indicar que es un JWT
  schemas:
    Fruit:
      type: object
      properties:
        uid:
          type: string
        name:
          type: string
        version:
          type: integer
          format: int32

